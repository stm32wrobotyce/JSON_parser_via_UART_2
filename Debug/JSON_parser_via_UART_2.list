
JSON_parser_via_UART_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006df8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08006f80  08006f80  00016f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007114  08007114  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007114  08007114  00017114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800711c  0800711c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800711c  0800711c  0001711c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007120  08007120  00017120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007124  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f1c  20000010  08007130  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000f2c  08007130  00020f2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e99  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b74  00000000  00000000  00033ed5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001078  00000000  00000000  00036a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f50  00000000  00000000  00037ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026cca  00000000  00000000  00038a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014f50  00000000  00000000  0005f6e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f228b  00000000  00000000  00074632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001668bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004518  00000000  00000000  00166910  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006f68 	.word	0x08006f68

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08006f68 	.word	0x08006f68

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_uldivmod>:
 8000550:	b953      	cbnz	r3, 8000568 <__aeabi_uldivmod+0x18>
 8000552:	b94a      	cbnz	r2, 8000568 <__aeabi_uldivmod+0x18>
 8000554:	2900      	cmp	r1, #0
 8000556:	bf08      	it	eq
 8000558:	2800      	cmpeq	r0, #0
 800055a:	bf1c      	itt	ne
 800055c:	f04f 31ff 	movne.w	r1, #4294967295
 8000560:	f04f 30ff 	movne.w	r0, #4294967295
 8000564:	f000 bad2 	b.w	8000b0c <__aeabi_idiv0>
 8000568:	f1ad 0c08 	sub.w	ip, sp, #8
 800056c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000570:	f000 f83a 	bl	80005e8 <__udivmoddi4>
 8000574:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000578:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800057c:	b004      	add	sp, #16
 800057e:	4770      	bx	lr

08000580 <__aeabi_f2lz>:
 8000580:	ee07 0a90 	vmov	s15, r0
 8000584:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800058c:	d401      	bmi.n	8000592 <__aeabi_f2lz+0x12>
 800058e:	f000 b80b 	b.w	80005a8 <__aeabi_f2ulz>
 8000592:	eef1 7a67 	vneg.f32	s15, s15
 8000596:	b508      	push	{r3, lr}
 8000598:	ee17 0a90 	vmov	r0, s15
 800059c:	f000 f804 	bl	80005a8 <__aeabi_f2ulz>
 80005a0:	4240      	negs	r0, r0
 80005a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a6:	bd08      	pop	{r3, pc}

080005a8 <__aeabi_f2ulz>:
 80005a8:	b5d0      	push	{r4, r6, r7, lr}
 80005aa:	f7ff ff79 	bl	80004a0 <__aeabi_f2d>
 80005ae:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <__aeabi_f2ulz+0x38>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	4606      	mov	r6, r0
 80005b4:	460f      	mov	r7, r1
 80005b6:	f000 f97f 	bl	80008b8 <__aeabi_dmul>
 80005ba:	f000 faa9 	bl	8000b10 <__aeabi_d2uiz>
 80005be:	4604      	mov	r4, r0
 80005c0:	f7ff ff4c 	bl	800045c <__aeabi_ui2d>
 80005c4:	4b07      	ldr	r3, [pc, #28]	; (80005e4 <__aeabi_f2ulz+0x3c>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	f000 f976 	bl	80008b8 <__aeabi_dmul>
 80005cc:	4602      	mov	r2, r0
 80005ce:	460b      	mov	r3, r1
 80005d0:	4630      	mov	r0, r6
 80005d2:	4639      	mov	r1, r7
 80005d4:	f7ff fe04 	bl	80001e0 <__aeabi_dsub>
 80005d8:	f000 fa9a 	bl	8000b10 <__aeabi_d2uiz>
 80005dc:	4621      	mov	r1, r4
 80005de:	bdd0      	pop	{r4, r6, r7, pc}
 80005e0:	3df00000 	.word	0x3df00000
 80005e4:	41f00000 	.word	0x41f00000

080005e8 <__udivmoddi4>:
 80005e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005ec:	9d08      	ldr	r5, [sp, #32]
 80005ee:	4604      	mov	r4, r0
 80005f0:	468e      	mov	lr, r1
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d14d      	bne.n	8000692 <__udivmoddi4+0xaa>
 80005f6:	428a      	cmp	r2, r1
 80005f8:	4694      	mov	ip, r2
 80005fa:	d969      	bls.n	80006d0 <__udivmoddi4+0xe8>
 80005fc:	fab2 f282 	clz	r2, r2
 8000600:	b152      	cbz	r2, 8000618 <__udivmoddi4+0x30>
 8000602:	fa01 f302 	lsl.w	r3, r1, r2
 8000606:	f1c2 0120 	rsb	r1, r2, #32
 800060a:	fa20 f101 	lsr.w	r1, r0, r1
 800060e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000612:	ea41 0e03 	orr.w	lr, r1, r3
 8000616:	4094      	lsls	r4, r2
 8000618:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800061c:	0c21      	lsrs	r1, r4, #16
 800061e:	fbbe f6f8 	udiv	r6, lr, r8
 8000622:	fa1f f78c 	uxth.w	r7, ip
 8000626:	fb08 e316 	mls	r3, r8, r6, lr
 800062a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800062e:	fb06 f107 	mul.w	r1, r6, r7
 8000632:	4299      	cmp	r1, r3
 8000634:	d90a      	bls.n	800064c <__udivmoddi4+0x64>
 8000636:	eb1c 0303 	adds.w	r3, ip, r3
 800063a:	f106 30ff 	add.w	r0, r6, #4294967295
 800063e:	f080 811f 	bcs.w	8000880 <__udivmoddi4+0x298>
 8000642:	4299      	cmp	r1, r3
 8000644:	f240 811c 	bls.w	8000880 <__udivmoddi4+0x298>
 8000648:	3e02      	subs	r6, #2
 800064a:	4463      	add	r3, ip
 800064c:	1a5b      	subs	r3, r3, r1
 800064e:	b2a4      	uxth	r4, r4
 8000650:	fbb3 f0f8 	udiv	r0, r3, r8
 8000654:	fb08 3310 	mls	r3, r8, r0, r3
 8000658:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800065c:	fb00 f707 	mul.w	r7, r0, r7
 8000660:	42a7      	cmp	r7, r4
 8000662:	d90a      	bls.n	800067a <__udivmoddi4+0x92>
 8000664:	eb1c 0404 	adds.w	r4, ip, r4
 8000668:	f100 33ff 	add.w	r3, r0, #4294967295
 800066c:	f080 810a 	bcs.w	8000884 <__udivmoddi4+0x29c>
 8000670:	42a7      	cmp	r7, r4
 8000672:	f240 8107 	bls.w	8000884 <__udivmoddi4+0x29c>
 8000676:	4464      	add	r4, ip
 8000678:	3802      	subs	r0, #2
 800067a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800067e:	1be4      	subs	r4, r4, r7
 8000680:	2600      	movs	r6, #0
 8000682:	b11d      	cbz	r5, 800068c <__udivmoddi4+0xa4>
 8000684:	40d4      	lsrs	r4, r2
 8000686:	2300      	movs	r3, #0
 8000688:	e9c5 4300 	strd	r4, r3, [r5]
 800068c:	4631      	mov	r1, r6
 800068e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000692:	428b      	cmp	r3, r1
 8000694:	d909      	bls.n	80006aa <__udivmoddi4+0xc2>
 8000696:	2d00      	cmp	r5, #0
 8000698:	f000 80ef 	beq.w	800087a <__udivmoddi4+0x292>
 800069c:	2600      	movs	r6, #0
 800069e:	e9c5 0100 	strd	r0, r1, [r5]
 80006a2:	4630      	mov	r0, r6
 80006a4:	4631      	mov	r1, r6
 80006a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006aa:	fab3 f683 	clz	r6, r3
 80006ae:	2e00      	cmp	r6, #0
 80006b0:	d14a      	bne.n	8000748 <__udivmoddi4+0x160>
 80006b2:	428b      	cmp	r3, r1
 80006b4:	d302      	bcc.n	80006bc <__udivmoddi4+0xd4>
 80006b6:	4282      	cmp	r2, r0
 80006b8:	f200 80f9 	bhi.w	80008ae <__udivmoddi4+0x2c6>
 80006bc:	1a84      	subs	r4, r0, r2
 80006be:	eb61 0303 	sbc.w	r3, r1, r3
 80006c2:	2001      	movs	r0, #1
 80006c4:	469e      	mov	lr, r3
 80006c6:	2d00      	cmp	r5, #0
 80006c8:	d0e0      	beq.n	800068c <__udivmoddi4+0xa4>
 80006ca:	e9c5 4e00 	strd	r4, lr, [r5]
 80006ce:	e7dd      	b.n	800068c <__udivmoddi4+0xa4>
 80006d0:	b902      	cbnz	r2, 80006d4 <__udivmoddi4+0xec>
 80006d2:	deff      	udf	#255	; 0xff
 80006d4:	fab2 f282 	clz	r2, r2
 80006d8:	2a00      	cmp	r2, #0
 80006da:	f040 8092 	bne.w	8000802 <__udivmoddi4+0x21a>
 80006de:	eba1 010c 	sub.w	r1, r1, ip
 80006e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006e6:	fa1f fe8c 	uxth.w	lr, ip
 80006ea:	2601      	movs	r6, #1
 80006ec:	0c20      	lsrs	r0, r4, #16
 80006ee:	fbb1 f3f7 	udiv	r3, r1, r7
 80006f2:	fb07 1113 	mls	r1, r7, r3, r1
 80006f6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80006fa:	fb0e f003 	mul.w	r0, lr, r3
 80006fe:	4288      	cmp	r0, r1
 8000700:	d908      	bls.n	8000714 <__udivmoddi4+0x12c>
 8000702:	eb1c 0101 	adds.w	r1, ip, r1
 8000706:	f103 38ff 	add.w	r8, r3, #4294967295
 800070a:	d202      	bcs.n	8000712 <__udivmoddi4+0x12a>
 800070c:	4288      	cmp	r0, r1
 800070e:	f200 80cb 	bhi.w	80008a8 <__udivmoddi4+0x2c0>
 8000712:	4643      	mov	r3, r8
 8000714:	1a09      	subs	r1, r1, r0
 8000716:	b2a4      	uxth	r4, r4
 8000718:	fbb1 f0f7 	udiv	r0, r1, r7
 800071c:	fb07 1110 	mls	r1, r7, r0, r1
 8000720:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000724:	fb0e fe00 	mul.w	lr, lr, r0
 8000728:	45a6      	cmp	lr, r4
 800072a:	d908      	bls.n	800073e <__udivmoddi4+0x156>
 800072c:	eb1c 0404 	adds.w	r4, ip, r4
 8000730:	f100 31ff 	add.w	r1, r0, #4294967295
 8000734:	d202      	bcs.n	800073c <__udivmoddi4+0x154>
 8000736:	45a6      	cmp	lr, r4
 8000738:	f200 80bb 	bhi.w	80008b2 <__udivmoddi4+0x2ca>
 800073c:	4608      	mov	r0, r1
 800073e:	eba4 040e 	sub.w	r4, r4, lr
 8000742:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000746:	e79c      	b.n	8000682 <__udivmoddi4+0x9a>
 8000748:	f1c6 0720 	rsb	r7, r6, #32
 800074c:	40b3      	lsls	r3, r6
 800074e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000752:	ea4c 0c03 	orr.w	ip, ip, r3
 8000756:	fa20 f407 	lsr.w	r4, r0, r7
 800075a:	fa01 f306 	lsl.w	r3, r1, r6
 800075e:	431c      	orrs	r4, r3
 8000760:	40f9      	lsrs	r1, r7
 8000762:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000766:	fa00 f306 	lsl.w	r3, r0, r6
 800076a:	fbb1 f8f9 	udiv	r8, r1, r9
 800076e:	0c20      	lsrs	r0, r4, #16
 8000770:	fa1f fe8c 	uxth.w	lr, ip
 8000774:	fb09 1118 	mls	r1, r9, r8, r1
 8000778:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800077c:	fb08 f00e 	mul.w	r0, r8, lr
 8000780:	4288      	cmp	r0, r1
 8000782:	fa02 f206 	lsl.w	r2, r2, r6
 8000786:	d90b      	bls.n	80007a0 <__udivmoddi4+0x1b8>
 8000788:	eb1c 0101 	adds.w	r1, ip, r1
 800078c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000790:	f080 8088 	bcs.w	80008a4 <__udivmoddi4+0x2bc>
 8000794:	4288      	cmp	r0, r1
 8000796:	f240 8085 	bls.w	80008a4 <__udivmoddi4+0x2bc>
 800079a:	f1a8 0802 	sub.w	r8, r8, #2
 800079e:	4461      	add	r1, ip
 80007a0:	1a09      	subs	r1, r1, r0
 80007a2:	b2a4      	uxth	r4, r4
 80007a4:	fbb1 f0f9 	udiv	r0, r1, r9
 80007a8:	fb09 1110 	mls	r1, r9, r0, r1
 80007ac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80007b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80007b4:	458e      	cmp	lr, r1
 80007b6:	d908      	bls.n	80007ca <__udivmoddi4+0x1e2>
 80007b8:	eb1c 0101 	adds.w	r1, ip, r1
 80007bc:	f100 34ff 	add.w	r4, r0, #4294967295
 80007c0:	d26c      	bcs.n	800089c <__udivmoddi4+0x2b4>
 80007c2:	458e      	cmp	lr, r1
 80007c4:	d96a      	bls.n	800089c <__udivmoddi4+0x2b4>
 80007c6:	3802      	subs	r0, #2
 80007c8:	4461      	add	r1, ip
 80007ca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80007ce:	fba0 9402 	umull	r9, r4, r0, r2
 80007d2:	eba1 010e 	sub.w	r1, r1, lr
 80007d6:	42a1      	cmp	r1, r4
 80007d8:	46c8      	mov	r8, r9
 80007da:	46a6      	mov	lr, r4
 80007dc:	d356      	bcc.n	800088c <__udivmoddi4+0x2a4>
 80007de:	d053      	beq.n	8000888 <__udivmoddi4+0x2a0>
 80007e0:	b15d      	cbz	r5, 80007fa <__udivmoddi4+0x212>
 80007e2:	ebb3 0208 	subs.w	r2, r3, r8
 80007e6:	eb61 010e 	sbc.w	r1, r1, lr
 80007ea:	fa01 f707 	lsl.w	r7, r1, r7
 80007ee:	fa22 f306 	lsr.w	r3, r2, r6
 80007f2:	40f1      	lsrs	r1, r6
 80007f4:	431f      	orrs	r7, r3
 80007f6:	e9c5 7100 	strd	r7, r1, [r5]
 80007fa:	2600      	movs	r6, #0
 80007fc:	4631      	mov	r1, r6
 80007fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000802:	f1c2 0320 	rsb	r3, r2, #32
 8000806:	40d8      	lsrs	r0, r3
 8000808:	fa0c fc02 	lsl.w	ip, ip, r2
 800080c:	fa21 f303 	lsr.w	r3, r1, r3
 8000810:	4091      	lsls	r1, r2
 8000812:	4301      	orrs	r1, r0
 8000814:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000818:	fa1f fe8c 	uxth.w	lr, ip
 800081c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000820:	fb07 3610 	mls	r6, r7, r0, r3
 8000824:	0c0b      	lsrs	r3, r1, #16
 8000826:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800082a:	fb00 f60e 	mul.w	r6, r0, lr
 800082e:	429e      	cmp	r6, r3
 8000830:	fa04 f402 	lsl.w	r4, r4, r2
 8000834:	d908      	bls.n	8000848 <__udivmoddi4+0x260>
 8000836:	eb1c 0303 	adds.w	r3, ip, r3
 800083a:	f100 38ff 	add.w	r8, r0, #4294967295
 800083e:	d22f      	bcs.n	80008a0 <__udivmoddi4+0x2b8>
 8000840:	429e      	cmp	r6, r3
 8000842:	d92d      	bls.n	80008a0 <__udivmoddi4+0x2b8>
 8000844:	3802      	subs	r0, #2
 8000846:	4463      	add	r3, ip
 8000848:	1b9b      	subs	r3, r3, r6
 800084a:	b289      	uxth	r1, r1
 800084c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000850:	fb07 3316 	mls	r3, r7, r6, r3
 8000854:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000858:	fb06 f30e 	mul.w	r3, r6, lr
 800085c:	428b      	cmp	r3, r1
 800085e:	d908      	bls.n	8000872 <__udivmoddi4+0x28a>
 8000860:	eb1c 0101 	adds.w	r1, ip, r1
 8000864:	f106 38ff 	add.w	r8, r6, #4294967295
 8000868:	d216      	bcs.n	8000898 <__udivmoddi4+0x2b0>
 800086a:	428b      	cmp	r3, r1
 800086c:	d914      	bls.n	8000898 <__udivmoddi4+0x2b0>
 800086e:	3e02      	subs	r6, #2
 8000870:	4461      	add	r1, ip
 8000872:	1ac9      	subs	r1, r1, r3
 8000874:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000878:	e738      	b.n	80006ec <__udivmoddi4+0x104>
 800087a:	462e      	mov	r6, r5
 800087c:	4628      	mov	r0, r5
 800087e:	e705      	b.n	800068c <__udivmoddi4+0xa4>
 8000880:	4606      	mov	r6, r0
 8000882:	e6e3      	b.n	800064c <__udivmoddi4+0x64>
 8000884:	4618      	mov	r0, r3
 8000886:	e6f8      	b.n	800067a <__udivmoddi4+0x92>
 8000888:	454b      	cmp	r3, r9
 800088a:	d2a9      	bcs.n	80007e0 <__udivmoddi4+0x1f8>
 800088c:	ebb9 0802 	subs.w	r8, r9, r2
 8000890:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000894:	3801      	subs	r0, #1
 8000896:	e7a3      	b.n	80007e0 <__udivmoddi4+0x1f8>
 8000898:	4646      	mov	r6, r8
 800089a:	e7ea      	b.n	8000872 <__udivmoddi4+0x28a>
 800089c:	4620      	mov	r0, r4
 800089e:	e794      	b.n	80007ca <__udivmoddi4+0x1e2>
 80008a0:	4640      	mov	r0, r8
 80008a2:	e7d1      	b.n	8000848 <__udivmoddi4+0x260>
 80008a4:	46d0      	mov	r8, sl
 80008a6:	e77b      	b.n	80007a0 <__udivmoddi4+0x1b8>
 80008a8:	3b02      	subs	r3, #2
 80008aa:	4461      	add	r1, ip
 80008ac:	e732      	b.n	8000714 <__udivmoddi4+0x12c>
 80008ae:	4630      	mov	r0, r6
 80008b0:	e709      	b.n	80006c6 <__udivmoddi4+0xde>
 80008b2:	4464      	add	r4, ip
 80008b4:	3802      	subs	r0, #2
 80008b6:	e742      	b.n	800073e <__udivmoddi4+0x156>

080008b8 <__aeabi_dmul>:
 80008b8:	b570      	push	{r4, r5, r6, lr}
 80008ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008c6:	bf1d      	ittte	ne
 80008c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008cc:	ea94 0f0c 	teqne	r4, ip
 80008d0:	ea95 0f0c 	teqne	r5, ip
 80008d4:	f000 f8de 	bleq	8000a94 <__aeabi_dmul+0x1dc>
 80008d8:	442c      	add	r4, r5
 80008da:	ea81 0603 	eor.w	r6, r1, r3
 80008de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80008e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80008e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80008ea:	bf18      	it	ne
 80008ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80008f8:	d038      	beq.n	800096c <__aeabi_dmul+0xb4>
 80008fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80008fe:	f04f 0500 	mov.w	r5, #0
 8000902:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000906:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800090a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800090e:	f04f 0600 	mov.w	r6, #0
 8000912:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000916:	f09c 0f00 	teq	ip, #0
 800091a:	bf18      	it	ne
 800091c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000920:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000924:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000928:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800092c:	d204      	bcs.n	8000938 <__aeabi_dmul+0x80>
 800092e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000932:	416d      	adcs	r5, r5
 8000934:	eb46 0606 	adc.w	r6, r6, r6
 8000938:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800093c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000940:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000944:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000948:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800094c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000950:	bf88      	it	hi
 8000952:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000956:	d81e      	bhi.n	8000996 <__aeabi_dmul+0xde>
 8000958:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800095c:	bf08      	it	eq
 800095e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000962:	f150 0000 	adcs.w	r0, r0, #0
 8000966:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800096a:	bd70      	pop	{r4, r5, r6, pc}
 800096c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000970:	ea46 0101 	orr.w	r1, r6, r1
 8000974:	ea40 0002 	orr.w	r0, r0, r2
 8000978:	ea81 0103 	eor.w	r1, r1, r3
 800097c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000980:	bfc2      	ittt	gt
 8000982:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000986:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800098a:	bd70      	popgt	{r4, r5, r6, pc}
 800098c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000990:	f04f 0e00 	mov.w	lr, #0
 8000994:	3c01      	subs	r4, #1
 8000996:	f300 80ab 	bgt.w	8000af0 <__aeabi_dmul+0x238>
 800099a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800099e:	bfde      	ittt	le
 80009a0:	2000      	movle	r0, #0
 80009a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80009a6:	bd70      	pople	{r4, r5, r6, pc}
 80009a8:	f1c4 0400 	rsb	r4, r4, #0
 80009ac:	3c20      	subs	r4, #32
 80009ae:	da35      	bge.n	8000a1c <__aeabi_dmul+0x164>
 80009b0:	340c      	adds	r4, #12
 80009b2:	dc1b      	bgt.n	80009ec <__aeabi_dmul+0x134>
 80009b4:	f104 0414 	add.w	r4, r4, #20
 80009b8:	f1c4 0520 	rsb	r5, r4, #32
 80009bc:	fa00 f305 	lsl.w	r3, r0, r5
 80009c0:	fa20 f004 	lsr.w	r0, r0, r4
 80009c4:	fa01 f205 	lsl.w	r2, r1, r5
 80009c8:	ea40 0002 	orr.w	r0, r0, r2
 80009cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80009d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80009d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80009d8:	fa21 f604 	lsr.w	r6, r1, r4
 80009dc:	eb42 0106 	adc.w	r1, r2, r6
 80009e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009e4:	bf08      	it	eq
 80009e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009ea:	bd70      	pop	{r4, r5, r6, pc}
 80009ec:	f1c4 040c 	rsb	r4, r4, #12
 80009f0:	f1c4 0520 	rsb	r5, r4, #32
 80009f4:	fa00 f304 	lsl.w	r3, r0, r4
 80009f8:	fa20 f005 	lsr.w	r0, r0, r5
 80009fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000a00:	ea40 0002 	orr.w	r0, r0, r2
 8000a04:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a08:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000a0c:	f141 0100 	adc.w	r1, r1, #0
 8000a10:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000a14:	bf08      	it	eq
 8000a16:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000a1a:	bd70      	pop	{r4, r5, r6, pc}
 8000a1c:	f1c4 0520 	rsb	r5, r4, #32
 8000a20:	fa00 f205 	lsl.w	r2, r0, r5
 8000a24:	ea4e 0e02 	orr.w	lr, lr, r2
 8000a28:	fa20 f304 	lsr.w	r3, r0, r4
 8000a2c:	fa01 f205 	lsl.w	r2, r1, r5
 8000a30:	ea43 0302 	orr.w	r3, r3, r2
 8000a34:	fa21 f004 	lsr.w	r0, r1, r4
 8000a38:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a3c:	fa21 f204 	lsr.w	r2, r1, r4
 8000a40:	ea20 0002 	bic.w	r0, r0, r2
 8000a44:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000a48:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000a4c:	bf08      	it	eq
 8000a4e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000a52:	bd70      	pop	{r4, r5, r6, pc}
 8000a54:	f094 0f00 	teq	r4, #0
 8000a58:	d10f      	bne.n	8000a7a <__aeabi_dmul+0x1c2>
 8000a5a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000a5e:	0040      	lsls	r0, r0, #1
 8000a60:	eb41 0101 	adc.w	r1, r1, r1
 8000a64:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a68:	bf08      	it	eq
 8000a6a:	3c01      	subeq	r4, #1
 8000a6c:	d0f7      	beq.n	8000a5e <__aeabi_dmul+0x1a6>
 8000a6e:	ea41 0106 	orr.w	r1, r1, r6
 8000a72:	f095 0f00 	teq	r5, #0
 8000a76:	bf18      	it	ne
 8000a78:	4770      	bxne	lr
 8000a7a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000a7e:	0052      	lsls	r2, r2, #1
 8000a80:	eb43 0303 	adc.w	r3, r3, r3
 8000a84:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000a88:	bf08      	it	eq
 8000a8a:	3d01      	subeq	r5, #1
 8000a8c:	d0f7      	beq.n	8000a7e <__aeabi_dmul+0x1c6>
 8000a8e:	ea43 0306 	orr.w	r3, r3, r6
 8000a92:	4770      	bx	lr
 8000a94:	ea94 0f0c 	teq	r4, ip
 8000a98:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a9c:	bf18      	it	ne
 8000a9e:	ea95 0f0c 	teqne	r5, ip
 8000aa2:	d00c      	beq.n	8000abe <__aeabi_dmul+0x206>
 8000aa4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000aa8:	bf18      	it	ne
 8000aaa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000aae:	d1d1      	bne.n	8000a54 <__aeabi_dmul+0x19c>
 8000ab0:	ea81 0103 	eor.w	r1, r1, r3
 8000ab4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000ab8:	f04f 0000 	mov.w	r0, #0
 8000abc:	bd70      	pop	{r4, r5, r6, pc}
 8000abe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ac2:	bf06      	itte	eq
 8000ac4:	4610      	moveq	r0, r2
 8000ac6:	4619      	moveq	r1, r3
 8000ac8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000acc:	d019      	beq.n	8000b02 <__aeabi_dmul+0x24a>
 8000ace:	ea94 0f0c 	teq	r4, ip
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dmul+0x222>
 8000ad4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000ad8:	d113      	bne.n	8000b02 <__aeabi_dmul+0x24a>
 8000ada:	ea95 0f0c 	teq	r5, ip
 8000ade:	d105      	bne.n	8000aec <__aeabi_dmul+0x234>
 8000ae0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000ae4:	bf1c      	itt	ne
 8000ae6:	4610      	movne	r0, r2
 8000ae8:	4619      	movne	r1, r3
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dmul+0x24a>
 8000aec:	ea81 0103 	eor.w	r1, r1, r3
 8000af0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000af4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000af8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	bd70      	pop	{r4, r5, r6, pc}
 8000b02:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000b06:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000b0a:	bd70      	pop	{r4, r5, r6, pc}

08000b0c <__aeabi_idiv0>:
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop

08000b10 <__aeabi_d2uiz>:
 8000b10:	004a      	lsls	r2, r1, #1
 8000b12:	d211      	bcs.n	8000b38 <__aeabi_d2uiz+0x28>
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d211      	bcs.n	8000b3e <__aeabi_d2uiz+0x2e>
 8000b1a:	d50d      	bpl.n	8000b38 <__aeabi_d2uiz+0x28>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d40e      	bmi.n	8000b44 <__aeabi_d2uiz+0x34>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	fa23 f002 	lsr.w	r0, r3, r2
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_d2uiz+0x3a>
 8000b44:	f04f 30ff 	mov.w	r0, #4294967295
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0000 	mov.w	r0, #0
 8000b4e:	4770      	bx	lr

08000b50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b56:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <MX_DMA_Init+0x48>)
 8000b58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b5a:	4a0f      	ldr	r2, [pc, #60]	; (8000b98 <MX_DMA_Init+0x48>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	6493      	str	r3, [r2, #72]	; 0x48
 8000b62:	4b0d      	ldr	r3, [pc, #52]	; (8000b98 <MX_DMA_Init+0x48>)
 8000b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2100      	movs	r1, #0
 8000b72:	200f      	movs	r0, #15
 8000b74:	f001 fe5f 	bl	8002836 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000b78:	200f      	movs	r0, #15
 8000b7a:	f001 fe78 	bl	800286e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2100      	movs	r1, #0
 8000b82:	2010      	movs	r0, #16
 8000b84:	f001 fe57 	bl	8002836 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000b88:	2010      	movs	r0, #16
 8000b8a:	f001 fe70 	bl	800286e <HAL_NVIC_EnableIRQ>

}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40021000 	.word	0x40021000

08000b9c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08a      	sub	sp, #40	; 0x28
 8000ba0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
 8000bb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb2:	4b2f      	ldr	r3, [pc, #188]	; (8000c70 <MX_GPIO_Init+0xd4>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb6:	4a2e      	ldr	r2, [pc, #184]	; (8000c70 <MX_GPIO_Init+0xd4>)
 8000bb8:	f043 0304 	orr.w	r3, r3, #4
 8000bbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bbe:	4b2c      	ldr	r3, [pc, #176]	; (8000c70 <MX_GPIO_Init+0xd4>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc2:	f003 0304 	and.w	r3, r3, #4
 8000bc6:	613b      	str	r3, [r7, #16]
 8000bc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bca:	4b29      	ldr	r3, [pc, #164]	; (8000c70 <MX_GPIO_Init+0xd4>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bce:	4a28      	ldr	r2, [pc, #160]	; (8000c70 <MX_GPIO_Init+0xd4>)
 8000bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bd6:	4b26      	ldr	r3, [pc, #152]	; (8000c70 <MX_GPIO_Init+0xd4>)
 8000bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be2:	4b23      	ldr	r3, [pc, #140]	; (8000c70 <MX_GPIO_Init+0xd4>)
 8000be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be6:	4a22      	ldr	r2, [pc, #136]	; (8000c70 <MX_GPIO_Init+0xd4>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bee:	4b20      	ldr	r3, [pc, #128]	; (8000c70 <MX_GPIO_Init+0xd4>)
 8000bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfa:	4b1d      	ldr	r3, [pc, #116]	; (8000c70 <MX_GPIO_Init+0xd4>)
 8000bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfe:	4a1c      	ldr	r2, [pc, #112]	; (8000c70 <MX_GPIO_Init+0xd4>)
 8000c00:	f043 0302 	orr.w	r3, r3, #2
 8000c04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c06:	4b1a      	ldr	r3, [pc, #104]	; (8000c70 <MX_GPIO_Init+0xd4>)
 8000c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0a:	f003 0302 	and.w	r3, r3, #2
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2120      	movs	r1, #32
 8000c16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1a:	f002 fa63 	bl	80030e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c24:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4619      	mov	r1, r3
 8000c34:	480f      	ldr	r0, [pc, #60]	; (8000c74 <MX_GPIO_Init+0xd8>)
 8000c36:	f002 f8ab 	bl	8002d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c3a:	2320      	movs	r3, #32
 8000c3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c46:	2300      	movs	r3, #0
 8000c48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	4619      	mov	r1, r3
 8000c50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c54:	f002 f89c 	bl	8002d90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	2028      	movs	r0, #40	; 0x28
 8000c5e:	f001 fdea 	bl	8002836 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c62:	2028      	movs	r0, #40	; 0x28
 8000c64:	f001 fe03 	bl	800286e <HAL_NVIC_EnableIRQ>

}
 8000c68:	bf00      	nop
 8000c6a:	3728      	adds	r7, #40	; 0x28
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40021000 	.word	0x40021000
 8000c74:	48000800 	.word	0x48000800

08000c78 <led_init>:
		144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,
		177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
		215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };

void led_init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
	uint32_t i;

	for(i=0; i < NUMBER_OF_LEDS; i++)
 8000c7e:	2300      	movs	r3, #0
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	e008      	b.n	8000c96 <led_init+0x1e>
	{
		led_set_one_led_colors(i, 0, 0, 0);
 8000c84:	2300      	movs	r3, #0
 8000c86:	2200      	movs	r2, #0
 8000c88:	2100      	movs	r1, #0
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f000 f82e 	bl	8000cec <led_set_one_led_colors>
	for(i=0; i < NUMBER_OF_LEDS; i++)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3301      	adds	r3, #1
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2b03      	cmp	r3, #3
 8000c9a:	d9f3      	bls.n	8000c84 <led_init+0xc>
	}

	leds_buffer.stop = LED_COMM_RESET_STATE;
 8000c9c:	4b03      	ldr	r3, [pc, #12]	; (8000cac <led_init+0x34>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
 8000ca4:	bf00      	nop
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	2000002c 	.word	0x2000002c

08000cb0 <led_set_all_led_colors>:

void led_set_all_led_colors(uint8_t green, uint8_t red, uint8_t blue)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
 8000cba:	460b      	mov	r3, r1
 8000cbc:	71bb      	strb	r3, [r7, #6]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	717b      	strb	r3, [r7, #5]
	uint32_t i;

	for(i=0; i < NUMBER_OF_LEDS; i++)
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	e008      	b.n	8000cda <led_set_all_led_colors+0x2a>
	{
		led_set_one_led_colors(i, green, red, blue);
 8000cc8:	797b      	ldrb	r3, [r7, #5]
 8000cca:	79ba      	ldrb	r2, [r7, #6]
 8000ccc:	79f9      	ldrb	r1, [r7, #7]
 8000cce:	68f8      	ldr	r0, [r7, #12]
 8000cd0:	f000 f80c 	bl	8000cec <led_set_one_led_colors>
	for(i=0; i < NUMBER_OF_LEDS; i++)
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	2b03      	cmp	r3, #3
 8000cde:	d9f3      	bls.n	8000cc8 <led_set_all_led_colors+0x18>
	}
}
 8000ce0:	bf00      	nop
 8000ce2:	bf00      	nop
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <led_set_one_led_colors>:

void led_set_one_led_colors(uint32_t led_number, uint8_t green, uint8_t red, uint8_t blue)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	4608      	mov	r0, r1
 8000cf6:	4611      	mov	r1, r2
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	70fb      	strb	r3, [r7, #3]
 8000cfe:	460b      	mov	r3, r1
 8000d00:	70bb      	strb	r3, [r7, #2]
 8000d02:	4613      	mov	r3, r2
 8000d04:	707b      	strb	r3, [r7, #1]
	led_set_colors_data(&(leds_buffer.leds[led_number]), green, red, blue);
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	4413      	add	r3, r2
 8000d0e:	00db      	lsls	r3, r3, #3
 8000d10:	4a05      	ldr	r2, [pc, #20]	; (8000d28 <led_set_one_led_colors+0x3c>)
 8000d12:	1898      	adds	r0, r3, r2
 8000d14:	787b      	ldrb	r3, [r7, #1]
 8000d16:	78ba      	ldrb	r2, [r7, #2]
 8000d18:	78f9      	ldrb	r1, [r7, #3]
 8000d1a:	f000 f807 	bl	8000d2c <led_set_colors_data>
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	2000002c 	.word	0x2000002c

08000d2c <led_set_colors_data>:

void led_set_colors_data(struct rgb_led *led, uint8_t green, uint8_t red, uint8_t blue)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	4608      	mov	r0, r1
 8000d36:	4611      	mov	r1, r2
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	70fb      	strb	r3, [r7, #3]
 8000d3e:	460b      	mov	r3, r1
 8000d40:	70bb      	strb	r3, [r7, #2]
 8000d42:	4613      	mov	r3, r2
 8000d44:	707b      	strb	r3, [r7, #1]
	led_convert_color_data_to_ws2812b_format(gamma_correction[green], led->green);
 8000d46:	78fb      	ldrb	r3, [r7, #3]
 8000d48:	4a0e      	ldr	r2, [pc, #56]	; (8000d84 <led_set_colors_data+0x58>)
 8000d4a:	5cd3      	ldrb	r3, [r2, r3]
 8000d4c:	687a      	ldr	r2, [r7, #4]
 8000d4e:	4611      	mov	r1, r2
 8000d50:	4618      	mov	r0, r3
 8000d52:	f000 f819 	bl	8000d88 <led_convert_color_data_to_ws2812b_format>
	led_convert_color_data_to_ws2812b_format(gamma_correction[red], led->red);
 8000d56:	78bb      	ldrb	r3, [r7, #2]
 8000d58:	4a0a      	ldr	r2, [pc, #40]	; (8000d84 <led_set_colors_data+0x58>)
 8000d5a:	5cd2      	ldrb	r2, [r2, r3]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3308      	adds	r3, #8
 8000d60:	4619      	mov	r1, r3
 8000d62:	4610      	mov	r0, r2
 8000d64:	f000 f810 	bl	8000d88 <led_convert_color_data_to_ws2812b_format>
	led_convert_color_data_to_ws2812b_format(gamma_correction[blue], led->blue);
 8000d68:	787b      	ldrb	r3, [r7, #1]
 8000d6a:	4a06      	ldr	r2, [pc, #24]	; (8000d84 <led_set_colors_data+0x58>)
 8000d6c:	5cd2      	ldrb	r2, [r2, r3]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	3310      	adds	r3, #16
 8000d72:	4619      	mov	r1, r3
 8000d74:	4610      	mov	r0, r2
 8000d76:	f000 f807 	bl	8000d88 <led_convert_color_data_to_ws2812b_format>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	08006fcc 	.word	0x08006fcc

08000d88 <led_convert_color_data_to_ws2812b_format>:

void led_convert_color_data_to_ws2812b_format(uint8_t color_data, uint8_t *buffer)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	6039      	str	r1, [r7, #0]
 8000d92:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i=0; i<BIT_IN_BYTES; i++)
 8000d94:	2300      	movs	r3, #0
 8000d96:	73fb      	strb	r3, [r7, #15]
 8000d98:	e019      	b.n	8000dce <led_convert_color_data_to_ws2812b_format+0x46>
	{
		if(((color_data >> i) & 0x01) == 1)
 8000d9a:	79fa      	ldrb	r2, [r7, #7]
 8000d9c:	7bfb      	ldrb	r3, [r7, #15]
 8000d9e:	fa42 f303 	asr.w	r3, r2, r3
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d007      	beq.n	8000dba <led_convert_color_data_to_ws2812b_format+0x32>
		{
			*(buffer+(BIT_IN_BYTES-i-1)) = LED_COMM_HIGH_STATE;
 8000daa:	7bfb      	ldrb	r3, [r7, #15]
 8000dac:	f1c3 0307 	rsb	r3, r3, #7
 8000db0:	683a      	ldr	r2, [r7, #0]
 8000db2:	4413      	add	r3, r2
 8000db4:	2240      	movs	r2, #64	; 0x40
 8000db6:	701a      	strb	r2, [r3, #0]
 8000db8:	e006      	b.n	8000dc8 <led_convert_color_data_to_ws2812b_format+0x40>
		}
		else
		{
			*(buffer+(BIT_IN_BYTES-i-1)) = LED_COMM_LOW_STATE;
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
 8000dbc:	f1c3 0307 	rsb	r3, r3, #7
 8000dc0:	683a      	ldr	r2, [r7, #0]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	2218      	movs	r2, #24
 8000dc6:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<BIT_IN_BYTES; i++)
 8000dc8:	7bfb      	ldrb	r3, [r7, #15]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	73fb      	strb	r3, [r7, #15]
 8000dce:	7bfb      	ldrb	r3, [r7, #15]
 8000dd0:	2b07      	cmp	r3, #7
 8000dd2:	d9e2      	bls.n	8000d9a <led_convert_color_data_to_ws2812b_format+0x12>
		}
	}
}
 8000dd4:	bf00      	nop
 8000dd6:	bf00      	nop
 8000dd8:	3714      	adds	r7, #20
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
	...

08000de4 <led_send_led_colors>:

void led_send_led_colors(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)leds_buffer.bytes, HEAD_LEDS_BUFFER_SIZE);
 8000de8:	2361      	movs	r3, #97	; 0x61
 8000dea:	4a03      	ldr	r2, [pc, #12]	; (8000df8 <led_send_led_colors+0x14>)
 8000dec:	2100      	movs	r1, #0
 8000dee:	4803      	ldr	r0, [pc, #12]	; (8000dfc <led_send_led_colors+0x18>)
 8000df0:	f003 fdc2 	bl	8004978 <HAL_TIM_PWM_Start_DMA>
}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	2000002c 	.word	0x2000002c
 8000dfc:	20000dc8 	.word	0x20000dc8

08000e00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e00:	b590      	push	{r4, r7, lr}
 8000e02:	b08d      	sub	sp, #52	; 0x34
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e06:	f001 fbbf 	bl	8002588 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e0a:	f000 f947 	bl	800109c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e0e:	f7ff fec5 	bl	8000b9c <MX_GPIO_Init>
  MX_DMA_Init();
 8000e12:	f7ff fe9d 	bl	8000b50 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000e16:	f000 fb2d 	bl	8001474 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000e1a:	f000 fa55 	bl	80012c8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  led_state_t led_state = LED_OFF;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint32_t blink_time = 1000;
 8000e24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e28:	62bb      	str	r3, [r7, #40]	; 0x28
  led_rgb_t led[4] = {0};
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
  uint32_t stimer = 0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t nbr;

  static lwjson_token_t tokens[128];
  static lwjson_t lwjson;

  lwjson_init(&lwjson, tokens, LWJSON_ARRAYSIZE(tokens));
 8000e38:	2280      	movs	r2, #128	; 0x80
 8000e3a:	498d      	ldr	r1, [pc, #564]	; (8001070 <main+0x270>)
 8000e3c:	488d      	ldr	r0, [pc, #564]	; (8001074 <main+0x274>)
 8000e3e:	f001 f896 	bl	8001f6e <lwjson_init>
  led_init();
 8000e42:	f7ff ff19 	bl	8000c78 <led_init>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rx_buffer, 256);
 8000e46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e4a:	498b      	ldr	r1, [pc, #556]	; (8001078 <main+0x278>)
 8000e4c:	488b      	ldr	r0, [pc, #556]	; (800107c <main+0x27c>)
 8000e4e:	f005 fff0 	bl	8006e32 <HAL_UARTEx_ReceiveToIdle_DMA>

  stimer = HAL_GetTick();
 8000e52:	f001 fc09 	bl	8002668 <HAL_GetTick>
 8000e56:	6278      	str	r0, [r7, #36]	; 0x24

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (data_received == true)
 8000e58:	4b89      	ldr	r3, [pc, #548]	; (8001080 <main+0x280>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	f000 80bb 	beq.w	8000fd8 <main+0x1d8>
	  {
		  data_received = false;
 8000e62:	4b87      	ldr	r3, [pc, #540]	; (8001080 <main+0x280>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	701a      	strb	r2, [r3, #0]
				}
			  ]
			}
		  */

		  if (lwjson_parse(&lwjson, (char*)rx_buffer) == lwjsonOK)
 8000e68:	4983      	ldr	r1, [pc, #524]	; (8001078 <main+0x278>)
 8000e6a:	4882      	ldr	r0, [pc, #520]	; (8001074 <main+0x274>)
 8000e6c:	f001 fb00 	bl	8002470 <lwjson_parse>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	f040 80b0 	bne.w	8000fd8 <main+0x1d8>
		  {
			  const lwjson_token_t* t;
			  const lwjson_token_t* tmp;

			  if ((t = lwjson_find(&lwjson, "BLINK_TIME")) != NULL)
 8000e78:	4982      	ldr	r1, [pc, #520]	; (8001084 <main+0x284>)
 8000e7a:	487e      	ldr	r0, [pc, #504]	; (8001074 <main+0x274>)
 8000e7c:	f001 fb27 	bl	80024ce <lwjson_find>
 8000e80:	6178      	str	r0, [r7, #20]
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d00d      	beq.n	8000ea4 <main+0xa4>
			  {
				  blink_time = lwjson_get_val_int(t);
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d008      	beq.n	8000ea0 <main+0xa0>
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	791b      	ldrb	r3, [r3, #4]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d104      	bne.n	8000ea0 <main+0xa0>
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	e000      	b.n	8000ea2 <main+0xa2>
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	62bb      	str	r3, [r7, #40]	; 0x28
			  }

			  t = lwjson_find(&lwjson, "LED_COLOR");
 8000ea4:	4978      	ldr	r1, [pc, #480]	; (8001088 <main+0x288>)
 8000ea6:	4873      	ldr	r0, [pc, #460]	; (8001074 <main+0x274>)
 8000ea8:	f001 fb11 	bl	80024ce <lwjson_find>
 8000eac:	6178      	str	r0, [r7, #20]
			  tmp = lwjson_get_first_child(t);
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d00a      	beq.n	8000eca <main+0xca>
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	791b      	ldrb	r3, [r3, #4]
 8000eb8:	2b03      	cmp	r3, #3
 8000eba:	d003      	beq.n	8000ec4 <main+0xc4>
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	791b      	ldrb	r3, [r3, #4]
 8000ec0:	2b04      	cmp	r3, #4
 8000ec2:	d102      	bne.n	8000eca <main+0xca>
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	691b      	ldr	r3, [r3, #16]
 8000ec8:	e000      	b.n	8000ecc <main+0xcc>
 8000eca:	2300      	movs	r3, #0
 8000ecc:	623b      	str	r3, [r7, #32]

			  for(uint32_t i=0; i<NUMBER_OF_LEDS; i++)
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61fb      	str	r3, [r7, #28]
 8000ed2:	e079      	b.n	8000fc8 <main+0x1c8>
			  {
					t = lwjson_find_ex(&lwjson, tmp, "NUMBER");
 8000ed4:	4a6d      	ldr	r2, [pc, #436]	; (800108c <main+0x28c>)
 8000ed6:	6a39      	ldr	r1, [r7, #32]
 8000ed8:	4866      	ldr	r0, [pc, #408]	; (8001074 <main+0x274>)
 8000eda:	f001 fb1d 	bl	8002518 <lwjson_find_ex>
 8000ede:	6178      	str	r0, [r7, #20]

					if (t != NULL)
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d074      	beq.n	8000fd0 <main+0x1d0>
					{
						nbr = lwjson_get_val_int(t);
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d008      	beq.n	8000efe <main+0xfe>
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	791b      	ldrb	r3, [r3, #4]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d104      	bne.n	8000efe <main+0xfe>
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000efa:	4613      	mov	r3, r2
 8000efc:	e000      	b.n	8000f00 <main+0x100>
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]
					else
					{
						break;
					}

					t = lwjson_find_ex(&lwjson, tmp, "RED");
 8000f02:	4a63      	ldr	r2, [pc, #396]	; (8001090 <main+0x290>)
 8000f04:	6a39      	ldr	r1, [r7, #32]
 8000f06:	485b      	ldr	r0, [pc, #364]	; (8001074 <main+0x274>)
 8000f08:	f001 fb06 	bl	8002518 <lwjson_find_ex>
 8000f0c:	6178      	str	r0, [r7, #20]

					if (t != NULL)
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d015      	beq.n	8000f40 <main+0x140>
					{
						led[nbr].red = lwjson_get_val_int(t);
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d008      	beq.n	8000f2c <main+0x12c>
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	791b      	ldrb	r3, [r3, #4]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d104      	bne.n	8000f2c <main+0x12c>
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000f28:	b2d1      	uxtb	r1, r2
 8000f2a:	e000      	b.n	8000f2e <main+0x12e>
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	4613      	mov	r3, r2
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	4413      	add	r3, r2
 8000f36:	3330      	adds	r3, #48	; 0x30
 8000f38:	443b      	add	r3, r7
 8000f3a:	3b2c      	subs	r3, #44	; 0x2c
 8000f3c:	460a      	mov	r2, r1
 8000f3e:	701a      	strb	r2, [r3, #0]
					}

					t = lwjson_find_ex(&lwjson, tmp, "GREEN");
 8000f40:	4a54      	ldr	r2, [pc, #336]	; (8001094 <main+0x294>)
 8000f42:	6a39      	ldr	r1, [r7, #32]
 8000f44:	484b      	ldr	r0, [pc, #300]	; (8001074 <main+0x274>)
 8000f46:	f001 fae7 	bl	8002518 <lwjson_find_ex>
 8000f4a:	6178      	str	r0, [r7, #20]

					if (t != NULL)
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d015      	beq.n	8000f7e <main+0x17e>
					{
						led[nbr].green = lwjson_get_val_int(t);
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d008      	beq.n	8000f6a <main+0x16a>
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	791b      	ldrb	r3, [r3, #4]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d104      	bne.n	8000f6a <main+0x16a>
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000f66:	b2d1      	uxtb	r1, r2
 8000f68:	e000      	b.n	8000f6c <main+0x16c>
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	4613      	mov	r3, r2
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	4413      	add	r3, r2
 8000f74:	3330      	adds	r3, #48	; 0x30
 8000f76:	443b      	add	r3, r7
 8000f78:	3b2b      	subs	r3, #43	; 0x2b
 8000f7a:	460a      	mov	r2, r1
 8000f7c:	701a      	strb	r2, [r3, #0]
					}

					t = lwjson_find_ex(&lwjson, tmp, "BLUE");
 8000f7e:	4a46      	ldr	r2, [pc, #280]	; (8001098 <main+0x298>)
 8000f80:	6a39      	ldr	r1, [r7, #32]
 8000f82:	483c      	ldr	r0, [pc, #240]	; (8001074 <main+0x274>)
 8000f84:	f001 fac8 	bl	8002518 <lwjson_find_ex>
 8000f88:	6178      	str	r0, [r7, #20]

					if (t != NULL)
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d015      	beq.n	8000fbc <main+0x1bc>
					{
						led[nbr].blue = lwjson_get_val_int(t);
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d008      	beq.n	8000fa8 <main+0x1a8>
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	791b      	ldrb	r3, [r3, #4]
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d104      	bne.n	8000fa8 <main+0x1a8>
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000fa4:	b2d1      	uxtb	r1, r2
 8000fa6:	e000      	b.n	8000faa <main+0x1aa>
 8000fa8:	2100      	movs	r1, #0
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4613      	mov	r3, r2
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	4413      	add	r3, r2
 8000fb2:	3330      	adds	r3, #48	; 0x30
 8000fb4:	443b      	add	r3, r7
 8000fb6:	3b2a      	subs	r3, #42	; 0x2a
 8000fb8:	460a      	mov	r2, r1
 8000fba:	701a      	strb	r2, [r3, #0]
					}

					tmp = tmp->next;
 8000fbc:	6a3b      	ldr	r3, [r7, #32]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	623b      	str	r3, [r7, #32]
			  for(uint32_t i=0; i<NUMBER_OF_LEDS; i++)
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	61fb      	str	r3, [r7, #28]
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	2b03      	cmp	r3, #3
 8000fcc:	d982      	bls.n	8000ed4 <main+0xd4>
 8000fce:	e000      	b.n	8000fd2 <main+0x1d2>
						break;
 8000fd0:	bf00      	nop
			  }

			  lwjson_free(&lwjson);
 8000fd2:	4828      	ldr	r0, [pc, #160]	; (8001074 <main+0x274>)
 8000fd4:	f001 fa5f 	bl	8002496 <lwjson_free>
		  }
	  }

	  if ((HAL_GetTick() - stimer) > blink_time)
 8000fd8:	f001 fb46 	bl	8002668 <HAL_GetTick>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	f4bf af37 	bcs.w	8000e58 <main+0x58>
	  {
			stimer = HAL_GetTick();
 8000fea:	f001 fb3d 	bl	8002668 <HAL_GetTick>
 8000fee:	6278      	str	r0, [r7, #36]	; 0x24

			if (led_state == LED_OFF)
 8000ff0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d12a      	bne.n	800104e <main+0x24e>
			{
				led_state = LED_ON;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

				for (int i=0; i<NUMBER_OF_LEDS; i++)
 8000ffe:	2300      	movs	r3, #0
 8001000:	61bb      	str	r3, [r7, #24]
 8001002:	e01e      	b.n	8001042 <main+0x242>
					led_set_one_led_colors(i, led[i].green, led[i].red, led[i].blue);
 8001004:	69b8      	ldr	r0, [r7, #24]
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4613      	mov	r3, r2
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	4413      	add	r3, r2
 800100e:	3330      	adds	r3, #48	; 0x30
 8001010:	443b      	add	r3, r7
 8001012:	3b2b      	subs	r3, #43	; 0x2b
 8001014:	7819      	ldrb	r1, [r3, #0]
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4613      	mov	r3, r2
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	4413      	add	r3, r2
 800101e:	3330      	adds	r3, #48	; 0x30
 8001020:	443b      	add	r3, r7
 8001022:	3b2c      	subs	r3, #44	; 0x2c
 8001024:	781c      	ldrb	r4, [r3, #0]
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4613      	mov	r3, r2
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	4413      	add	r3, r2
 800102e:	3330      	adds	r3, #48	; 0x30
 8001030:	443b      	add	r3, r7
 8001032:	3b2a      	subs	r3, #42	; 0x2a
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	4622      	mov	r2, r4
 8001038:	f7ff fe58 	bl	8000cec <led_set_one_led_colors>
				for (int i=0; i<NUMBER_OF_LEDS; i++)
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	3301      	adds	r3, #1
 8001040:	61bb      	str	r3, [r7, #24]
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	2b03      	cmp	r3, #3
 8001046:	dddd      	ble.n	8001004 <main+0x204>

				led_send_led_colors();
 8001048:	f7ff fecc 	bl	8000de4 <led_send_led_colors>
 800104c:	e704      	b.n	8000e58 <main+0x58>
			}
			else if (led_state == LED_ON)
 800104e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001052:	2b01      	cmp	r3, #1
 8001054:	f47f af00 	bne.w	8000e58 <main+0x58>
			{
				led_state = LED_OFF;
 8001058:	2300      	movs	r3, #0
 800105a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

				led_set_all_led_colors(0, 0, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	2100      	movs	r1, #0
 8001062:	2000      	movs	r0, #0
 8001064:	f7ff fe24 	bl	8000cb0 <led_set_all_led_colors>
				led_send_led_colors();
 8001068:	f7ff febc 	bl	8000de4 <led_send_led_colors>
	  if (data_received == true)
 800106c:	e6f4      	b.n	8000e58 <main+0x58>
 800106e:	bf00      	nop
 8001070:	200001c8 	.word	0x200001c8
 8001074:	20000198 	.word	0x20000198
 8001078:	20000090 	.word	0x20000090
 800107c:	20000e5c 	.word	0x20000e5c
 8001080:	20000190 	.word	0x20000190
 8001084:	08006f80 	.word	0x08006f80
 8001088:	08006f8c 	.word	0x08006f8c
 800108c:	08006f98 	.word	0x08006f98
 8001090:	08006fa0 	.word	0x08006fa0
 8001094:	08006fa4 	.word	0x08006fa4
 8001098:	08006fac 	.word	0x08006fac

0800109c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b096      	sub	sp, #88	; 0x58
 80010a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	2244      	movs	r2, #68	; 0x44
 80010a8:	2100      	movs	r1, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f005 ff40 	bl	8006f30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b0:	463b      	mov	r3, r7
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	60da      	str	r2, [r3, #12]
 80010bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010c2:	f002 f859 	bl	8003178 <HAL_PWREx_ControlVoltageScaling>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010cc:	f000 f870 	bl	80011b0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010d0:	2302      	movs	r3, #2
 80010d2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010da:	2310      	movs	r3, #16
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010de:	2302      	movs	r3, #2
 80010e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010e2:	2302      	movs	r3, #2
 80010e4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010e6:	2301      	movs	r3, #1
 80010e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80010ea:	230a      	movs	r3, #10
 80010ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010ee:	2307      	movs	r3, #7
 80010f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010f2:	2302      	movs	r3, #2
 80010f4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010f6:	2302      	movs	r3, #2
 80010f8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010fa:	f107 0314 	add.w	r3, r7, #20
 80010fe:	4618      	mov	r0, r3
 8001100:	f002 f890 	bl	8003224 <HAL_RCC_OscConfig>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800110a:	f000 f851 	bl	80011b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800110e:	230f      	movs	r3, #15
 8001110:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001112:	2303      	movs	r3, #3
 8001114:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001116:	2300      	movs	r3, #0
 8001118:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001122:	463b      	mov	r3, r7
 8001124:	2104      	movs	r1, #4
 8001126:	4618      	mov	r0, r3
 8001128:	f002 fc58 	bl	80039dc <HAL_RCC_ClockConfig>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001132:	f000 f83d 	bl	80011b0 <Error_Handler>
  }
}
 8001136:	bf00      	nop
 8001138:	3758      	adds	r7, #88	; 0x58
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
	...

08001140 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	460b      	mov	r3, r1
 800114a:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a09      	ldr	r2, [pc, #36]	; (8001178 <HAL_UARTEx_RxEventCallback+0x38>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d10c      	bne.n	8001170 <HAL_UARTEx_RxEventCallback+0x30>
	{
		rx_buffer[Size] = '\0';
 8001156:	887b      	ldrh	r3, [r7, #2]
 8001158:	4a08      	ldr	r2, [pc, #32]	; (800117c <HAL_UARTEx_RxEventCallback+0x3c>)
 800115a:	2100      	movs	r1, #0
 800115c:	54d1      	strb	r1, [r2, r3]
		data_received = true;
 800115e:	4b08      	ldr	r3, [pc, #32]	; (8001180 <HAL_UARTEx_RxEventCallback+0x40>)
 8001160:	2201      	movs	r2, #1
 8001162:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rx_buffer, 256);
 8001164:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001168:	4904      	ldr	r1, [pc, #16]	; (800117c <HAL_UARTEx_RxEventCallback+0x3c>)
 800116a:	4806      	ldr	r0, [pc, #24]	; (8001184 <HAL_UARTEx_RxEventCallback+0x44>)
 800116c:	f005 fe61 	bl	8006e32 <HAL_UARTEx_ReceiveToIdle_DMA>
	}
}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40004400 	.word	0x40004400
 800117c:	20000090 	.word	0x20000090
 8001180:	20000190 	.word	0x20000190
 8001184:	20000e5c 	.word	0x20000e5c

08001188 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
	if(TIM2 == htim->Instance)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001198:	d103      	bne.n	80011a2 <HAL_TIM_PWM_PulseFinishedCallback+0x1a>
	{
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800119a:	2100      	movs	r1, #0
 800119c:	4803      	ldr	r0, [pc, #12]	; (80011ac <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 800119e:	f003 fb55 	bl	800484c <HAL_TIM_PWM_Stop>
	}
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000dc8 	.word	0x20000dc8

080011b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b4:	b672      	cpsid	i
}
 80011b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b8:	e7fe      	b.n	80011b8 <Error_Handler+0x8>
	...

080011bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c2:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <HAL_MspInit+0x44>)
 80011c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011c6:	4a0e      	ldr	r2, [pc, #56]	; (8001200 <HAL_MspInit+0x44>)
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	6613      	str	r3, [r2, #96]	; 0x60
 80011ce:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <HAL_MspInit+0x44>)
 80011d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <HAL_MspInit+0x44>)
 80011dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011de:	4a08      	ldr	r2, [pc, #32]	; (8001200 <HAL_MspInit+0x44>)
 80011e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e4:	6593      	str	r3, [r2, #88]	; 0x58
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <HAL_MspInit+0x44>)
 80011e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ee:	603b      	str	r3, [r7, #0]
 80011f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	40021000 	.word	0x40021000

08001204 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001208:	e7fe      	b.n	8001208 <NMI_Handler+0x4>

0800120a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800120e:	e7fe      	b.n	800120e <HardFault_Handler+0x4>

08001210 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001214:	e7fe      	b.n	8001214 <MemManage_Handler+0x4>

08001216 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800121a:	e7fe      	b.n	800121a <BusFault_Handler+0x4>

0800121c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <UsageFault_Handler+0x4>

08001222 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001250:	f001 f9f6 	bl	8002640 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}

08001258 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 800125c:	4802      	ldr	r0, [pc, #8]	; (8001268 <DMA1_Channel5_IRQHandler+0x10>)
 800125e:	f001 fcb8 	bl	8002bd2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000e14 	.word	0x20000e14

0800126c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001270:	4802      	ldr	r0, [pc, #8]	; (800127c <DMA1_Channel6_IRQHandler+0x10>)
 8001272:	f001 fcae 	bl	8002bd2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000ee0 	.word	0x20000ee0

08001280 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001284:	4802      	ldr	r0, [pc, #8]	; (8001290 <USART2_IRQHandler+0x10>)
 8001286:	f004 fbfd 	bl	8005a84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000e5c 	.word	0x20000e5c

08001294 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001298:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800129c:	f001 ff3a 	bl	8003114 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80012a8:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <SystemInit+0x20>)
 80012aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ae:	4a05      	ldr	r2, [pc, #20]	; (80012c4 <SystemInit+0x20>)
 80012b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim2_ch1;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08a      	sub	sp, #40	; 0x28
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ce:	f107 031c 	add.w	r3, r7, #28
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012da:	463b      	mov	r3, r7
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
 80012e8:	615a      	str	r2, [r3, #20]
 80012ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012ec:	4b21      	ldr	r3, [pc, #132]	; (8001374 <MX_TIM2_Init+0xac>)
 80012ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012f4:	4b1f      	ldr	r3, [pc, #124]	; (8001374 <MX_TIM2_Init+0xac>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012fa:	4b1e      	ldr	r3, [pc, #120]	; (8001374 <MX_TIM2_Init+0xac>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001300:	4b1c      	ldr	r3, [pc, #112]	; (8001374 <MX_TIM2_Init+0xac>)
 8001302:	2263      	movs	r2, #99	; 0x63
 8001304:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001306:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <MX_TIM2_Init+0xac>)
 8001308:	2200      	movs	r2, #0
 800130a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800130c:	4b19      	ldr	r3, [pc, #100]	; (8001374 <MX_TIM2_Init+0xac>)
 800130e:	2200      	movs	r2, #0
 8001310:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001312:	4818      	ldr	r0, [pc, #96]	; (8001374 <MX_TIM2_Init+0xac>)
 8001314:	f003 fa42 	bl	800479c <HAL_TIM_PWM_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800131e:	f7ff ff47 	bl	80011b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001322:	2300      	movs	r3, #0
 8001324:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001326:	2300      	movs	r3, #0
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800132a:	f107 031c 	add.w	r3, r7, #28
 800132e:	4619      	mov	r1, r3
 8001330:	4810      	ldr	r0, [pc, #64]	; (8001374 <MX_TIM2_Init+0xac>)
 8001332:	f004 fad1 	bl	80058d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800133c:	f7ff ff38 	bl	80011b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001340:	2360      	movs	r3, #96	; 0x60
 8001342:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001348:	2300      	movs	r3, #0
 800134a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800134c:	2300      	movs	r3, #0
 800134e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001350:	463b      	mov	r3, r7
 8001352:	2200      	movs	r2, #0
 8001354:	4619      	mov	r1, r3
 8001356:	4807      	ldr	r0, [pc, #28]	; (8001374 <MX_TIM2_Init+0xac>)
 8001358:	f003 fd2e 	bl	8004db8 <HAL_TIM_PWM_ConfigChannel>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001362:	f7ff ff25 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001366:	4803      	ldr	r0, [pc, #12]	; (8001374 <MX_TIM2_Init+0xac>)
 8001368:	f000 f850 	bl	800140c <HAL_TIM_MspPostInit>

}
 800136c:	bf00      	nop
 800136e:	3728      	adds	r7, #40	; 0x28
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000dc8 	.word	0x20000dc8

08001378 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001388:	d135      	bne.n	80013f6 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800138a:	4b1d      	ldr	r3, [pc, #116]	; (8001400 <HAL_TIM_PWM_MspInit+0x88>)
 800138c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800138e:	4a1c      	ldr	r2, [pc, #112]	; (8001400 <HAL_TIM_PWM_MspInit+0x88>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	6593      	str	r3, [r2, #88]	; 0x58
 8001396:	4b1a      	ldr	r3, [pc, #104]	; (8001400 <HAL_TIM_PWM_MspInit+0x88>)
 8001398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 80013a2:	4b18      	ldr	r3, [pc, #96]	; (8001404 <HAL_TIM_PWM_MspInit+0x8c>)
 80013a4:	4a18      	ldr	r2, [pc, #96]	; (8001408 <HAL_TIM_PWM_MspInit+0x90>)
 80013a6:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_4;
 80013a8:	4b16      	ldr	r3, [pc, #88]	; (8001404 <HAL_TIM_PWM_MspInit+0x8c>)
 80013aa:	2204      	movs	r2, #4
 80013ac:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013ae:	4b15      	ldr	r3, [pc, #84]	; (8001404 <HAL_TIM_PWM_MspInit+0x8c>)
 80013b0:	2210      	movs	r2, #16
 80013b2:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013b4:	4b13      	ldr	r3, [pc, #76]	; (8001404 <HAL_TIM_PWM_MspInit+0x8c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80013ba:	4b12      	ldr	r3, [pc, #72]	; (8001404 <HAL_TIM_PWM_MspInit+0x8c>)
 80013bc:	2280      	movs	r2, #128	; 0x80
 80013be:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80013c0:	4b10      	ldr	r3, [pc, #64]	; (8001404 <HAL_TIM_PWM_MspInit+0x8c>)
 80013c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013c6:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013c8:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <HAL_TIM_PWM_MspInit+0x8c>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 80013ce:	4b0d      	ldr	r3, [pc, #52]	; (8001404 <HAL_TIM_PWM_MspInit+0x8c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80013d4:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <HAL_TIM_PWM_MspInit+0x8c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80013da:	480a      	ldr	r0, [pc, #40]	; (8001404 <HAL_TIM_PWM_MspInit+0x8c>)
 80013dc:	f001 fa62 	bl	80028a4 <HAL_DMA_Init>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <HAL_TIM_PWM_MspInit+0x72>
    {
      Error_Handler();
 80013e6:	f7ff fee3 	bl	80011b0 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a05      	ldr	r2, [pc, #20]	; (8001404 <HAL_TIM_PWM_MspInit+0x8c>)
 80013ee:	625a      	str	r2, [r3, #36]	; 0x24
 80013f0:	4a04      	ldr	r2, [pc, #16]	; (8001404 <HAL_TIM_PWM_MspInit+0x8c>)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80013f6:	bf00      	nop
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40021000 	.word	0x40021000
 8001404:	20000e14 	.word	0x20000e14
 8001408:	40020058 	.word	0x40020058

0800140c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b088      	sub	sp, #32
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f107 030c 	add.w	r3, r7, #12
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800142c:	d11c      	bne.n	8001468 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142e:	4b10      	ldr	r3, [pc, #64]	; (8001470 <HAL_TIM_MspPostInit+0x64>)
 8001430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001432:	4a0f      	ldr	r2, [pc, #60]	; (8001470 <HAL_TIM_MspPostInit+0x64>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	64d3      	str	r3, [r2, #76]	; 0x4c
 800143a:	4b0d      	ldr	r3, [pc, #52]	; (8001470 <HAL_TIM_MspPostInit+0x64>)
 800143c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001446:	2301      	movs	r3, #1
 8001448:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144a:	2302      	movs	r3, #2
 800144c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001452:	2300      	movs	r3, #0
 8001454:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001456:	2301      	movs	r3, #1
 8001458:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145a:	f107 030c 	add.w	r3, r7, #12
 800145e:	4619      	mov	r1, r3
 8001460:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001464:	f001 fc94 	bl	8002d90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001468:	bf00      	nop
 800146a:	3720      	adds	r7, #32
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40021000 	.word	0x40021000

08001474 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001478:	4b14      	ldr	r3, [pc, #80]	; (80014cc <MX_USART2_UART_Init+0x58>)
 800147a:	4a15      	ldr	r2, [pc, #84]	; (80014d0 <MX_USART2_UART_Init+0x5c>)
 800147c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800147e:	4b13      	ldr	r3, [pc, #76]	; (80014cc <MX_USART2_UART_Init+0x58>)
 8001480:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001484:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001486:	4b11      	ldr	r3, [pc, #68]	; (80014cc <MX_USART2_UART_Init+0x58>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800148c:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <MX_USART2_UART_Init+0x58>)
 800148e:	2200      	movs	r2, #0
 8001490:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001492:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <MX_USART2_UART_Init+0x58>)
 8001494:	2200      	movs	r2, #0
 8001496:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001498:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <MX_USART2_UART_Init+0x58>)
 800149a:	220c      	movs	r2, #12
 800149c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800149e:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <MX_USART2_UART_Init+0x58>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a4:	4b09      	ldr	r3, [pc, #36]	; (80014cc <MX_USART2_UART_Init+0x58>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014aa:	4b08      	ldr	r3, [pc, #32]	; (80014cc <MX_USART2_UART_Init+0x58>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <MX_USART2_UART_Init+0x58>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014b6:	4805      	ldr	r0, [pc, #20]	; (80014cc <MX_USART2_UART_Init+0x58>)
 80014b8:	f004 fa96 	bl	80059e8 <HAL_UART_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80014c2:	f7ff fe75 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000e5c 	.word	0x20000e5c
 80014d0:	40004400 	.word	0x40004400

080014d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b0ac      	sub	sp, #176	; 0xb0
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	2288      	movs	r2, #136	; 0x88
 80014f2:	2100      	movs	r1, #0
 80014f4:	4618      	mov	r0, r3
 80014f6:	f005 fd1b 	bl	8006f30 <memset>
  if(uartHandle->Instance==USART2)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a3a      	ldr	r2, [pc, #232]	; (80015e8 <HAL_UART_MspInit+0x114>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d16c      	bne.n	80015de <HAL_UART_MspInit+0x10a>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001504:	2302      	movs	r3, #2
 8001506:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001508:	2300      	movs	r3, #0
 800150a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	4618      	mov	r0, r3
 8001512:	f002 fc87 	bl	8003e24 <HAL_RCCEx_PeriphCLKConfig>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800151c:	f7ff fe48 	bl	80011b0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001520:	4b32      	ldr	r3, [pc, #200]	; (80015ec <HAL_UART_MspInit+0x118>)
 8001522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001524:	4a31      	ldr	r2, [pc, #196]	; (80015ec <HAL_UART_MspInit+0x118>)
 8001526:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800152a:	6593      	str	r3, [r2, #88]	; 0x58
 800152c:	4b2f      	ldr	r3, [pc, #188]	; (80015ec <HAL_UART_MspInit+0x118>)
 800152e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001534:	613b      	str	r3, [r7, #16]
 8001536:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001538:	4b2c      	ldr	r3, [pc, #176]	; (80015ec <HAL_UART_MspInit+0x118>)
 800153a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153c:	4a2b      	ldr	r2, [pc, #172]	; (80015ec <HAL_UART_MspInit+0x118>)
 800153e:	f043 0301 	orr.w	r3, r3, #1
 8001542:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001544:	4b29      	ldr	r3, [pc, #164]	; (80015ec <HAL_UART_MspInit+0x118>)
 8001546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001550:	230c      	movs	r3, #12
 8001552:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001556:	2302      	movs	r3, #2
 8001558:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001562:	2303      	movs	r3, #3
 8001564:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001568:	2307      	movs	r3, #7
 800156a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001572:	4619      	mov	r1, r3
 8001574:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001578:	f001 fc0a 	bl	8002d90 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800157c:	4b1c      	ldr	r3, [pc, #112]	; (80015f0 <HAL_UART_MspInit+0x11c>)
 800157e:	4a1d      	ldr	r2, [pc, #116]	; (80015f4 <HAL_UART_MspInit+0x120>)
 8001580:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8001582:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <HAL_UART_MspInit+0x11c>)
 8001584:	2202      	movs	r2, #2
 8001586:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001588:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <HAL_UART_MspInit+0x11c>)
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800158e:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <HAL_UART_MspInit+0x11c>)
 8001590:	2200      	movs	r2, #0
 8001592:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001594:	4b16      	ldr	r3, [pc, #88]	; (80015f0 <HAL_UART_MspInit+0x11c>)
 8001596:	2280      	movs	r2, #128	; 0x80
 8001598:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800159a:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <HAL_UART_MspInit+0x11c>)
 800159c:	2200      	movs	r2, #0
 800159e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015a0:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <HAL_UART_MspInit+0x11c>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80015a6:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <HAL_UART_MspInit+0x11c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015ac:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <HAL_UART_MspInit+0x11c>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80015b2:	480f      	ldr	r0, [pc, #60]	; (80015f0 <HAL_UART_MspInit+0x11c>)
 80015b4:	f001 f976 	bl	80028a4 <HAL_DMA_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 80015be:	f7ff fdf7 	bl	80011b0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a0a      	ldr	r2, [pc, #40]	; (80015f0 <HAL_UART_MspInit+0x11c>)
 80015c6:	671a      	str	r2, [r3, #112]	; 0x70
 80015c8:	4a09      	ldr	r2, [pc, #36]	; (80015f0 <HAL_UART_MspInit+0x11c>)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015ce:	2200      	movs	r2, #0
 80015d0:	2100      	movs	r1, #0
 80015d2:	2026      	movs	r0, #38	; 0x26
 80015d4:	f001 f92f 	bl	8002836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015d8:	2026      	movs	r0, #38	; 0x26
 80015da:	f001 f948 	bl	800286e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80015de:	bf00      	nop
 80015e0:	37b0      	adds	r7, #176	; 0xb0
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40004400 	.word	0x40004400
 80015ec:	40021000 	.word	0x40021000
 80015f0:	20000ee0 	.word	0x20000ee0
 80015f4:	4002006c 	.word	0x4002006c

080015f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80015f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001630 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015fc:	f7ff fe52 	bl	80012a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001600:	480c      	ldr	r0, [pc, #48]	; (8001634 <LoopForever+0x6>)
  ldr r1, =_edata
 8001602:	490d      	ldr	r1, [pc, #52]	; (8001638 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001604:	4a0d      	ldr	r2, [pc, #52]	; (800163c <LoopForever+0xe>)
  movs r3, #0
 8001606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001608:	e002      	b.n	8001610 <LoopCopyDataInit>

0800160a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800160a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800160c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800160e:	3304      	adds	r3, #4

08001610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001614:	d3f9      	bcc.n	800160a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001616:	4a0a      	ldr	r2, [pc, #40]	; (8001640 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001618:	4c0a      	ldr	r4, [pc, #40]	; (8001644 <LoopForever+0x16>)
  movs r3, #0
 800161a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800161c:	e001      	b.n	8001622 <LoopFillZerobss>

0800161e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800161e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001620:	3204      	adds	r2, #4

08001622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001624:	d3fb      	bcc.n	800161e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001626:	f005 fc5f 	bl	8006ee8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800162a:	f7ff fbe9 	bl	8000e00 <main>

0800162e <LoopForever>:

LoopForever:
    b LoopForever
 800162e:	e7fe      	b.n	800162e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001630:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001634:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001638:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800163c:	08007124 	.word	0x08007124
  ldr r2, =_sbss
 8001640:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001644:	20000f2c 	.word	0x20000f2c

08001648 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001648:	e7fe      	b.n	8001648 <ADC1_2_IRQHandler>

0800164a <prv_alloc_token>:
 * \brief           Allocate new token for JSON block
 * \param[in]       lwobj: LwJSON instance
 * \return          Pointer to new token
 */
static lwjson_token_t*
prv_alloc_token(lwjson_t* lwobj) {
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
    if (lwobj->next_free_token_pos < lwobj->tokens_len) {
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689a      	ldr	r2, [r3, #8]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	429a      	cmp	r2, r3
 800165c:	d21a      	bcs.n	8001694 <prv_alloc_token+0x4a>
        memset(&lwobj->tokens[lwobj->next_free_token_pos], 0x00, sizeof(*lwobj->tokens));
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6819      	ldr	r1, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	689a      	ldr	r2, [r3, #8]
 8001666:	4613      	mov	r3, r2
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	4413      	add	r3, r2
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	440b      	add	r3, r1
 8001670:	2218      	movs	r2, #24
 8001672:	2100      	movs	r1, #0
 8001674:	4618      	mov	r0, r3
 8001676:	f005 fc5b 	bl	8006f30 <memset>
        return &lwobj->tokens[lwobj->next_free_token_pos++];
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6819      	ldr	r1, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	689a      	ldr	r2, [r3, #8]
 8001682:	1c50      	adds	r0, r2, #1
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6098      	str	r0, [r3, #8]
 8001688:	4613      	mov	r3, r2
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	4413      	add	r3, r2
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	440b      	add	r3, r1
 8001692:	e000      	b.n	8001696 <prv_alloc_token+0x4c>
    }
    return NULL;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <prv_skip_blank>:
 * \brief           Skip all characters that are considered *blank* as per RFC4627
 * \param[in,out]   pobj: Pointer to text that is modified on success
 * \return          \ref lwjsonOK on success, member of \ref lwjsonr_t otherwise
 */
static lwjsonr_t
prv_skip_blank(lwjson_int_str_t* pobj) {
 800169e:	b480      	push	{r7}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
    while (pobj->p != NULL && *pobj->p != '\0' && (size_t)(pobj->p - pobj->start) < pobj->len) {
 80016a6:	e01d      	b.n	80016e4 <prv_skip_blank+0x46>
        if (*pobj->p == ' ' || *pobj->p == '\t' || *pobj->p == '\r' || *pobj->p == '\n' || *pobj->p == '\f') {
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b20      	cmp	r3, #32
 80016b0:	d013      	beq.n	80016da <prv_skip_blank+0x3c>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b09      	cmp	r3, #9
 80016ba:	d00e      	beq.n	80016da <prv_skip_blank+0x3c>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b0d      	cmp	r3, #13
 80016c4:	d009      	beq.n	80016da <prv_skip_blank+0x3c>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b0a      	cmp	r3, #10
 80016ce:	d004      	beq.n	80016da <prv_skip_blank+0x3c>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b0c      	cmp	r3, #12
 80016d8:	d117      	bne.n	800170a <prv_skip_blank+0x6c>
            ++pobj->p;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	1c5a      	adds	r2, r3, #1
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	609a      	str	r2, [r3, #8]
    while (pobj->p != NULL && *pobj->p != '\0' && (size_t)(pobj->p - pobj->start) < pobj->len) {
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d00e      	beq.n	800170a <prv_skip_blank+0x6c>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d009      	beq.n	800170a <prv_skip_blank+0x6c>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689a      	ldr	r2, [r3, #8]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	461a      	mov	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	429a      	cmp	r2, r3
 8001708:	d3ce      	bcc.n	80016a8 <prv_skip_blank+0xa>
#endif /* LWJSON_CFG_COMMENTS */
        } else {
            break;
        }
    }
    if (pobj->p != NULL && *pobj->p != '\0' && (size_t)(pobj->p - pobj->start) < pobj->len) {
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d010      	beq.n	8001734 <prv_skip_blank+0x96>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d00b      	beq.n	8001734 <prv_skip_blank+0x96>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	461a      	mov	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	429a      	cmp	r2, r3
 800172e:	d201      	bcs.n	8001734 <prv_skip_blank+0x96>
        return lwjsonOK;
 8001730:	2300      	movs	r3, #0
 8001732:	e000      	b.n	8001736 <prv_skip_blank+0x98>
    }
    return lwjsonERRJSON;
 8001734:	2302      	movs	r3, #2
}
 8001736:	4618      	mov	r0, r3
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
	...

08001744 <prv_parse_string>:
 * \param[out]      pout: Pointer to pointer to string that is set where string starts
 * \param[out]      poutlen: Length of string in units of characters is stored here
 * \return          \ref lwjsonOK on success, member of \ref lwjsonr_t otherwise
 */
static lwjsonr_t
prv_parse_string(lwjson_int_str_t* pobj, const char** pout, size_t* poutlen) {
 8001744:	b580      	push	{r7, lr}
 8001746:	b088      	sub	sp, #32
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
    lwjsonr_t res;
    size_t len = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	61fb      	str	r3, [r7, #28]

    if ((res = prv_skip_blank(pobj)) != lwjsonOK) {
 8001754:	68f8      	ldr	r0, [r7, #12]
 8001756:	f7ff ffa2 	bl	800169e <prv_skip_blank>
 800175a:	4603      	mov	r3, r0
 800175c:	75fb      	strb	r3, [r7, #23]
 800175e:	7dfb      	ldrb	r3, [r7, #23]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <prv_parse_string+0x24>
        return res;
 8001764:	7dfb      	ldrb	r3, [r7, #23]
 8001766:	e0cf      	b.n	8001908 <prv_parse_string+0x1c4>
    }
    if (*pobj->p++ != '"') {
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	1c59      	adds	r1, r3, #1
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	6091      	str	r1, [r2, #8]
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b22      	cmp	r3, #34	; 0x22
 8001776:	d001      	beq.n	800177c <prv_parse_string+0x38>
        return lwjsonERRJSON;
 8001778:	2302      	movs	r3, #2
 800177a:	e0c5      	b.n	8001908 <prv_parse_string+0x1c4>
    }
    *pout = pobj->p;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	689a      	ldr	r2, [r3, #8]
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	601a      	str	r2, [r3, #0]
    /* Parse string but take care of escape characters */
    for (;; ++pobj->p, ++len) {
        if (pobj->p == NULL || *pobj->p == '\0' || (size_t)(pobj->p - pobj->start) >= pobj->len) {
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d00e      	beq.n	80017aa <prv_parse_string+0x66>
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d009      	beq.n	80017aa <prv_parse_string+0x66>
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	689a      	ldr	r2, [r3, #8]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	461a      	mov	r2, r3
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d301      	bcc.n	80017ae <prv_parse_string+0x6a>
            return lwjsonERRJSON;
 80017aa:	2302      	movs	r3, #2
 80017ac:	e0ac      	b.n	8001908 <prv_parse_string+0x1c4>
        }
        /* Check special characters */
        if (*pobj->p == '\\') {
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b5c      	cmp	r3, #92	; 0x5c
 80017b6:	f040 808d 	bne.w	80018d4 <prv_parse_string+0x190>
            ++pobj->p;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	1c5a      	adds	r2, r3, #1
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	609a      	str	r2, [r3, #8]
            ++len;
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	3301      	adds	r3, #1
 80017c8:	61fb      	str	r3, [r7, #28]
            switch (*pobj->p) {
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b75      	cmp	r3, #117	; 0x75
 80017d2:	dc7d      	bgt.n	80018d0 <prv_parse_string+0x18c>
 80017d4:	2b5c      	cmp	r3, #92	; 0x5c
 80017d6:	da06      	bge.n	80017e6 <prv_parse_string+0xa2>
 80017d8:	2b22      	cmp	r3, #34	; 0x22
 80017da:	f000 808b 	beq.w	80018f4 <prv_parse_string+0x1b0>
 80017de:	2b2f      	cmp	r3, #47	; 0x2f
 80017e0:	f000 8088 	beq.w	80018f4 <prv_parse_string+0x1b0>
 80017e4:	e074      	b.n	80018d0 <prv_parse_string+0x18c>
 80017e6:	3b5c      	subs	r3, #92	; 0x5c
 80017e8:	2b19      	cmp	r3, #25
 80017ea:	d871      	bhi.n	80018d0 <prv_parse_string+0x18c>
 80017ec:	a201      	add	r2, pc, #4	; (adr r2, 80017f4 <prv_parse_string+0xb0>)
 80017ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f2:	bf00      	nop
 80017f4:	080018f5 	.word	0x080018f5
 80017f8:	080018d1 	.word	0x080018d1
 80017fc:	080018d1 	.word	0x080018d1
 8001800:	080018d1 	.word	0x080018d1
 8001804:	080018d1 	.word	0x080018d1
 8001808:	080018d1 	.word	0x080018d1
 800180c:	080018f5 	.word	0x080018f5
 8001810:	080018d1 	.word	0x080018d1
 8001814:	080018d1 	.word	0x080018d1
 8001818:	080018d1 	.word	0x080018d1
 800181c:	080018f5 	.word	0x080018f5
 8001820:	080018d1 	.word	0x080018d1
 8001824:	080018d1 	.word	0x080018d1
 8001828:	080018d1 	.word	0x080018d1
 800182c:	080018d1 	.word	0x080018d1
 8001830:	080018d1 	.word	0x080018d1
 8001834:	080018d1 	.word	0x080018d1
 8001838:	080018d1 	.word	0x080018d1
 800183c:	080018f5 	.word	0x080018f5
 8001840:	080018d1 	.word	0x080018d1
 8001844:	080018d1 	.word	0x080018d1
 8001848:	080018d1 	.word	0x080018d1
 800184c:	080018f5 	.word	0x080018f5
 8001850:	080018d1 	.word	0x080018d1
 8001854:	080018f5 	.word	0x080018f5
 8001858:	0800185d 	.word	0x0800185d
                case 'n':
                case 'r':
                case 't':
                    break;
                case 'u':
                    ++pobj->p;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	1c5a      	adds	r2, r3, #1
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	609a      	str	r2, [r3, #8]
                    for (size_t i = 0; i < 4; ++i, ++len) {
 8001866:	2300      	movs	r3, #0
 8001868:	61bb      	str	r3, [r7, #24]
 800186a:	e02d      	b.n	80018c8 <prv_parse_string+0x184>
                        if (!((*pobj->p >= '0' && *pobj->p <= '9') || (*pobj->p >= 'a' && *pobj->p <= 'f')
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	2b2f      	cmp	r3, #47	; 0x2f
 8001874:	d904      	bls.n	8001880 <prv_parse_string+0x13c>
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b39      	cmp	r3, #57	; 0x39
 800187e:	d915      	bls.n	80018ac <prv_parse_string+0x168>
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b60      	cmp	r3, #96	; 0x60
 8001888:	d904      	bls.n	8001894 <prv_parse_string+0x150>
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b66      	cmp	r3, #102	; 0x66
 8001892:	d90b      	bls.n	80018ac <prv_parse_string+0x168>
                              || (*pobj->p >= 'A' && *pobj->p <= 'F'))) {
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	781b      	ldrb	r3, [r3, #0]
                        if (!((*pobj->p >= '0' && *pobj->p <= '9') || (*pobj->p >= 'a' && *pobj->p <= 'f')
 800189a:	2b40      	cmp	r3, #64	; 0x40
 800189c:	d904      	bls.n	80018a8 <prv_parse_string+0x164>
                              || (*pobj->p >= 'A' && *pobj->p <= 'F'))) {
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b46      	cmp	r3, #70	; 0x46
 80018a6:	d901      	bls.n	80018ac <prv_parse_string+0x168>
                            return lwjsonERRJSON;
 80018a8:	2302      	movs	r3, #2
 80018aa:	e02d      	b.n	8001908 <prv_parse_string+0x1c4>
                        }
                        if (i < 3) {
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d804      	bhi.n	80018bc <prv_parse_string+0x178>
                            ++pobj->p;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	1c5a      	adds	r2, r3, #1
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	609a      	str	r2, [r3, #8]
                    for (size_t i = 0; i < 4; ++i, ++len) {
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	3301      	adds	r3, #1
 80018c0:	61bb      	str	r3, [r7, #24]
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	3301      	adds	r3, #1
 80018c6:	61fb      	str	r3, [r7, #28]
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	2b03      	cmp	r3, #3
 80018cc:	d9ce      	bls.n	800186c <prv_parse_string+0x128>
                        }
                    }
                    break;
 80018ce:	e012      	b.n	80018f6 <prv_parse_string+0x1b2>
                default:
                    return lwjsonERRJSON;
 80018d0:	2302      	movs	r3, #2
 80018d2:	e019      	b.n	8001908 <prv_parse_string+0x1c4>
            }
        } else if (*pobj->p == '"') {
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b22      	cmp	r3, #34	; 0x22
 80018dc:	d10b      	bne.n	80018f6 <prv_parse_string+0x1b2>
            ++pobj->p;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	1c5a      	adds	r2, r3, #1
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	609a      	str	r2, [r3, #8]
            break;
 80018e8:	bf00      	nop
        }
    }
    *poutlen = len;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	69fa      	ldr	r2, [r7, #28]
 80018ee:	601a      	str	r2, [r3, #0]
    return res;
 80018f0:	7dfb      	ldrb	r3, [r7, #23]
 80018f2:	e009      	b.n	8001908 <prv_parse_string+0x1c4>
                    break;
 80018f4:	bf00      	nop
    for (;; ++pobj->p, ++len) {
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	1c5a      	adds	r2, r3, #1
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	3301      	adds	r3, #1
 8001904:	61fb      	str	r3, [r7, #28]
        if (pobj->p == NULL || *pobj->p == '\0' || (size_t)(pobj->p - pobj->start) >= pobj->len) {
 8001906:	e73d      	b.n	8001784 <prv_parse_string+0x40>
}
 8001908:	4618      	mov	r0, r3
 800190a:	3720      	adds	r7, #32
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <prv_parse_property_name>:
 * \param[in,out]   pobj: Pointer to text that is modified on success
 * \param[out]      t: Token instance to write property name to
 * \return          \ref lwjsonOK on success, member of \ref lwjsonr_t otherwise
 */
static lwjsonr_t
prv_parse_property_name(lwjson_int_str_t* pobj, lwjson_token_t* t) {
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
    lwjsonr_t res;

    /* Parse property string first */
    if ((res = prv_parse_string(pobj, &t->token_name, &t->token_name_len)) != lwjsonOK) {
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	f103 0108 	add.w	r1, r3, #8
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	330c      	adds	r3, #12
 8001924:	461a      	mov	r2, r3
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f7ff ff0c 	bl	8001744 <prv_parse_string>
 800192c:	4603      	mov	r3, r0
 800192e:	73fb      	strb	r3, [r7, #15]
 8001930:	7bfb      	ldrb	r3, [r7, #15]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <prv_parse_property_name+0x2a>
        return res;
 8001936:	7bfb      	ldrb	r3, [r7, #15]
 8001938:	e01e      	b.n	8001978 <prv_parse_property_name+0x68>
    }
    /* Skip any spaces */
    if ((res = prv_skip_blank(pobj)) != lwjsonOK) {
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7ff feaf 	bl	800169e <prv_skip_blank>
 8001940:	4603      	mov	r3, r0
 8001942:	73fb      	strb	r3, [r7, #15]
 8001944:	7bfb      	ldrb	r3, [r7, #15]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <prv_parse_property_name+0x3e>
        return res;
 800194a:	7bfb      	ldrb	r3, [r7, #15]
 800194c:	e014      	b.n	8001978 <prv_parse_property_name+0x68>
    }
    /* Must continue with colon */
    if (*pobj->p++ != ':') {
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	1c59      	adds	r1, r3, #1
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	6091      	str	r1, [r2, #8]
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b3a      	cmp	r3, #58	; 0x3a
 800195c:	d001      	beq.n	8001962 <prv_parse_property_name+0x52>
        return lwjsonERRJSON;
 800195e:	2302      	movs	r3, #2
 8001960:	e00a      	b.n	8001978 <prv_parse_property_name+0x68>
    }
    /* Skip any spaces */
    if ((res = prv_skip_blank(pobj)) != lwjsonOK) {
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff fe9b 	bl	800169e <prv_skip_blank>
 8001968:	4603      	mov	r3, r0
 800196a:	73fb      	strb	r3, [r7, #15]
 800196c:	7bfb      	ldrb	r3, [r7, #15]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <prv_parse_property_name+0x66>
        return res;
 8001972:	7bfb      	ldrb	r3, [r7, #15]
 8001974:	e000      	b.n	8001978 <prv_parse_property_name+0x68>
    }
    return lwjsonOK;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <prv_parse_number>:
 * \param[out]      fout: Pointer to output real-type variable. Used if type is REAL.
 * \param[out]      iout: Pointer to output int-type variable. Used if type is INT.
 * \return          \ref lwjsonOK on success, member of \ref lwjsonr_t otherwise
 */
static lwjsonr_t
prv_parse_number(lwjson_int_str_t* pobj, lwjson_type_t* tout, lwjson_real_t* fout, lwjson_int_t* iout) {
 8001980:	b580      	push	{r7, lr}
 8001982:	b08a      	sub	sp, #40	; 0x28
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
 800198c:	603b      	str	r3, [r7, #0]
    lwjsonr_t res;
    uint8_t is_minus;
    lwjson_real_t num;
    lwjson_type_t type = LWJSON_TYPE_NUM_INT;
 800198e:	2301      	movs	r3, #1
 8001990:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    if ((res = prv_skip_blank(pobj)) != lwjsonOK) {
 8001994:	68f8      	ldr	r0, [r7, #12]
 8001996:	f7ff fe82 	bl	800169e <prv_skip_blank>
 800199a:	4603      	mov	r3, r0
 800199c:	74fb      	strb	r3, [r7, #19]
 800199e:	7cfb      	ldrb	r3, [r7, #19]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <prv_parse_number+0x28>
        return res;
 80019a4:	7cfb      	ldrb	r3, [r7, #19]
 80019a6:	e158      	b.n	8001c5a <prv_parse_number+0x2da>
    }
    if (*pobj->p == '\0' || (size_t)(pobj->p - pobj->start) >= pobj->len) {
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d009      	beq.n	80019c6 <prv_parse_number+0x46>
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	689a      	ldr	r2, [r3, #8]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	461a      	mov	r2, r3
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d301      	bcc.n	80019ca <prv_parse_number+0x4a>
        return lwjsonERRJSON;
 80019c6:	2302      	movs	r3, #2
 80019c8:	e147      	b.n	8001c5a <prv_parse_number+0x2da>
    }
    is_minus = *pobj->p == '-' ? (++pobj->p, 1) : 0;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b2d      	cmp	r3, #45	; 0x2d
 80019d2:	d106      	bne.n	80019e2 <prv_parse_number+0x62>
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	1c5a      	adds	r2, r3, #1
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	609a      	str	r2, [r3, #8]
 80019de:	2301      	movs	r3, #1
 80019e0:	e000      	b.n	80019e4 <prv_parse_number+0x64>
 80019e2:	2300      	movs	r3, #0
 80019e4:	74bb      	strb	r3, [r7, #18]
    if (*pobj->p == '\0'                    /* Invalid string */
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d01a      	beq.n	8001a26 <prv_parse_number+0xa6>
        || *pobj->p < '0' || *pobj->p > '9' /* Character outside number range */
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b2f      	cmp	r3, #47	; 0x2f
 80019f8:	d915      	bls.n	8001a26 <prv_parse_number+0xa6>
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b39      	cmp	r3, #57	; 0x39
 8001a02:	d810      	bhi.n	8001a26 <prv_parse_number+0xa6>
        || (*pobj->p == '0'
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b30      	cmp	r3, #48	; 0x30
 8001a0c:	d10d      	bne.n	8001a2a <prv_parse_number+0xaa>
            && (pobj->p[1] < '0' && pobj->p[1] > '9'))) { /* Number starts with 0 but not followed by dot */
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	3301      	adds	r3, #1
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b2f      	cmp	r3, #47	; 0x2f
 8001a18:	d807      	bhi.n	8001a2a <prv_parse_number+0xaa>
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b39      	cmp	r3, #57	; 0x39
 8001a24:	d901      	bls.n	8001a2a <prv_parse_number+0xaa>
        return lwjsonERRJSON;
 8001a26:	2302      	movs	r3, #2
 8001a28:	e117      	b.n	8001c5a <prv_parse_number+0x2da>
    }

    /* Parse number */
    for (num = 0; *pobj->p >= '0' && *pobj->p <= '9'; ++pobj->p) {
 8001a2a:	f04f 0300 	mov.w	r3, #0
 8001a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a30:	e016      	b.n	8001a60 <prv_parse_number+0xe0>
        num = num * 10 + (*pobj->p - '0');
 8001a32:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001a36:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001a3a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	3b30      	subs	r3, #48	; 0x30
 8001a46:	ee07 3a90 	vmov	s15, r3
 8001a4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a52:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    for (num = 0; *pobj->p >= '0' && *pobj->p <= '9'; ++pobj->p) {
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	1c5a      	adds	r2, r3, #1
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b2f      	cmp	r3, #47	; 0x2f
 8001a68:	d904      	bls.n	8001a74 <prv_parse_number+0xf4>
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b39      	cmp	r3, #57	; 0x39
 8001a72:	d9de      	bls.n	8001a32 <prv_parse_number+0xb2>
    }
    if (pobj->p != NULL && *pobj->p == '.') { /* Number has exponent */
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d054      	beq.n	8001b26 <prv_parse_number+0x1a6>
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b2e      	cmp	r3, #46	; 0x2e
 8001a84:	d14f      	bne.n	8001b26 <prv_parse_number+0x1a6>
        lwjson_real_t exp, dec_num;

        type = LWJSON_TYPE_NUM_REAL;            /* Format is real */
 8001a86:	2302      	movs	r3, #2
 8001a88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        ++pobj->p;                              /* Ignore comma character */
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	1c5a      	adds	r2, r3, #1
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	609a      	str	r2, [r3, #8]
        if (*pobj->p < '0' || *pobj->p > '9') { /* Must be followed by number characters */
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b2f      	cmp	r3, #47	; 0x2f
 8001a9e:	d904      	bls.n	8001aaa <prv_parse_number+0x12a>
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b39      	cmp	r3, #57	; 0x39
 8001aa8:	d901      	bls.n	8001aae <prv_parse_number+0x12e>
            return lwjsonERRJSON;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	e0d5      	b.n	8001c5a <prv_parse_number+0x2da>
        }
        /* Get number after decimal point */
        for (exp = 1, dec_num = 0; *pobj->p >= '0' && *pobj->p <= '9'; ++pobj->p, exp *= 10) {
 8001aae:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001ab2:	61fb      	str	r3, [r7, #28]
 8001ab4:	f04f 0300 	mov.w	r3, #0
 8001ab8:	61bb      	str	r3, [r7, #24]
 8001aba:	e01e      	b.n	8001afa <prv_parse_number+0x17a>
            dec_num = dec_num * 10 + (*pobj->p - '0');
 8001abc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ac0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001ac4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	3b30      	subs	r3, #48	; 0x30
 8001ad0:	ee07 3a90 	vmov	s15, r3
 8001ad4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ad8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001adc:	edc7 7a06 	vstr	s15, [r7, #24]
        for (exp = 1, dec_num = 0; *pobj->p >= '0' && *pobj->p <= '9'; ++pobj->p, exp *= 10) {
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	1c5a      	adds	r2, r3, #1
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	609a      	str	r2, [r3, #8]
 8001aea:	edd7 7a07 	vldr	s15, [r7, #28]
 8001aee:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001af2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001af6:	edc7 7a07 	vstr	s15, [r7, #28]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b2f      	cmp	r3, #47	; 0x2f
 8001b02:	d904      	bls.n	8001b0e <prv_parse_number+0x18e>
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	2b39      	cmp	r3, #57	; 0x39
 8001b0c:	d9d6      	bls.n	8001abc <prv_parse_number+0x13c>
        }
        num += dec_num / exp; /* Add decimal part to number */
 8001b0e:	edd7 6a06 	vldr	s13, [r7, #24]
 8001b12:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b1a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001b1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b22:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    }
    if (pobj->p != NULL && (*pobj->p == 'e' || *pobj->p == 'E')) { /* Engineering mode */
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d074      	beq.n	8001c18 <prv_parse_number+0x298>
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b65      	cmp	r3, #101	; 0x65
 8001b36:	d004      	beq.n	8001b42 <prv_parse_number+0x1c2>
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b45      	cmp	r3, #69	; 0x45
 8001b40:	d16a      	bne.n	8001c18 <prv_parse_number+0x298>
        uint8_t is_minus_exp;
        int exp_cnt;

        type = LWJSON_TYPE_NUM_REAL;                         /* Format is real */
 8001b42:	2302      	movs	r3, #2
 8001b44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        ++pobj->p;                                           /* Ignore enginnering sing part */
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	1c5a      	adds	r2, r3, #1
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	609a      	str	r2, [r3, #8]
        is_minus_exp = *pobj->p == '-' ? (++pobj->p, 1) : 0; /* Check if negative */
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b2d      	cmp	r3, #45	; 0x2d
 8001b5a:	d106      	bne.n	8001b6a <prv_parse_number+0x1ea>
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	1c5a      	adds	r2, r3, #1
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	609a      	str	r2, [r3, #8]
 8001b66:	2301      	movs	r3, #1
 8001b68:	e000      	b.n	8001b6c <prv_parse_number+0x1ec>
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	747b      	strb	r3, [r7, #17]
        if (*pobj->p == '+') {                               /* Optional '+' is possible too */
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	2b2b      	cmp	r3, #43	; 0x2b
 8001b76:	d104      	bne.n	8001b82 <prv_parse_number+0x202>
            ++pobj->p;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	1c5a      	adds	r2, r3, #1
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	609a      	str	r2, [r3, #8]
        }
        if (*pobj->p < '0' || *pobj->p > '9') { /* Must be followed by number characters */
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b2f      	cmp	r3, #47	; 0x2f
 8001b8a:	d904      	bls.n	8001b96 <prv_parse_number+0x216>
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	2b39      	cmp	r3, #57	; 0x39
 8001b94:	d901      	bls.n	8001b9a <prv_parse_number+0x21a>
            return lwjsonERRJSON;
 8001b96:	2302      	movs	r3, #2
 8001b98:	e05f      	b.n	8001c5a <prv_parse_number+0x2da>
        }

        /* Parse exponent number */
        for (exp_cnt = 0; *pobj->p >= '0' && *pobj->p <= '9'; ++pobj->p) {
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	617b      	str	r3, [r7, #20]
 8001b9e:	e010      	b.n	8001bc2 <prv_parse_number+0x242>
            exp_cnt = exp_cnt * 10 + (*pobj->p - '0');
 8001ba0:	697a      	ldr	r2, [r7, #20]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	461a      	mov	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	3b30      	subs	r3, #48	; 0x30
 8001bb4:	4413      	add	r3, r2
 8001bb6:	617b      	str	r3, [r7, #20]
        for (exp_cnt = 0; *pobj->p >= '0' && *pobj->p <= '9'; ++pobj->p) {
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	1c5a      	adds	r2, r3, #1
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	609a      	str	r2, [r3, #8]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b2f      	cmp	r3, #47	; 0x2f
 8001bca:	d904      	bls.n	8001bd6 <prv_parse_number+0x256>
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b39      	cmp	r3, #57	; 0x39
 8001bd4:	d9e4      	bls.n	8001ba0 <prv_parse_number+0x220>
        }
        /* Calculate new value for exponent 10^exponent */
        if (is_minus_exp) {
 8001bd6:	7c7b      	ldrb	r3, [r7, #17]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d01a      	beq.n	8001c12 <prv_parse_number+0x292>
            for (; exp_cnt > 0; num /= 10, --exp_cnt) {}
 8001bdc:	e00a      	b.n	8001bf4 <prv_parse_number+0x274>
 8001bde:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001be2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001be6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bea:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	617b      	str	r3, [r7, #20]
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	dcf1      	bgt.n	8001bde <prv_parse_number+0x25e>
 8001bfa:	e00d      	b.n	8001c18 <prv_parse_number+0x298>
        } else {
            for (; exp_cnt > 0; num *= 10, --exp_cnt) {}
 8001bfc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001c00:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c08:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	617b      	str	r3, [r7, #20]
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	dcf1      	bgt.n	8001bfc <prv_parse_number+0x27c>
        }
    }
    if (is_minus) {
 8001c18:	7cbb      	ldrb	r3, [r7, #18]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d005      	beq.n	8001c2a <prv_parse_number+0x2aa>
        num = -num;
 8001c1e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001c22:	eef1 7a67 	vneg.f32	s15, s15
 8001c26:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    }

    /* Write output values */
    if (tout != NULL) {
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d003      	beq.n	8001c38 <prv_parse_number+0x2b8>
        *tout = type;
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001c36:	701a      	strb	r2, [r3, #0]
    }
    if (type == LWJSON_TYPE_NUM_INT) {
 8001c38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d108      	bne.n	8001c52 <prv_parse_number+0x2d2>
        *iout = (lwjson_int_t)num;
 8001c40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001c42:	f7fe fc9d 	bl	8000580 <__aeabi_f2lz>
 8001c46:	4602      	mov	r2, r0
 8001c48:	460b      	mov	r3, r1
 8001c4a:	6839      	ldr	r1, [r7, #0]
 8001c4c:	e9c1 2300 	strd	r2, r3, [r1]
 8001c50:	e002      	b.n	8001c58 <prv_parse_number+0x2d8>
    } else {
        *fout = num;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c56:	601a      	str	r2, [r3, #0]
    }
    return lwjsonOK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3728      	adds	r7, #40	; 0x28
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <prv_create_path_segment>:
 * \param[out]      olen: Pointer to variable to write length of segment
 * \param[out]      is_last: Pointer to write if this is last segment
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_create_path_segment(const char** p, const char** opath, size_t* olen, uint8_t* is_last) {
 8001c62:	b480      	push	{r7}
 8001c64:	b087      	sub	sp, #28
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	60f8      	str	r0, [r7, #12]
 8001c6a:	60b9      	str	r1, [r7, #8]
 8001c6c:	607a      	str	r2, [r7, #4]
 8001c6e:	603b      	str	r3, [r7, #0]
    const char* s = *p;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	617b      	str	r3, [r7, #20]

    *is_last = 0;
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	701a      	strb	r2, [r3, #0]
    *opath = NULL;
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
    *olen = 0;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]

    /* Check input path */
    if (s == NULL || *s == '\0') {
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <prv_create_path_segment+0x34>
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d104      	bne.n	8001ca0 <prv_create_path_segment+0x3e>
        *is_last = 1;
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	701a      	strb	r2, [r3, #0]
        return 0;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	e04c      	b.n	8001d3a <prv_create_path_segment+0xd8>
    /*
     * Path must be one of:
     * - literal text
     * - "#" followed by dot "."
     */
    if (*s == '#') {
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b23      	cmp	r3, #35	; 0x23
 8001ca6:	d125      	bne.n	8001cf4 <prv_create_path_segment+0x92>
        *opath = s;
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	601a      	str	r2, [r3, #0]
        for (*olen = 0;; ++s, ++(*olen)) {
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
            if (*s == '.') {
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	2b2e      	cmp	r3, #46	; 0x2e
 8001cba:	d103      	bne.n	8001cc4 <prv_create_path_segment+0x62>
                ++s;
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	617b      	str	r3, [r7, #20]
                break;
 8001cc2:	e013      	b.n	8001cec <prv_create_path_segment+0x8a>
            } else if (*s == '\0') {
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d105      	bne.n	8001cd8 <prv_create_path_segment+0x76>
                if (*olen == 1) {
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d10a      	bne.n	8001cea <prv_create_path_segment+0x88>
                    return 0;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	e030      	b.n	8001d3a <prv_create_path_segment+0xd8>
        for (*olen = 0;; ++s, ++(*olen)) {
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	617b      	str	r3, [r7, #20]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	1c5a      	adds	r2, r3, #1
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	601a      	str	r2, [r3, #0]
            if (*s == '.') {
 8001ce8:	e7e4      	b.n	8001cb4 <prv_create_path_segment+0x52>
                } else {
                    break;
 8001cea:	bf00      	nop
                }
            }
        }
        *p = s;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	e01a      	b.n	8001d2a <prv_create_path_segment+0xc8>
    } else {
        *opath = s;
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	601a      	str	r2, [r3, #0]
        for (*olen = 0; *s != '\0' && *s != '.'; ++(*olen), ++s) {}
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	e007      	b.n	8001d12 <prv_create_path_segment+0xb0>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	1c5a      	adds	r2, r3, #1
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	617b      	str	r3, [r7, #20]
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <prv_create_path_segment+0xc0>
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	2b2e      	cmp	r3, #46	; 0x2e
 8001d20:	d1ef      	bne.n	8001d02 <prv_create_path_segment+0xa0>
        *p = s + 1;
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	1c5a      	adds	r2, r3, #1
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	601a      	str	r2, [r3, #0]
    }
    if (*s == '\0') {
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d102      	bne.n	8001d38 <prv_create_path_segment+0xd6>
        *is_last = 1;
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	2201      	movs	r2, #1
 8001d36:	701a      	strb	r2, [r3, #0]
    }
    return 1;
 8001d38:	2301      	movs	r3, #1
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	371c      	adds	r7, #28
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <prv_find>:
 * \param[in]       parent: Parent token of type \ref LWJSON_TYPE_ARRAY or LWJSON_TYPE_OBJECT
 * \param[in]       path: Path to search for starting this token further
 * \return          Found token on success, `NULL` otherwise
 */
static const lwjson_token_t*
prv_find(const lwjson_token_t* parent, const char* path) {
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b08e      	sub	sp, #56	; 0x38
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
 8001d4e:	6039      	str	r1, [r7, #0]
    const char* segment;
    size_t segment_len;
    uint8_t is_last, result;

    /* Get path segments */
    if ((result = prv_create_path_segment(&path, &segment, &segment_len, &is_last)) != 0) {
 8001d50:	f107 030f 	add.w	r3, r7, #15
 8001d54:	f107 0210 	add.w	r2, r7, #16
 8001d58:	f107 0114 	add.w	r1, r7, #20
 8001d5c:	4638      	mov	r0, r7
 8001d5e:	f7ff ff80 	bl	8001c62 <prv_create_path_segment>
 8001d62:	4603      	mov	r3, r0
 8001d64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001d68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f000 809a 	beq.w	8001ea6 <prv_find+0x160>
        /* Check if detected an array request */
        if (*segment == '#') {
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2b23      	cmp	r3, #35	; 0x23
 8001d78:	d166      	bne.n	8001e48 <prv_find+0x102>
            /* Parent must be array */
            if (parent->type != LWJSON_TYPE_ARRAY) {
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	791b      	ldrb	r3, [r3, #4]
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	d001      	beq.n	8001d86 <prv_find+0x40>
                return NULL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	e090      	b.n	8001ea8 <prv_find+0x162>
            }

            /* Check if index requested */
            if (segment_len > 1) {
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d947      	bls.n	8001e1c <prv_find+0xd6>
                const lwjson_token_t* t;
                size_t index = 0;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	633b      	str	r3, [r7, #48]	; 0x30

                /* Parse number */
                for (size_t i = 1; i < segment_len; ++i) {
 8001d90:	2301      	movs	r3, #1
 8001d92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d94:	e01d      	b.n	8001dd2 <prv_find+0x8c>
                    if (segment[i] < '0' || segment[i] > '9') {
 8001d96:	697a      	ldr	r2, [r7, #20]
 8001d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d9a:	4413      	add	r3, r2
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	2b2f      	cmp	r3, #47	; 0x2f
 8001da0:	d905      	bls.n	8001dae <prv_find+0x68>
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da6:	4413      	add	r3, r2
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	2b39      	cmp	r3, #57	; 0x39
 8001dac:	d901      	bls.n	8001db2 <prv_find+0x6c>
                        return NULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	e07a      	b.n	8001ea8 <prv_find+0x162>
                    } else {
                        index = index * 10 + (segment[i] - '0');
 8001db2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001db4:	4613      	mov	r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4413      	add	r3, r2
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	697a      	ldr	r2, [r7, #20]
 8001dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc2:	4413      	add	r3, r2
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	440b      	add	r3, r1
 8001dc8:	3b30      	subs	r3, #48	; 0x30
 8001dca:	633b      	str	r3, [r7, #48]	; 0x30
                for (size_t i = 1; i < segment_len; ++i) {
 8001dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dce:	3301      	adds	r3, #1
 8001dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d3dd      	bcc.n	8001d96 <prv_find+0x50>
                    }
                }

                /* Start from beginning */
                for (t = parent->u.first_child; t != NULL && index > 0; t = t->next, --index) {}
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	637b      	str	r3, [r7, #52]	; 0x34
 8001de0:	e005      	b.n	8001dee <prv_find+0xa8>
 8001de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	637b      	str	r3, [r7, #52]	; 0x34
 8001de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dea:	3b01      	subs	r3, #1
 8001dec:	633b      	str	r3, [r7, #48]	; 0x30
 8001dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d002      	beq.n	8001dfa <prv_find+0xb4>
 8001df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1f3      	bne.n	8001de2 <prv_find+0x9c>
                if (t != NULL) {
 8001dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d00b      	beq.n	8001e18 <prv_find+0xd2>
                    if (is_last) {
 8001e00:	7bfb      	ldrb	r3, [r7, #15]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <prv_find+0xc4>
                        return t;
 8001e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e08:	e04e      	b.n	8001ea8 <prv_find+0x162>
                    } else {
                        return prv_find(t, path);
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001e10:	f7ff ff99 	bl	8001d46 <prv_find>
 8001e14:	4603      	mov	r3, r0
 8001e16:	e047      	b.n	8001ea8 <prv_find+0x162>
                    }
                }
                return NULL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	e045      	b.n	8001ea8 <prv_find+0x162>
            }

            /* Scan all indexes and get first match */
            for (const lwjson_token_t *tmp_t, *t = parent->u.first_child; t != NULL; t = t->next) {
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e22:	e00d      	b.n	8001e40 <prv_find+0xfa>
                if ((tmp_t = prv_find(t, path)) != NULL) {
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	4619      	mov	r1, r3
 8001e28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e2a:	f7ff ff8c 	bl	8001d46 <prv_find>
 8001e2e:	61b8      	str	r0, [r7, #24]
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <prv_find+0xf4>
                    return tmp_t;
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	e036      	b.n	8001ea8 <prv_find+0x162>
            for (const lwjson_token_t *tmp_t, *t = parent->u.first_child; t != NULL; t = t->next) {
 8001e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1ee      	bne.n	8001e24 <prv_find+0xde>
 8001e46:	e02e      	b.n	8001ea6 <prv_find+0x160>
                }
            }
        } else {
            if (parent->type != LWJSON_TYPE_OBJECT) {
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	791b      	ldrb	r3, [r3, #4]
 8001e4c:	2b03      	cmp	r3, #3
 8001e4e:	d001      	beq.n	8001e54 <prv_find+0x10e>
                return NULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	e029      	b.n	8001ea8 <prv_find+0x162>
            }
            for (const lwjson_token_t* t = parent->u.first_child; t != NULL; t = t->next) {
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
 8001e5a:	e021      	b.n	8001ea0 <prv_find+0x15a>
                if (t->token_name_len == segment_len && !strncmp(t->token_name, segment, segment_len)) {
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5e:	68da      	ldr	r2, [r3, #12]
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d119      	bne.n	8001e9a <prv_find+0x154>
 8001e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	6979      	ldr	r1, [r7, #20]
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f005 f866 	bl	8006f40 <strncmp>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d10f      	bne.n	8001e9a <prv_find+0x154>
                    const lwjson_token_t* tmp_t;
                    if (is_last) {
 8001e7a:	7bfb      	ldrb	r3, [r7, #15]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <prv_find+0x13e>
                        return t;
 8001e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e82:	e011      	b.n	8001ea8 <prv_find+0x162>
                    }
                    if ((tmp_t = prv_find(t, path)) != NULL) {
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	4619      	mov	r1, r3
 8001e88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e8a:	f7ff ff5c 	bl	8001d46 <prv_find>
 8001e8e:	61f8      	str	r0, [r7, #28]
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <prv_find+0x154>
                        return tmp_t;
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	e006      	b.n	8001ea8 <prv_find+0x162>
            for (const lwjson_token_t* t = parent->u.first_child; t != NULL; t = t->next) {
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1da      	bne.n	8001e5c <prv_find+0x116>
                    }
                }
            }
        }
    }
    return NULL;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3738      	adds	r7, #56	; 0x38
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <prv_check_valid_char_after_open_bracket>:
 * \param[in,out]   pobj: JSON string
 * \param[in]       t: Token to check for type
 * \return          \ref lwjsonOK on success, member of \ref lwjsonr_t otherwise
 */
static inline lwjsonr_t
prv_check_valid_char_after_open_bracket(lwjson_int_str_t* pobj, lwjson_token_t* t) {
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
    lwjsonr_t res;

    /* Check next character after object open */
    if ((res = prv_skip_blank(pobj)) != lwjsonOK) {
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7ff fbef 	bl	800169e <prv_skip_blank>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	73fb      	strb	r3, [r7, #15]
 8001ec4:	7bfb      	ldrb	r3, [r7, #15]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <prv_check_valid_char_after_open_bracket+0x1e>
        return res;
 8001eca:	7bfb      	ldrb	r3, [r7, #15]
 8001ecc:	e04b      	b.n	8001f66 <prv_check_valid_char_after_open_bracket+0xb6>
    }
    if (*pobj->p == '\0' || (t->type == LWJSON_TYPE_OBJECT && (*pobj->p != '"' && *pobj->p != '}'))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d043      	beq.n	8001f60 <prv_check_valid_char_after_open_bracket+0xb0>
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	791b      	ldrb	r3, [r3, #4]
 8001edc:	2b03      	cmp	r3, #3
 8001ede:	d109      	bne.n	8001ef4 <prv_check_valid_char_after_open_bracket+0x44>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b22      	cmp	r3, #34	; 0x22
 8001ee8:	d004      	beq.n	8001ef4 <prv_check_valid_char_after_open_bracket+0x44>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	2b7d      	cmp	r3, #125	; 0x7d
 8001ef2:	d135      	bne.n	8001f60 <prv_check_valid_char_after_open_bracket+0xb0>
        || (t->type == LWJSON_TYPE_ARRAY
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	791b      	ldrb	r3, [r3, #4]
 8001ef8:	2b04      	cmp	r3, #4
 8001efa:	d133      	bne.n	8001f64 <prv_check_valid_char_after_open_bracket+0xb4>
            && (*pobj->p != '"' && *pobj->p != ']' && *pobj->p != '[' && *pobj->p != '{' && *pobj->p != '-'
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	2b22      	cmp	r3, #34	; 0x22
 8001f04:	d02e      	beq.n	8001f64 <prv_check_valid_char_after_open_bracket+0xb4>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b5d      	cmp	r3, #93	; 0x5d
 8001f0e:	d029      	beq.n	8001f64 <prv_check_valid_char_after_open_bracket+0xb4>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b5b      	cmp	r3, #91	; 0x5b
 8001f18:	d024      	beq.n	8001f64 <prv_check_valid_char_after_open_bracket+0xb4>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b7b      	cmp	r3, #123	; 0x7b
 8001f22:	d01f      	beq.n	8001f64 <prv_check_valid_char_after_open_bracket+0xb4>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	2b2d      	cmp	r3, #45	; 0x2d
 8001f2c:	d01a      	beq.n	8001f64 <prv_check_valid_char_after_open_bracket+0xb4>
                && (*pobj->p < '0' || *pobj->p > '9') && *pobj->p != 't' && *pobj->p != 'n' && *pobj->p != 'f'))) {
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	2b2f      	cmp	r3, #47	; 0x2f
 8001f36:	d904      	bls.n	8001f42 <prv_check_valid_char_after_open_bracket+0x92>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	2b39      	cmp	r3, #57	; 0x39
 8001f40:	d910      	bls.n	8001f64 <prv_check_valid_char_after_open_bracket+0xb4>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b74      	cmp	r3, #116	; 0x74
 8001f4a:	d00b      	beq.n	8001f64 <prv_check_valid_char_after_open_bracket+0xb4>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b6e      	cmp	r3, #110	; 0x6e
 8001f54:	d006      	beq.n	8001f64 <prv_check_valid_char_after_open_bracket+0xb4>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	2b66      	cmp	r3, #102	; 0x66
 8001f5e:	d001      	beq.n	8001f64 <prv_check_valid_char_after_open_bracket+0xb4>
        res = lwjsonERRJSON;
 8001f60:	2302      	movs	r3, #2
 8001f62:	73fb      	strb	r3, [r7, #15]
    }
    return res;
 8001f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <lwjson_init>:
 * \param[in]       tokens: Pointer to array of tokens used for parsing
 * \param[in]       tokens_len: Number of tokens
 * \return          \ref lwjsonOK on success, member of \ref lwjsonr_t otherwise
 */
lwjsonr_t
lwjson_init(lwjson_t* lwobj, lwjson_token_t* tokens, size_t tokens_len) {
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b084      	sub	sp, #16
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	60f8      	str	r0, [r7, #12]
 8001f76:	60b9      	str	r1, [r7, #8]
 8001f78:	607a      	str	r2, [r7, #4]
    memset(lwobj, 0x00, sizeof(*lwobj));
 8001f7a:	2230      	movs	r2, #48	; 0x30
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	68f8      	ldr	r0, [r7, #12]
 8001f80:	f004 ffd6 	bl	8006f30 <memset>
    memset(tokens, 0x00, sizeof(*tokens) * tokens_len);
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	4613      	mov	r3, r2
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	4413      	add	r3, r2
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	461a      	mov	r2, r3
 8001f90:	2100      	movs	r1, #0
 8001f92:	68b8      	ldr	r0, [r7, #8]
 8001f94:	f004 ffcc 	bl	8006f30 <memset>
    lwobj->tokens = tokens;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	68ba      	ldr	r2, [r7, #8]
 8001f9c:	601a      	str	r2, [r3, #0]
    lwobj->tokens_len = tokens_len;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	605a      	str	r2, [r3, #4]
    lwobj->first_token.type = LWJSON_TYPE_OBJECT;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2203      	movs	r2, #3
 8001fa8:	751a      	strb	r2, [r3, #20]
    return lwjsonOK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <lwjson_parse_ex>:
 * \param[in]       json_data: JSON string to parse
 * \param[in]       jsonČlen: JSON data length
 * \return          \ref lwjsonOK on success, member of \ref lwjsonr_t otherwise
 */
lwjsonr_t
lwjson_parse_ex(lwjson_t* lwobj, const void* json_data, size_t json_len) {
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08c      	sub	sp, #48	; 0x30
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
    lwjsonr_t res = lwjsonOK;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    lwjson_token_t *t, *to;
    lwjson_int_str_t pobj = {.start = json_data, .len = json_len, .p = json_data};
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	613b      	str	r3, [r7, #16]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	617b      	str	r3, [r7, #20]
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	61bb      	str	r3, [r7, #24]

    /* Check input parameters */
    if (lwobj == NULL || json_data == NULL || json_len == 0) {
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d005      	beq.n	8001fe4 <lwjson_parse_ex+0x30>
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d002      	beq.n	8001fe4 <lwjson_parse_ex+0x30>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d103      	bne.n	8001fec <lwjson_parse_ex+0x38>
        res = lwjsonERRPAR;
 8001fe4:	2304      	movs	r3, #4
 8001fe6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        goto ret;
 8001fea:	e22a      	b.n	8002442 <lwjson_parse_ex+0x48e>
    }

    /* set first token */
    to = &lwobj->first_token;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	3310      	adds	r3, #16
 8001ff0:	62bb      	str	r3, [r7, #40]	; 0x28

    /* values from very beginning */
    lwobj->flags.parsed = 0;
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8001ff8:	f36f 0300 	bfc	r3, #0, #1
 8001ffc:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    lwobj->next_free_token_pos = 0;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2200      	movs	r2, #0
 8002004:	609a      	str	r2, [r3, #8]
    memset(to, 0x00, sizeof(*to));
 8002006:	2218      	movs	r2, #24
 8002008:	2100      	movs	r1, #0
 800200a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800200c:	f004 ff90 	bl	8006f30 <memset>

    /* First parse */
    if ((res = prv_skip_blank(&pobj)) != lwjsonOK) {
 8002010:	f107 0310 	add.w	r3, r7, #16
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff fb42 	bl	800169e <prv_skip_blank>
 800201a:	4603      	mov	r3, r0
 800201c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002020:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002024:	2b00      	cmp	r3, #0
 8002026:	f040 81fd 	bne.w	8002424 <lwjson_parse_ex+0x470>
        goto ret;
    }
    if (*pobj.p == '{') {
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	2b7b      	cmp	r3, #123	; 0x7b
 8002030:	d103      	bne.n	800203a <lwjson_parse_ex+0x86>
        to->type = LWJSON_TYPE_OBJECT;
 8002032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002034:	2203      	movs	r2, #3
 8002036:	711a      	strb	r2, [r3, #4]
 8002038:	e00b      	b.n	8002052 <lwjson_parse_ex+0x9e>
    } else if (*pobj.p == '[') {
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2b5b      	cmp	r3, #91	; 0x5b
 8002040:	d103      	bne.n	800204a <lwjson_parse_ex+0x96>
        to->type = LWJSON_TYPE_ARRAY;
 8002042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002044:	2204      	movs	r2, #4
 8002046:	711a      	strb	r2, [r3, #4]
 8002048:	e003      	b.n	8002052 <lwjson_parse_ex+0x9e>
    } else {
        res = lwjsonERRJSON;
 800204a:	2302      	movs	r3, #2
 800204c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        goto ret;
 8002050:	e1f7      	b.n	8002442 <lwjson_parse_ex+0x48e>
    }
    ++pobj.p;
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	3301      	adds	r3, #1
 8002056:	61bb      	str	r3, [r7, #24]
    if ((res = prv_check_valid_char_after_open_bracket(&pobj, to)) != lwjsonOK) {
 8002058:	f107 0310 	add.w	r3, r7, #16
 800205c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff ff26 	bl	8001eb0 <prv_check_valid_char_after_open_bracket>
 8002064:	4603      	mov	r3, r0
 8002066:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800206a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800206e:	2b00      	cmp	r3, #0
 8002070:	f040 81da 	bne.w	8002428 <lwjson_parse_ex+0x474>
        goto ret;
    }

    /* Process all characters as indicated by input user */
    while (pobj.p != NULL && *pobj.p != '\0' && (size_t)(pobj.p - pobj.start) < pobj.len) {
 8002074:	e1a1      	b.n	80023ba <lwjson_parse_ex+0x406>
        /* Filter out blanks */
        if ((res = prv_skip_blank(&pobj)) != lwjsonOK) {
 8002076:	f107 0310 	add.w	r3, r7, #16
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff fb0f 	bl	800169e <prv_skip_blank>
 8002080:	4603      	mov	r3, r0
 8002082:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002086:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800208a:	2b00      	cmp	r3, #0
 800208c:	f040 81ce 	bne.w	800242c <lwjson_parse_ex+0x478>
            goto ret;
        }
        if (*pobj.p == ',') {
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b2c      	cmp	r3, #44	; 0x2c
 8002096:	d103      	bne.n	80020a0 <lwjson_parse_ex+0xec>
            ++pobj.p;
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	3301      	adds	r3, #1
 800209c:	61bb      	str	r3, [r7, #24]
            continue;
 800209e:	e18c      	b.n	80023ba <lwjson_parse_ex+0x406>
        }

        /* Check if end of object or array*/
        if (*pobj.p == (to->type == LWJSON_TYPE_OBJECT ? '}' : ']')) {
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	461a      	mov	r2, r3
 80020a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a8:	791b      	ldrb	r3, [r3, #4]
 80020aa:	2b03      	cmp	r3, #3
 80020ac:	d101      	bne.n	80020b2 <lwjson_parse_ex+0xfe>
 80020ae:	237d      	movs	r3, #125	; 0x7d
 80020b0:	e000      	b.n	80020b4 <lwjson_parse_ex+0x100>
 80020b2:	235d      	movs	r3, #93	; 0x5d
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d126      	bne.n	8002106 <lwjson_parse_ex+0x152>
            lwjson_token_t* parent = to->next;
 80020b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	61fb      	str	r3, [r7, #28]
            to->next = NULL;
 80020be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
            ++pobj.p;
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	3301      	adds	r3, #1
 80020c8:	61bb      	str	r3, [r7, #24]

            /* End of string if to == NULL (no parent), check if properly terminated */
            if ((to = parent) == NULL) {
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80020ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f040 8172 	bne.w	80023ba <lwjson_parse_ex+0x406>
                prv_skip_blank(&pobj);
 80020d6:	f107 0310 	add.w	r3, r7, #16
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff fadf 	bl	800169e <prv_skip_blank>
                res = (pobj.p == NULL || *pobj.p == '\0' || (size_t)(pobj.p - pobj.start) == pobj.len) ? lwjsonOK
 80020e0:	69bb      	ldr	r3, [r7, #24]
                                                                                                       : lwjsonERR;
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00b      	beq.n	80020fe <lwjson_parse_ex+0x14a>
                res = (pobj.p == NULL || *pobj.p == '\0' || (size_t)(pobj.p - pobj.start) == pobj.len) ? lwjsonOK
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d007      	beq.n	80020fe <lwjson_parse_ex+0x14a>
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	697a      	ldr	r2, [r7, #20]
                                                                                                       : lwjsonERR;
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d001      	beq.n	80020fe <lwjson_parse_ex+0x14a>
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <lwjson_parse_ex+0x14c>
 80020fe:	2300      	movs	r3, #0
                res = (pobj.p == NULL || *pobj.p == '\0' || (size_t)(pobj.p - pobj.start) == pobj.len) ? lwjsonOK
 8002100:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                goto ret;
 8002104:	e19d      	b.n	8002442 <lwjson_parse_ex+0x48e>
            }
            continue;
        }

        /* Allocate new token */
        if ((t = prv_alloc_token(lwobj)) == NULL) {
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f7ff fa9f 	bl	800164a <prv_alloc_token>
 800210c:	6238      	str	r0, [r7, #32]
 800210e:	6a3b      	ldr	r3, [r7, #32]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d103      	bne.n	800211c <lwjson_parse_ex+0x168>
            res = lwjsonERRMEM;
 8002114:	2303      	movs	r3, #3
 8002116:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            goto ret;
 800211a:	e192      	b.n	8002442 <lwjson_parse_ex+0x48e>
        }

        /* If object type is not array, first thing is property that starts with quotes */
        if (to->type != LWJSON_TYPE_ARRAY) {
 800211c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800211e:	791b      	ldrb	r3, [r3, #4]
 8002120:	2b04      	cmp	r3, #4
 8002122:	d015      	beq.n	8002150 <lwjson_parse_ex+0x19c>
            if (*pobj.p != '"') {
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b22      	cmp	r3, #34	; 0x22
 800212a:	d003      	beq.n	8002134 <lwjson_parse_ex+0x180>
                res = lwjsonERRJSON;
 800212c:	2302      	movs	r3, #2
 800212e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                goto ret;
 8002132:	e186      	b.n	8002442 <lwjson_parse_ex+0x48e>
            }
            if ((res = prv_parse_property_name(&pobj, t)) != lwjsonOK) {
 8002134:	f107 0310 	add.w	r3, r7, #16
 8002138:	6a39      	ldr	r1, [r7, #32]
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff fbe8 	bl	8001910 <prv_parse_property_name>
 8002140:	4603      	mov	r3, r0
 8002142:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002146:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800214a:	2b00      	cmp	r3, #0
 800214c:	f040 8170 	bne.w	8002430 <lwjson_parse_ex+0x47c>
                goto ret;
            }
        }

        /* Add element to linked list */
        if (to->u.first_child == NULL) {
 8002150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d103      	bne.n	8002160 <lwjson_parse_ex+0x1ac>
            to->u.first_child = t;
 8002158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800215a:	6a3a      	ldr	r2, [r7, #32]
 800215c:	611a      	str	r2, [r3, #16]
 800215e:	e00d      	b.n	800217c <lwjson_parse_ex+0x1c8>
        } else {
            lwjson_token_t* c;
            for (c = to->u.first_child; c->next != NULL; c = c->next) {}
 8002160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	627b      	str	r3, [r7, #36]	; 0x24
 8002166:	e002      	b.n	800216e <lwjson_parse_ex+0x1ba>
 8002168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	627b      	str	r3, [r7, #36]	; 0x24
 800216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f8      	bne.n	8002168 <lwjson_parse_ex+0x1b4>
            c->next = t;
 8002176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002178:	6a3a      	ldr	r2, [r7, #32]
 800217a:	601a      	str	r2, [r3, #0]
        }

        /* Check next character to process */
        switch (*pobj.p) {
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b22      	cmp	r3, #34	; 0x22
 8002182:	d071      	beq.n	8002268 <lwjson_parse_ex+0x2b4>
 8002184:	2b22      	cmp	r3, #34	; 0x22
 8002186:	f2c0 80c2 	blt.w	800230e <lwjson_parse_ex+0x35a>
 800218a:	2b7b      	cmp	r3, #123	; 0x7b
 800218c:	f300 80bf 	bgt.w	800230e <lwjson_parse_ex+0x35a>
 8002190:	2b5b      	cmp	r3, #91	; 0x5b
 8002192:	f2c0 80bc 	blt.w	800230e <lwjson_parse_ex+0x35a>
 8002196:	3b5b      	subs	r3, #91	; 0x5b
 8002198:	2b20      	cmp	r3, #32
 800219a:	f200 80b8 	bhi.w	800230e <lwjson_parse_ex+0x35a>
 800219e:	a201      	add	r2, pc, #4	; (adr r2, 80021a4 <lwjson_parse_ex+0x1f0>)
 80021a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a4:	08002229 	.word	0x08002229
 80021a8:	0800230f 	.word	0x0800230f
 80021ac:	0800230f 	.word	0x0800230f
 80021b0:	0800230f 	.word	0x0800230f
 80021b4:	0800230f 	.word	0x0800230f
 80021b8:	0800230f 	.word	0x0800230f
 80021bc:	0800230f 	.word	0x0800230f
 80021c0:	0800230f 	.word	0x0800230f
 80021c4:	0800230f 	.word	0x0800230f
 80021c8:	0800230f 	.word	0x0800230f
 80021cc:	0800230f 	.word	0x0800230f
 80021d0:	080022bf 	.word	0x080022bf
 80021d4:	0800230f 	.word	0x0800230f
 80021d8:	0800230f 	.word	0x0800230f
 80021dc:	0800230f 	.word	0x0800230f
 80021e0:	0800230f 	.word	0x0800230f
 80021e4:	0800230f 	.word	0x0800230f
 80021e8:	0800230f 	.word	0x0800230f
 80021ec:	0800230f 	.word	0x0800230f
 80021f0:	080022e7 	.word	0x080022e7
 80021f4:	0800230f 	.word	0x0800230f
 80021f8:	0800230f 	.word	0x0800230f
 80021fc:	0800230f 	.word	0x0800230f
 8002200:	0800230f 	.word	0x0800230f
 8002204:	0800230f 	.word	0x0800230f
 8002208:	08002297 	.word	0x08002297
 800220c:	0800230f 	.word	0x0800230f
 8002210:	0800230f 	.word	0x0800230f
 8002214:	0800230f 	.word	0x0800230f
 8002218:	0800230f 	.word	0x0800230f
 800221c:	0800230f 	.word	0x0800230f
 8002220:	0800230f 	.word	0x0800230f
 8002224:	08002229 	.word	0x08002229
            case '{':
            case '[':
                t->type = *pobj.p == '{' ? LWJSON_TYPE_OBJECT : LWJSON_TYPE_ARRAY;
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b7b      	cmp	r3, #123	; 0x7b
 800222e:	d101      	bne.n	8002234 <lwjson_parse_ex+0x280>
 8002230:	2203      	movs	r2, #3
 8002232:	e000      	b.n	8002236 <lwjson_parse_ex+0x282>
 8002234:	2204      	movs	r2, #4
 8002236:	6a3b      	ldr	r3, [r7, #32]
 8002238:	711a      	strb	r2, [r3, #4]
                ++pobj.p;
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	3301      	adds	r3, #1
 800223e:	61bb      	str	r3, [r7, #24]
                if ((res = prv_check_valid_char_after_open_bracket(&pobj, t)) != lwjsonOK) {
 8002240:	f107 0310 	add.w	r3, r7, #16
 8002244:	6a39      	ldr	r1, [r7, #32]
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff fe32 	bl	8001eb0 <prv_check_valid_char_after_open_bracket>
 800224c:	4603      	mov	r3, r0
 800224e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002252:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002256:	2b00      	cmp	r3, #0
 8002258:	f040 80ec 	bne.w	8002434 <lwjson_parse_ex+0x480>
                    goto ret;
                }
                t->next = to; /* Temporary saved as parent object */
 800225c:	6a3b      	ldr	r3, [r7, #32]
 800225e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002260:	601a      	str	r2, [r3, #0]
                to = t;
 8002262:	6a3b      	ldr	r3, [r7, #32]
 8002264:	62bb      	str	r3, [r7, #40]	; 0x28
                break;
 8002266:	e075      	b.n	8002354 <lwjson_parse_ex+0x3a0>
            case '"':
                if ((res = prv_parse_string(&pobj, &t->u.str.token_value, &t->u.str.token_value_len)) == lwjsonOK) {
 8002268:	6a3b      	ldr	r3, [r7, #32]
 800226a:	f103 0110 	add.w	r1, r3, #16
 800226e:	6a3b      	ldr	r3, [r7, #32]
 8002270:	f103 0214 	add.w	r2, r3, #20
 8002274:	f107 0310 	add.w	r3, r7, #16
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff fa63 	bl	8001744 <prv_parse_string>
 800227e:	4603      	mov	r3, r0
 8002280:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002284:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002288:	2b00      	cmp	r3, #0
 800228a:	f040 80d5 	bne.w	8002438 <lwjson_parse_ex+0x484>
                    t->type = LWJSON_TYPE_STRING;
 800228e:	6a3b      	ldr	r3, [r7, #32]
 8002290:	2200      	movs	r2, #0
 8002292:	711a      	strb	r2, [r3, #4]
                } else {
                    goto ret;
                }
                break;
 8002294:	e05e      	b.n	8002354 <lwjson_parse_ex+0x3a0>
            case 't':
                /* RFC4627 is lower-case only */
                if (strncmp(pobj.p, "true", 4) == 0) {
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	2204      	movs	r2, #4
 800229a:	4972      	ldr	r1, [pc, #456]	; (8002464 <lwjson_parse_ex+0x4b0>)
 800229c:	4618      	mov	r0, r3
 800229e:	f004 fe4f 	bl	8006f40 <strncmp>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d106      	bne.n	80022b6 <lwjson_parse_ex+0x302>
                    t->type = LWJSON_TYPE_TRUE;
 80022a8:	6a3b      	ldr	r3, [r7, #32]
 80022aa:	2205      	movs	r2, #5
 80022ac:	711a      	strb	r2, [r3, #4]
                    pobj.p += 4;
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	3304      	adds	r3, #4
 80022b2:	61bb      	str	r3, [r7, #24]
                } else {
                    res = lwjsonERRJSON;
                    goto ret;
                }
                break;
 80022b4:	e04e      	b.n	8002354 <lwjson_parse_ex+0x3a0>
                    res = lwjsonERRJSON;
 80022b6:	2302      	movs	r3, #2
 80022b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    goto ret;
 80022bc:	e0c1      	b.n	8002442 <lwjson_parse_ex+0x48e>
            case 'f':
                /* RFC4627 is lower-case only */
                if (strncmp(pobj.p, "false", 5) == 0) {
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	2205      	movs	r2, #5
 80022c2:	4969      	ldr	r1, [pc, #420]	; (8002468 <lwjson_parse_ex+0x4b4>)
 80022c4:	4618      	mov	r0, r3
 80022c6:	f004 fe3b 	bl	8006f40 <strncmp>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d106      	bne.n	80022de <lwjson_parse_ex+0x32a>
                    t->type = LWJSON_TYPE_FALSE;
 80022d0:	6a3b      	ldr	r3, [r7, #32]
 80022d2:	2206      	movs	r2, #6
 80022d4:	711a      	strb	r2, [r3, #4]
                    pobj.p += 5;
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	3305      	adds	r3, #5
 80022da:	61bb      	str	r3, [r7, #24]
                } else {
                    res = lwjsonERRJSON;
                    goto ret;
                }
                break;
 80022dc:	e03a      	b.n	8002354 <lwjson_parse_ex+0x3a0>
                    res = lwjsonERRJSON;
 80022de:	2302      	movs	r3, #2
 80022e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    goto ret;
 80022e4:	e0ad      	b.n	8002442 <lwjson_parse_ex+0x48e>
            case 'n':
                /* RFC4627 is lower-case only */
                if (strncmp(pobj.p, "null", 4) == 0) {
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	2204      	movs	r2, #4
 80022ea:	4960      	ldr	r1, [pc, #384]	; (800246c <lwjson_parse_ex+0x4b8>)
 80022ec:	4618      	mov	r0, r3
 80022ee:	f004 fe27 	bl	8006f40 <strncmp>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d106      	bne.n	8002306 <lwjson_parse_ex+0x352>
                    t->type = LWJSON_TYPE_NULL;
 80022f8:	6a3b      	ldr	r3, [r7, #32]
 80022fa:	2207      	movs	r2, #7
 80022fc:	711a      	strb	r2, [r3, #4]
                    pobj.p += 4;
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	3304      	adds	r3, #4
 8002302:	61bb      	str	r3, [r7, #24]
                } else {
                    res = lwjsonERRJSON;
                    goto ret;
                }
                break;
 8002304:	e026      	b.n	8002354 <lwjson_parse_ex+0x3a0>
                    res = lwjsonERRJSON;
 8002306:	2302      	movs	r3, #2
 8002308:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    goto ret;
 800230c:	e099      	b.n	8002442 <lwjson_parse_ex+0x48e>
            default:
                if (*pobj.p == '-' || (*pobj.p >= '0' && *pobj.p <= '9')) {
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b2d      	cmp	r3, #45	; 0x2d
 8002314:	d007      	beq.n	8002326 <lwjson_parse_ex+0x372>
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b2f      	cmp	r3, #47	; 0x2f
 800231c:	d915      	bls.n	800234a <lwjson_parse_ex+0x396>
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	2b39      	cmp	r3, #57	; 0x39
 8002324:	d811      	bhi.n	800234a <lwjson_parse_ex+0x396>
                    if (prv_parse_number(&pobj, &t->type, &t->u.num_real, &t->u.num_int) != lwjsonOK) {
 8002326:	6a3b      	ldr	r3, [r7, #32]
 8002328:	1d19      	adds	r1, r3, #4
 800232a:	6a3b      	ldr	r3, [r7, #32]
 800232c:	f103 0210 	add.w	r2, r3, #16
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	3310      	adds	r3, #16
 8002334:	f107 0010 	add.w	r0, r7, #16
 8002338:	f7ff fb22 	bl	8001980 <prv_parse_number>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d007      	beq.n	8002352 <lwjson_parse_ex+0x39e>
                        res = lwjsonERRJSON;
 8002342:	2302      	movs	r3, #2
 8002344:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        goto ret;
 8002348:	e07b      	b.n	8002442 <lwjson_parse_ex+0x48e>
                    }
                } else {
                    res = lwjsonERRJSON;
 800234a:	2302      	movs	r3, #2
 800234c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    goto ret;
 8002350:	e077      	b.n	8002442 <lwjson_parse_ex+0x48e>
                }
                break;
 8002352:	bf00      	nop
        }

        /* Below code is used to check characters after valid tokens */
        if (t->type == LWJSON_TYPE_ARRAY || t->type == LWJSON_TYPE_OBJECT) {
 8002354:	6a3b      	ldr	r3, [r7, #32]
 8002356:	791b      	ldrb	r3, [r3, #4]
 8002358:	2b04      	cmp	r3, #4
 800235a:	d02e      	beq.n	80023ba <lwjson_parse_ex+0x406>
 800235c:	6a3b      	ldr	r3, [r7, #32]
 800235e:	791b      	ldrb	r3, [r3, #4]
 8002360:	2b03      	cmp	r3, #3
 8002362:	d100      	bne.n	8002366 <lwjson_parse_ex+0x3b2>
            continue;
 8002364:	e029      	b.n	80023ba <lwjson_parse_ex+0x406>
         * blank characters, followed by one of below options:
         *  - Comma separator for next token
         *  - End of array indication
         *  - End of object indication
         */
        if ((res = prv_skip_blank(&pobj)) != lwjsonOK) {
 8002366:	f107 0310 	add.w	r3, r7, #16
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff f997 	bl	800169e <prv_skip_blank>
 8002370:	4603      	mov	r3, r0
 8002372:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002376:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800237a:	2b00      	cmp	r3, #0
 800237c:	d15e      	bne.n	800243c <lwjson_parse_ex+0x488>
            goto ret;
        }
        /* Check if valid string is availabe after */
        if (pobj.p == NULL || *pobj.p == '\0' || (*pobj.p != ',' && *pobj.p != ']' && *pobj.p != '}')) {
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00f      	beq.n	80023a4 <lwjson_parse_ex+0x3f0>
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00b      	beq.n	80023a4 <lwjson_parse_ex+0x3f0>
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	2b2c      	cmp	r3, #44	; 0x2c
 8002392:	d00b      	beq.n	80023ac <lwjson_parse_ex+0x3f8>
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b5d      	cmp	r3, #93	; 0x5d
 800239a:	d007      	beq.n	80023ac <lwjson_parse_ex+0x3f8>
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b7d      	cmp	r3, #125	; 0x7d
 80023a2:	d003      	beq.n	80023ac <lwjson_parse_ex+0x3f8>
            res = lwjsonERRJSON;
 80023a4:	2302      	movs	r3, #2
 80023a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            goto ret;
 80023aa:	e04a      	b.n	8002442 <lwjson_parse_ex+0x48e>
        } else if (*pobj.p == ',') { /* Check to advance to next token immediatey */
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b2c      	cmp	r3, #44	; 0x2c
 80023b2:	d102      	bne.n	80023ba <lwjson_parse_ex+0x406>
            ++pobj.p;
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	3301      	adds	r3, #1
 80023b8:	61bb      	str	r3, [r7, #24]
    while (pobj.p != NULL && *pobj.p != '\0' && (size_t)(pobj.p - pobj.start) < pobj.len) {
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00b      	beq.n	80023d8 <lwjson_parse_ex+0x424>
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d007      	beq.n	80023d8 <lwjson_parse_ex+0x424>
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	461a      	mov	r2, r3
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	f4ff ae4f 	bcc.w	8002076 <lwjson_parse_ex+0xc2>
        }
    }
    if (to != &lwobj->first_token || (to != NULL && to->next != NULL)) {
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	3310      	adds	r3, #16
 80023dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023de:	429a      	cmp	r2, r3
 80023e0:	d106      	bne.n	80023f0 <lwjson_parse_ex+0x43c>
 80023e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d008      	beq.n	80023fa <lwjson_parse_ex+0x446>
 80023e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d004      	beq.n	80023fa <lwjson_parse_ex+0x446>
        res = lwjsonERRJSON;
 80023f0:	2302      	movs	r3, #2
 80023f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        to = NULL;
 80023f6:	2300      	movs	r3, #0
 80023f8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    if (to != NULL) {
 80023fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d01f      	beq.n	8002440 <lwjson_parse_ex+0x48c>
        if (to->type != LWJSON_TYPE_ARRAY && to->type != LWJSON_TYPE_OBJECT) {
 8002400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002402:	791b      	ldrb	r3, [r3, #4]
 8002404:	2b04      	cmp	r3, #4
 8002406:	d006      	beq.n	8002416 <lwjson_parse_ex+0x462>
 8002408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240a:	791b      	ldrb	r3, [r3, #4]
 800240c:	2b03      	cmp	r3, #3
 800240e:	d002      	beq.n	8002416 <lwjson_parse_ex+0x462>
            res = lwjsonERRJSON;
 8002410:	2302      	movs	r3, #2
 8002412:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
        to->token_name = NULL;
 8002416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002418:	2200      	movs	r2, #0
 800241a:	609a      	str	r2, [r3, #8]
        to->token_name_len = 0;
 800241c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241e:	2200      	movs	r2, #0
 8002420:	60da      	str	r2, [r3, #12]
 8002422:	e00e      	b.n	8002442 <lwjson_parse_ex+0x48e>
        goto ret;
 8002424:	bf00      	nop
 8002426:	e00c      	b.n	8002442 <lwjson_parse_ex+0x48e>
        goto ret;
 8002428:	bf00      	nop
 800242a:	e00a      	b.n	8002442 <lwjson_parse_ex+0x48e>
            goto ret;
 800242c:	bf00      	nop
 800242e:	e008      	b.n	8002442 <lwjson_parse_ex+0x48e>
                goto ret;
 8002430:	bf00      	nop
 8002432:	e006      	b.n	8002442 <lwjson_parse_ex+0x48e>
                    goto ret;
 8002434:	bf00      	nop
 8002436:	e004      	b.n	8002442 <lwjson_parse_ex+0x48e>
                    goto ret;
 8002438:	bf00      	nop
 800243a:	e002      	b.n	8002442 <lwjson_parse_ex+0x48e>
            goto ret;
 800243c:	bf00      	nop
 800243e:	e000      	b.n	8002442 <lwjson_parse_ex+0x48e>
    }
ret:
 8002440:	bf00      	nop
    if (res == lwjsonOK) {
 8002442:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002446:	2b00      	cmp	r3, #0
 8002448:	d106      	bne.n	8002458 <lwjson_parse_ex+0x4a4>
        lwobj->flags.parsed = 1;
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8002450:	f043 0301 	orr.w	r3, r3, #1
 8002454:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    }
    return res;
 8002458:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800245c:	4618      	mov	r0, r3
 800245e:	3730      	adds	r7, #48	; 0x30
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	08006fb4 	.word	0x08006fb4
 8002468:	08006fbc 	.word	0x08006fbc
 800246c:	08006fc4 	.word	0x08006fc4

08002470 <lwjson_parse>:
 * \param[in,out]   lwobj: LwJSON instance
 * \param[in]       json_str: JSON string to parse
 * \return          \ref lwjsonOK on success, member of \ref lwjsonr_t otherwise
 */
lwjsonr_t
lwjson_parse(lwjson_t* lwobj, const char* json_str) {
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
    return lwjson_parse_ex(lwobj, json_str, strlen(json_str));
 800247a:	6838      	ldr	r0, [r7, #0]
 800247c:	f7fd fea4 	bl	80001c8 <strlen>
 8002480:	4603      	mov	r3, r0
 8002482:	461a      	mov	r2, r3
 8002484:	6839      	ldr	r1, [r7, #0]
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7ff fd94 	bl	8001fb4 <lwjson_parse_ex>
 800248c:	4603      	mov	r3, r0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <lwjson_free>:
 * \brief           Free token instances (specially used in case of dynamic memory allocation)
 * \param[in,out]   lwobj: LwJSON instance
 * \return          \ref lwjsonOK on success, member of \ref lwjsonr_t otherwise
 */
lwjsonr_t
lwjson_free(lwjson_t* lwobj) {
 8002496:	b580      	push	{r7, lr}
 8002498:	b082      	sub	sp, #8
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
    memset(lwobj->tokens, 0x00, sizeof(*lwobj->tokens) * lwobj->tokens_len);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6818      	ldr	r0, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	4613      	mov	r3, r2
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	4413      	add	r3, r2
 80024ac:	00db      	lsls	r3, r3, #3
 80024ae:	461a      	mov	r2, r3
 80024b0:	2100      	movs	r1, #0
 80024b2:	f004 fd3d 	bl	8006f30 <memset>
    lwobj->flags.parsed = 0;
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80024bc:	f36f 0300 	bfc	r3, #0, #1
 80024c0:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    return lwjsonOK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <lwjson_find>:
 * \param[in]       lwobj: JSON instance with parsed JSON string
 * \param[in]       path: Path with dot-separated entries to search for the JSON key to return
 * \return          Pointer to found token on success, `NULL` if token cannot be found
 */
const lwjson_token_t*
lwjson_find(lwjson_t* lwobj, const char* path) {
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b082      	sub	sp, #8
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
 80024d6:	6039      	str	r1, [r7, #0]
    if (lwobj == NULL || !lwobj->flags.parsed || path == NULL) {
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00a      	beq.n	80024f4 <lwjson_find+0x26>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d002      	beq.n	80024f4 <lwjson_find+0x26>
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d101      	bne.n	80024f8 <lwjson_find+0x2a>
        return NULL;
 80024f4:	2300      	movs	r3, #0
 80024f6:	e00b      	b.n	8002510 <lwjson_find+0x42>
    }
    return prv_find(lwjson_get_first_token(lwobj), path);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d002      	beq.n	8002504 <lwjson_find+0x36>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3310      	adds	r3, #16
 8002502:	e000      	b.n	8002506 <lwjson_find+0x38>
 8002504:	2300      	movs	r3, #0
 8002506:	6839      	ldr	r1, [r7, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff fc1c 	bl	8001d46 <prv_find>
 800250e:	4603      	mov	r3, r0
}
 8002510:	4618      	mov	r0, r3
 8002512:	3708      	adds	r7, #8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <lwjson_find_ex>:
 *                      Set to `NULL` to use root token of LwJSON object
 * \param[in]       path: path with dot-separated entries to search for JSON key
 * \return          Pointer to found token on success, `NULL` if token cannot be found
 */
const lwjson_token_t*
lwjson_find_ex(lwjson_t* lwobj, const lwjson_token_t* token, const char* path) {
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
    if (lwobj == NULL || !lwobj->flags.parsed || path == NULL) {
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00a      	beq.n	8002540 <lwjson_find_ex+0x28>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d002      	beq.n	8002540 <lwjson_find_ex+0x28>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <lwjson_find_ex+0x2c>
        return NULL;
 8002540:	2300      	movs	r3, #0
 8002542:	e01c      	b.n	800257e <lwjson_find_ex+0x66>
    }
    if (token == NULL) {
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d107      	bne.n	800255a <lwjson_find_ex+0x42>
        token = lwjson_get_first_token(lwobj);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d002      	beq.n	8002556 <lwjson_find_ex+0x3e>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	3310      	adds	r3, #16
 8002554:	e000      	b.n	8002558 <lwjson_find_ex+0x40>
 8002556:	2300      	movs	r3, #0
 8002558:	60bb      	str	r3, [r7, #8]
    }
    if (token == NULL || (token->type != LWJSON_TYPE_ARRAY && token->type != LWJSON_TYPE_OBJECT)) {
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d007      	beq.n	8002570 <lwjson_find_ex+0x58>
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	791b      	ldrb	r3, [r3, #4]
 8002564:	2b04      	cmp	r3, #4
 8002566:	d005      	beq.n	8002574 <lwjson_find_ex+0x5c>
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	791b      	ldrb	r3, [r3, #4]
 800256c:	2b03      	cmp	r3, #3
 800256e:	d001      	beq.n	8002574 <lwjson_find_ex+0x5c>
        return NULL;
 8002570:	2300      	movs	r3, #0
 8002572:	e004      	b.n	800257e <lwjson_find_ex+0x66>
    }
    return prv_find(token, path);
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	68b8      	ldr	r0, [r7, #8]
 8002578:	f7ff fbe5 	bl	8001d46 <prv_find>
 800257c:	4603      	mov	r3, r0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
	...

08002588 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800258e:	2300      	movs	r3, #0
 8002590:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002592:	4b0c      	ldr	r3, [pc, #48]	; (80025c4 <HAL_Init+0x3c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a0b      	ldr	r2, [pc, #44]	; (80025c4 <HAL_Init+0x3c>)
 8002598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800259c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800259e:	2003      	movs	r0, #3
 80025a0:	f000 f93e 	bl	8002820 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025a4:	2000      	movs	r0, #0
 80025a6:	f000 f80f 	bl	80025c8 <HAL_InitTick>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d002      	beq.n	80025b6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	71fb      	strb	r3, [r7, #7]
 80025b4:	e001      	b.n	80025ba <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80025b6:	f7fe fe01 	bl	80011bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80025ba:	79fb      	ldrb	r3, [r7, #7]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40022000 	.word	0x40022000

080025c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80025d0:	2300      	movs	r3, #0
 80025d2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80025d4:	4b17      	ldr	r3, [pc, #92]	; (8002634 <HAL_InitTick+0x6c>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d023      	beq.n	8002624 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80025dc:	4b16      	ldr	r3, [pc, #88]	; (8002638 <HAL_InitTick+0x70>)
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	4b14      	ldr	r3, [pc, #80]	; (8002634 <HAL_InitTick+0x6c>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	4619      	mov	r1, r3
 80025e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80025ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f2:	4618      	mov	r0, r3
 80025f4:	f000 f949 	bl	800288a <HAL_SYSTICK_Config>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10f      	bne.n	800261e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2b0f      	cmp	r3, #15
 8002602:	d809      	bhi.n	8002618 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002604:	2200      	movs	r2, #0
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	f04f 30ff 	mov.w	r0, #4294967295
 800260c:	f000 f913 	bl	8002836 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002610:	4a0a      	ldr	r2, [pc, #40]	; (800263c <HAL_InitTick+0x74>)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6013      	str	r3, [r2, #0]
 8002616:	e007      	b.n	8002628 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	73fb      	strb	r3, [r7, #15]
 800261c:	e004      	b.n	8002628 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	73fb      	strb	r3, [r7, #15]
 8002622:	e001      	b.n	8002628 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002628:	7bfb      	ldrb	r3, [r7, #15]
}
 800262a:	4618      	mov	r0, r3
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	20000008 	.word	0x20000008
 8002638:	20000000 	.word	0x20000000
 800263c:	20000004 	.word	0x20000004

08002640 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002644:	4b06      	ldr	r3, [pc, #24]	; (8002660 <HAL_IncTick+0x20>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	461a      	mov	r2, r3
 800264a:	4b06      	ldr	r3, [pc, #24]	; (8002664 <HAL_IncTick+0x24>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4413      	add	r3, r2
 8002650:	4a04      	ldr	r2, [pc, #16]	; (8002664 <HAL_IncTick+0x24>)
 8002652:	6013      	str	r3, [r2, #0]
}
 8002654:	bf00      	nop
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	20000008 	.word	0x20000008
 8002664:	20000f28 	.word	0x20000f28

08002668 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  return uwTick;
 800266c:	4b03      	ldr	r3, [pc, #12]	; (800267c <HAL_GetTick+0x14>)
 800266e:	681b      	ldr	r3, [r3, #0]
}
 8002670:	4618      	mov	r0, r3
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	20000f28 	.word	0x20000f28

08002680 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002690:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800269c:	4013      	ands	r3, r2
 800269e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026b2:	4a04      	ldr	r2, [pc, #16]	; (80026c4 <__NVIC_SetPriorityGrouping+0x44>)
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	60d3      	str	r3, [r2, #12]
}
 80026b8:	bf00      	nop
 80026ba:	3714      	adds	r7, #20
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	e000ed00 	.word	0xe000ed00

080026c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026cc:	4b04      	ldr	r3, [pc, #16]	; (80026e0 <__NVIC_GetPriorityGrouping+0x18>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	0a1b      	lsrs	r3, r3, #8
 80026d2:	f003 0307 	and.w	r3, r3, #7
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	e000ed00 	.word	0xe000ed00

080026e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	db0b      	blt.n	800270e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026f6:	79fb      	ldrb	r3, [r7, #7]
 80026f8:	f003 021f 	and.w	r2, r3, #31
 80026fc:	4907      	ldr	r1, [pc, #28]	; (800271c <__NVIC_EnableIRQ+0x38>)
 80026fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002702:	095b      	lsrs	r3, r3, #5
 8002704:	2001      	movs	r0, #1
 8002706:	fa00 f202 	lsl.w	r2, r0, r2
 800270a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	e000e100 	.word	0xe000e100

08002720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	6039      	str	r1, [r7, #0]
 800272a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800272c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002730:	2b00      	cmp	r3, #0
 8002732:	db0a      	blt.n	800274a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	b2da      	uxtb	r2, r3
 8002738:	490c      	ldr	r1, [pc, #48]	; (800276c <__NVIC_SetPriority+0x4c>)
 800273a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273e:	0112      	lsls	r2, r2, #4
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	440b      	add	r3, r1
 8002744:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002748:	e00a      	b.n	8002760 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	b2da      	uxtb	r2, r3
 800274e:	4908      	ldr	r1, [pc, #32]	; (8002770 <__NVIC_SetPriority+0x50>)
 8002750:	79fb      	ldrb	r3, [r7, #7]
 8002752:	f003 030f 	and.w	r3, r3, #15
 8002756:	3b04      	subs	r3, #4
 8002758:	0112      	lsls	r2, r2, #4
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	440b      	add	r3, r1
 800275e:	761a      	strb	r2, [r3, #24]
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	e000e100 	.word	0xe000e100
 8002770:	e000ed00 	.word	0xe000ed00

08002774 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002774:	b480      	push	{r7}
 8002776:	b089      	sub	sp, #36	; 0x24
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	f1c3 0307 	rsb	r3, r3, #7
 800278e:	2b04      	cmp	r3, #4
 8002790:	bf28      	it	cs
 8002792:	2304      	movcs	r3, #4
 8002794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	3304      	adds	r3, #4
 800279a:	2b06      	cmp	r3, #6
 800279c:	d902      	bls.n	80027a4 <NVIC_EncodePriority+0x30>
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	3b03      	subs	r3, #3
 80027a2:	e000      	b.n	80027a6 <NVIC_EncodePriority+0x32>
 80027a4:	2300      	movs	r3, #0
 80027a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a8:	f04f 32ff 	mov.w	r2, #4294967295
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	43da      	mvns	r2, r3
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	401a      	ands	r2, r3
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027bc:	f04f 31ff 	mov.w	r1, #4294967295
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	fa01 f303 	lsl.w	r3, r1, r3
 80027c6:	43d9      	mvns	r1, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027cc:	4313      	orrs	r3, r2
         );
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3724      	adds	r7, #36	; 0x24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
	...

080027dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3b01      	subs	r3, #1
 80027e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027ec:	d301      	bcc.n	80027f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027ee:	2301      	movs	r3, #1
 80027f0:	e00f      	b.n	8002812 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027f2:	4a0a      	ldr	r2, [pc, #40]	; (800281c <SysTick_Config+0x40>)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3b01      	subs	r3, #1
 80027f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027fa:	210f      	movs	r1, #15
 80027fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002800:	f7ff ff8e 	bl	8002720 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002804:	4b05      	ldr	r3, [pc, #20]	; (800281c <SysTick_Config+0x40>)
 8002806:	2200      	movs	r2, #0
 8002808:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800280a:	4b04      	ldr	r3, [pc, #16]	; (800281c <SysTick_Config+0x40>)
 800280c:	2207      	movs	r2, #7
 800280e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	e000e010 	.word	0xe000e010

08002820 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7ff ff29 	bl	8002680 <__NVIC_SetPriorityGrouping>
}
 800282e:	bf00      	nop
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b086      	sub	sp, #24
 800283a:	af00      	add	r7, sp, #0
 800283c:	4603      	mov	r3, r0
 800283e:	60b9      	str	r1, [r7, #8]
 8002840:	607a      	str	r2, [r7, #4]
 8002842:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002844:	2300      	movs	r3, #0
 8002846:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002848:	f7ff ff3e 	bl	80026c8 <__NVIC_GetPriorityGrouping>
 800284c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	68b9      	ldr	r1, [r7, #8]
 8002852:	6978      	ldr	r0, [r7, #20]
 8002854:	f7ff ff8e 	bl	8002774 <NVIC_EncodePriority>
 8002858:	4602      	mov	r2, r0
 800285a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800285e:	4611      	mov	r1, r2
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff ff5d 	bl	8002720 <__NVIC_SetPriority>
}
 8002866:	bf00      	nop
 8002868:	3718      	adds	r7, #24
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b082      	sub	sp, #8
 8002872:	af00      	add	r7, sp, #0
 8002874:	4603      	mov	r3, r0
 8002876:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff ff31 	bl	80026e4 <__NVIC_EnableIRQ>
}
 8002882:	bf00      	nop
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b082      	sub	sp, #8
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7ff ffa2 	bl	80027dc <SysTick_Config>
 8002898:	4603      	mov	r3, r0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
	...

080028a4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e098      	b.n	80029e8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	461a      	mov	r2, r3
 80028bc:	4b4d      	ldr	r3, [pc, #308]	; (80029f4 <HAL_DMA_Init+0x150>)
 80028be:	429a      	cmp	r2, r3
 80028c0:	d80f      	bhi.n	80028e2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	461a      	mov	r2, r3
 80028c8:	4b4b      	ldr	r3, [pc, #300]	; (80029f8 <HAL_DMA_Init+0x154>)
 80028ca:	4413      	add	r3, r2
 80028cc:	4a4b      	ldr	r2, [pc, #300]	; (80029fc <HAL_DMA_Init+0x158>)
 80028ce:	fba2 2303 	umull	r2, r3, r2, r3
 80028d2:	091b      	lsrs	r3, r3, #4
 80028d4:	009a      	lsls	r2, r3, #2
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a48      	ldr	r2, [pc, #288]	; (8002a00 <HAL_DMA_Init+0x15c>)
 80028de:	641a      	str	r2, [r3, #64]	; 0x40
 80028e0:	e00e      	b.n	8002900 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	461a      	mov	r2, r3
 80028e8:	4b46      	ldr	r3, [pc, #280]	; (8002a04 <HAL_DMA_Init+0x160>)
 80028ea:	4413      	add	r3, r2
 80028ec:	4a43      	ldr	r2, [pc, #268]	; (80029fc <HAL_DMA_Init+0x158>)
 80028ee:	fba2 2303 	umull	r2, r3, r2, r3
 80028f2:	091b      	lsrs	r3, r3, #4
 80028f4:	009a      	lsls	r2, r3, #2
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a42      	ldr	r2, [pc, #264]	; (8002a08 <HAL_DMA_Init+0x164>)
 80028fe:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2202      	movs	r2, #2
 8002904:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800291a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002924:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002930:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800293c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	4313      	orrs	r3, r2
 8002948:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800295a:	d039      	beq.n	80029d0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002960:	4a27      	ldr	r2, [pc, #156]	; (8002a00 <HAL_DMA_Init+0x15c>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d11a      	bne.n	800299c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002966:	4b29      	ldr	r3, [pc, #164]	; (8002a0c <HAL_DMA_Init+0x168>)
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296e:	f003 031c 	and.w	r3, r3, #28
 8002972:	210f      	movs	r1, #15
 8002974:	fa01 f303 	lsl.w	r3, r1, r3
 8002978:	43db      	mvns	r3, r3
 800297a:	4924      	ldr	r1, [pc, #144]	; (8002a0c <HAL_DMA_Init+0x168>)
 800297c:	4013      	ands	r3, r2
 800297e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002980:	4b22      	ldr	r3, [pc, #136]	; (8002a0c <HAL_DMA_Init+0x168>)
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6859      	ldr	r1, [r3, #4]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298c:	f003 031c 	and.w	r3, r3, #28
 8002990:	fa01 f303 	lsl.w	r3, r1, r3
 8002994:	491d      	ldr	r1, [pc, #116]	; (8002a0c <HAL_DMA_Init+0x168>)
 8002996:	4313      	orrs	r3, r2
 8002998:	600b      	str	r3, [r1, #0]
 800299a:	e019      	b.n	80029d0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800299c:	4b1c      	ldr	r3, [pc, #112]	; (8002a10 <HAL_DMA_Init+0x16c>)
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a4:	f003 031c 	and.w	r3, r3, #28
 80029a8:	210f      	movs	r1, #15
 80029aa:	fa01 f303 	lsl.w	r3, r1, r3
 80029ae:	43db      	mvns	r3, r3
 80029b0:	4917      	ldr	r1, [pc, #92]	; (8002a10 <HAL_DMA_Init+0x16c>)
 80029b2:	4013      	ands	r3, r2
 80029b4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80029b6:	4b16      	ldr	r3, [pc, #88]	; (8002a10 <HAL_DMA_Init+0x16c>)
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6859      	ldr	r1, [r3, #4]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c2:	f003 031c 	and.w	r3, r3, #28
 80029c6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ca:	4911      	ldr	r1, [pc, #68]	; (8002a10 <HAL_DMA_Init+0x16c>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3714      	adds	r7, #20
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	40020407 	.word	0x40020407
 80029f8:	bffdfff8 	.word	0xbffdfff8
 80029fc:	cccccccd 	.word	0xcccccccd
 8002a00:	40020000 	.word	0x40020000
 8002a04:	bffdfbf8 	.word	0xbffdfbf8
 8002a08:	40020400 	.word	0x40020400
 8002a0c:	400200a8 	.word	0x400200a8
 8002a10:	400204a8 	.word	0x400204a8

08002a14 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
 8002a20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d101      	bne.n	8002a34 <HAL_DMA_Start_IT+0x20>
 8002a30:	2302      	movs	r3, #2
 8002a32:	e04b      	b.n	8002acc <HAL_DMA_Start_IT+0xb8>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d13a      	bne.n	8002abe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 0201 	bic.w	r2, r2, #1
 8002a64:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	68b9      	ldr	r1, [r7, #8]
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	f000 f95f 	bl	8002d30 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d008      	beq.n	8002a8c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f042 020e 	orr.w	r2, r2, #14
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	e00f      	b.n	8002aac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f022 0204 	bic.w	r2, r2, #4
 8002a9a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f042 020a 	orr.w	r2, r2, #10
 8002aaa:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 0201 	orr.w	r2, r2, #1
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	e005      	b.n	8002aca <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002aca:	7dfb      	ldrb	r3, [r7, #23]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3718      	adds	r7, #24
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002adc:	2300      	movs	r3, #0
 8002ade:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d008      	beq.n	8002afe <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2204      	movs	r2, #4
 8002af0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e022      	b.n	8002b44 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 020e 	bic.w	r2, r2, #14
 8002b0c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 0201 	bic.w	r2, r2, #1
 8002b1c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b22:	f003 021c 	and.w	r2, r3, #28
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b30:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002b42:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d005      	beq.n	8002b74 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2204      	movs	r2, #4
 8002b6c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	73fb      	strb	r3, [r7, #15]
 8002b72:	e029      	b.n	8002bc8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 020e 	bic.w	r2, r2, #14
 8002b82:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f022 0201 	bic.w	r2, r2, #1
 8002b92:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b98:	f003 021c 	and.w	r2, r3, #28
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba0:	2101      	movs	r1, #1
 8002ba2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ba6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d003      	beq.n	8002bc8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	4798      	blx	r3
    }
  }
  return status;
 8002bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b084      	sub	sp, #16
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bee:	f003 031c 	and.w	r3, r3, #28
 8002bf2:	2204      	movs	r2, #4
 8002bf4:	409a      	lsls	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d026      	beq.n	8002c4c <HAL_DMA_IRQHandler+0x7a>
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d021      	beq.n	8002c4c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0320 	and.w	r3, r3, #32
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d107      	bne.n	8002c26 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 0204 	bic.w	r2, r2, #4
 8002c24:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2a:	f003 021c 	and.w	r2, r3, #28
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	2104      	movs	r1, #4
 8002c34:	fa01 f202 	lsl.w	r2, r1, r2
 8002c38:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d071      	beq.n	8002d26 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002c4a:	e06c      	b.n	8002d26 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c50:	f003 031c 	and.w	r3, r3, #28
 8002c54:	2202      	movs	r2, #2
 8002c56:	409a      	lsls	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d02e      	beq.n	8002cbe <HAL_DMA_IRQHandler+0xec>
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d029      	beq.n	8002cbe <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0320 	and.w	r3, r3, #32
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d10b      	bne.n	8002c90 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 020a 	bic.w	r2, r2, #10
 8002c86:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c94:	f003 021c 	and.w	r2, r3, #28
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9c:	2102      	movs	r1, #2
 8002c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d038      	beq.n	8002d26 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002cbc:	e033      	b.n	8002d26 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc2:	f003 031c 	and.w	r3, r3, #28
 8002cc6:	2208      	movs	r2, #8
 8002cc8:	409a      	lsls	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d02a      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x156>
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	f003 0308 	and.w	r3, r3, #8
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d025      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 020e 	bic.w	r2, r2, #14
 8002cea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf0:	f003 021c 	and.w	r2, r3, #28
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	fa01 f202 	lsl.w	r2, r1, r2
 8002cfe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d004      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002d26:	bf00      	nop
 8002d28:	bf00      	nop
}
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
 8002d3c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d42:	f003 021c 	and.w	r2, r3, #28
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d50:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	2b10      	cmp	r3, #16
 8002d60:	d108      	bne.n	8002d74 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68ba      	ldr	r2, [r7, #8]
 8002d70:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d72:	e007      	b.n	8002d84 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68ba      	ldr	r2, [r7, #8]
 8002d7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	60da      	str	r2, [r3, #12]
}
 8002d84:	bf00      	nop
 8002d86:	3714      	adds	r7, #20
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b087      	sub	sp, #28
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d9e:	e17f      	b.n	80030a0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	2101      	movs	r1, #1
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dac:	4013      	ands	r3, r2
 8002dae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f000 8171 	beq.w	800309a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f003 0303 	and.w	r3, r3, #3
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d005      	beq.n	8002dd0 <HAL_GPIO_Init+0x40>
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f003 0303 	and.w	r3, r3, #3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d130      	bne.n	8002e32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	2203      	movs	r2, #3
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	43db      	mvns	r3, r3
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	4013      	ands	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	68da      	ldr	r2, [r3, #12]
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e06:	2201      	movs	r2, #1
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	43db      	mvns	r3, r3
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	4013      	ands	r3, r2
 8002e14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	091b      	lsrs	r3, r3, #4
 8002e1c:	f003 0201 	and.w	r2, r3, #1
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	fa02 f303 	lsl.w	r3, r2, r3
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f003 0303 	and.w	r3, r3, #3
 8002e3a:	2b03      	cmp	r3, #3
 8002e3c:	d118      	bne.n	8002e70 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002e44:	2201      	movs	r2, #1
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	4013      	ands	r3, r2
 8002e52:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	08db      	lsrs	r3, r3, #3
 8002e5a:	f003 0201 	and.w	r2, r3, #1
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f003 0303 	and.w	r3, r3, #3
 8002e78:	2b03      	cmp	r3, #3
 8002e7a:	d017      	beq.n	8002eac <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	2203      	movs	r2, #3
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	4013      	ands	r3, r2
 8002e92:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f003 0303 	and.w	r3, r3, #3
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d123      	bne.n	8002f00 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	08da      	lsrs	r2, r3, #3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	3208      	adds	r2, #8
 8002ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	f003 0307 	and.w	r3, r3, #7
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	220f      	movs	r2, #15
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	691a      	ldr	r2, [r3, #16]
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	f003 0307 	and.w	r3, r3, #7
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	08da      	lsrs	r2, r3, #3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	3208      	adds	r2, #8
 8002efa:	6939      	ldr	r1, [r7, #16]
 8002efc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	2203      	movs	r2, #3
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	43db      	mvns	r3, r3
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	4013      	ands	r3, r2
 8002f16:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f003 0203 	and.w	r2, r3, #3
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f000 80ac 	beq.w	800309a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f42:	4b5f      	ldr	r3, [pc, #380]	; (80030c0 <HAL_GPIO_Init+0x330>)
 8002f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f46:	4a5e      	ldr	r2, [pc, #376]	; (80030c0 <HAL_GPIO_Init+0x330>)
 8002f48:	f043 0301 	orr.w	r3, r3, #1
 8002f4c:	6613      	str	r3, [r2, #96]	; 0x60
 8002f4e:	4b5c      	ldr	r3, [pc, #368]	; (80030c0 <HAL_GPIO_Init+0x330>)
 8002f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	60bb      	str	r3, [r7, #8]
 8002f58:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f5a:	4a5a      	ldr	r2, [pc, #360]	; (80030c4 <HAL_GPIO_Init+0x334>)
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	089b      	lsrs	r3, r3, #2
 8002f60:	3302      	adds	r3, #2
 8002f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f66:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	f003 0303 	and.w	r3, r3, #3
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	220f      	movs	r2, #15
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	43db      	mvns	r3, r3
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002f84:	d025      	beq.n	8002fd2 <HAL_GPIO_Init+0x242>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a4f      	ldr	r2, [pc, #316]	; (80030c8 <HAL_GPIO_Init+0x338>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d01f      	beq.n	8002fce <HAL_GPIO_Init+0x23e>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a4e      	ldr	r2, [pc, #312]	; (80030cc <HAL_GPIO_Init+0x33c>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d019      	beq.n	8002fca <HAL_GPIO_Init+0x23a>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a4d      	ldr	r2, [pc, #308]	; (80030d0 <HAL_GPIO_Init+0x340>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d013      	beq.n	8002fc6 <HAL_GPIO_Init+0x236>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a4c      	ldr	r2, [pc, #304]	; (80030d4 <HAL_GPIO_Init+0x344>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d00d      	beq.n	8002fc2 <HAL_GPIO_Init+0x232>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a4b      	ldr	r2, [pc, #300]	; (80030d8 <HAL_GPIO_Init+0x348>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d007      	beq.n	8002fbe <HAL_GPIO_Init+0x22e>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a4a      	ldr	r2, [pc, #296]	; (80030dc <HAL_GPIO_Init+0x34c>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d101      	bne.n	8002fba <HAL_GPIO_Init+0x22a>
 8002fb6:	2306      	movs	r3, #6
 8002fb8:	e00c      	b.n	8002fd4 <HAL_GPIO_Init+0x244>
 8002fba:	2307      	movs	r3, #7
 8002fbc:	e00a      	b.n	8002fd4 <HAL_GPIO_Init+0x244>
 8002fbe:	2305      	movs	r3, #5
 8002fc0:	e008      	b.n	8002fd4 <HAL_GPIO_Init+0x244>
 8002fc2:	2304      	movs	r3, #4
 8002fc4:	e006      	b.n	8002fd4 <HAL_GPIO_Init+0x244>
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e004      	b.n	8002fd4 <HAL_GPIO_Init+0x244>
 8002fca:	2302      	movs	r3, #2
 8002fcc:	e002      	b.n	8002fd4 <HAL_GPIO_Init+0x244>
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e000      	b.n	8002fd4 <HAL_GPIO_Init+0x244>
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	f002 0203 	and.w	r2, r2, #3
 8002fda:	0092      	lsls	r2, r2, #2
 8002fdc:	4093      	lsls	r3, r2
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002fe4:	4937      	ldr	r1, [pc, #220]	; (80030c4 <HAL_GPIO_Init+0x334>)
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	089b      	lsrs	r3, r3, #2
 8002fea:	3302      	adds	r3, #2
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ff2:	4b3b      	ldr	r3, [pc, #236]	; (80030e0 <HAL_GPIO_Init+0x350>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	43db      	mvns	r3, r3
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	4013      	ands	r3, r2
 8003000:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d003      	beq.n	8003016 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	4313      	orrs	r3, r2
 8003014:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003016:	4a32      	ldr	r2, [pc, #200]	; (80030e0 <HAL_GPIO_Init+0x350>)
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800301c:	4b30      	ldr	r3, [pc, #192]	; (80030e0 <HAL_GPIO_Init+0x350>)
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	43db      	mvns	r3, r3
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	4013      	ands	r3, r2
 800302a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d003      	beq.n	8003040 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	4313      	orrs	r3, r2
 800303e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003040:	4a27      	ldr	r2, [pc, #156]	; (80030e0 <HAL_GPIO_Init+0x350>)
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003046:	4b26      	ldr	r3, [pc, #152]	; (80030e0 <HAL_GPIO_Init+0x350>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	43db      	mvns	r3, r3
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	4013      	ands	r3, r2
 8003054:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d003      	beq.n	800306a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	4313      	orrs	r3, r2
 8003068:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800306a:	4a1d      	ldr	r2, [pc, #116]	; (80030e0 <HAL_GPIO_Init+0x350>)
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003070:	4b1b      	ldr	r3, [pc, #108]	; (80030e0 <HAL_GPIO_Init+0x350>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	43db      	mvns	r3, r3
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	4013      	ands	r3, r2
 800307e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d003      	beq.n	8003094 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	4313      	orrs	r3, r2
 8003092:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003094:	4a12      	ldr	r2, [pc, #72]	; (80030e0 <HAL_GPIO_Init+0x350>)
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	3301      	adds	r3, #1
 800309e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	fa22 f303 	lsr.w	r3, r2, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f47f ae78 	bne.w	8002da0 <HAL_GPIO_Init+0x10>
  }
}
 80030b0:	bf00      	nop
 80030b2:	bf00      	nop
 80030b4:	371c      	adds	r7, #28
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	40021000 	.word	0x40021000
 80030c4:	40010000 	.word	0x40010000
 80030c8:	48000400 	.word	0x48000400
 80030cc:	48000800 	.word	0x48000800
 80030d0:	48000c00 	.word	0x48000c00
 80030d4:	48001000 	.word	0x48001000
 80030d8:	48001400 	.word	0x48001400
 80030dc:	48001800 	.word	0x48001800
 80030e0:	40010400 	.word	0x40010400

080030e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	460b      	mov	r3, r1
 80030ee:	807b      	strh	r3, [r7, #2]
 80030f0:	4613      	mov	r3, r2
 80030f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030f4:	787b      	ldrb	r3, [r7, #1]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d003      	beq.n	8003102 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030fa:	887a      	ldrh	r2, [r7, #2]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003100:	e002      	b.n	8003108 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003102:	887a      	ldrh	r2, [r7, #2]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	4603      	mov	r3, r0
 800311c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800311e:	4b08      	ldr	r3, [pc, #32]	; (8003140 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003120:	695a      	ldr	r2, [r3, #20]
 8003122:	88fb      	ldrh	r3, [r7, #6]
 8003124:	4013      	ands	r3, r2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d006      	beq.n	8003138 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800312a:	4a05      	ldr	r2, [pc, #20]	; (8003140 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800312c:	88fb      	ldrh	r3, [r7, #6]
 800312e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003130:	88fb      	ldrh	r3, [r7, #6]
 8003132:	4618      	mov	r0, r3
 8003134:	f000 f806 	bl	8003144 <HAL_GPIO_EXTI_Callback>
  }
}
 8003138:	bf00      	nop
 800313a:	3708      	adds	r7, #8
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	40010400 	.word	0x40010400

08003144 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	4603      	mov	r3, r0
 800314c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
	...

0800315c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003160:	4b04      	ldr	r3, [pc, #16]	; (8003174 <HAL_PWREx_GetVoltageRange+0x18>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003168:	4618      	mov	r0, r3
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	40007000 	.word	0x40007000

08003178 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003186:	d130      	bne.n	80031ea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003188:	4b23      	ldr	r3, [pc, #140]	; (8003218 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003190:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003194:	d038      	beq.n	8003208 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003196:	4b20      	ldr	r3, [pc, #128]	; (8003218 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800319e:	4a1e      	ldr	r2, [pc, #120]	; (8003218 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031a4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031a6:	4b1d      	ldr	r3, [pc, #116]	; (800321c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2232      	movs	r2, #50	; 0x32
 80031ac:	fb02 f303 	mul.w	r3, r2, r3
 80031b0:	4a1b      	ldr	r2, [pc, #108]	; (8003220 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80031b2:	fba2 2303 	umull	r2, r3, r2, r3
 80031b6:	0c9b      	lsrs	r3, r3, #18
 80031b8:	3301      	adds	r3, #1
 80031ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031bc:	e002      	b.n	80031c4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	3b01      	subs	r3, #1
 80031c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031c4:	4b14      	ldr	r3, [pc, #80]	; (8003218 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031d0:	d102      	bne.n	80031d8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1f2      	bne.n	80031be <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031d8:	4b0f      	ldr	r3, [pc, #60]	; (8003218 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031e4:	d110      	bne.n	8003208 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e00f      	b.n	800320a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80031ea:	4b0b      	ldr	r3, [pc, #44]	; (8003218 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031f6:	d007      	beq.n	8003208 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80031f8:	4b07      	ldr	r3, [pc, #28]	; (8003218 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003200:	4a05      	ldr	r2, [pc, #20]	; (8003218 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003202:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003206:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3714      	adds	r7, #20
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	40007000 	.word	0x40007000
 800321c:	20000000 	.word	0x20000000
 8003220:	431bde83 	.word	0x431bde83

08003224 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b088      	sub	sp, #32
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e3ca      	b.n	80039cc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003236:	4b97      	ldr	r3, [pc, #604]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f003 030c 	and.w	r3, r3, #12
 800323e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003240:	4b94      	ldr	r3, [pc, #592]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	f003 0303 	and.w	r3, r3, #3
 8003248:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0310 	and.w	r3, r3, #16
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 80e4 	beq.w	8003420 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d007      	beq.n	800326e <HAL_RCC_OscConfig+0x4a>
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	2b0c      	cmp	r3, #12
 8003262:	f040 808b 	bne.w	800337c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	2b01      	cmp	r3, #1
 800326a:	f040 8087 	bne.w	800337c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800326e:	4b89      	ldr	r3, [pc, #548]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d005      	beq.n	8003286 <HAL_RCC_OscConfig+0x62>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e3a2      	b.n	80039cc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a1a      	ldr	r2, [r3, #32]
 800328a:	4b82      	ldr	r3, [pc, #520]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0308 	and.w	r3, r3, #8
 8003292:	2b00      	cmp	r3, #0
 8003294:	d004      	beq.n	80032a0 <HAL_RCC_OscConfig+0x7c>
 8003296:	4b7f      	ldr	r3, [pc, #508]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800329e:	e005      	b.n	80032ac <HAL_RCC_OscConfig+0x88>
 80032a0:	4b7c      	ldr	r3, [pc, #496]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 80032a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032a6:	091b      	lsrs	r3, r3, #4
 80032a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d223      	bcs.n	80032f8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f000 fd55 	bl	8003d64 <RCC_SetFlashLatencyFromMSIRange>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e383      	b.n	80039cc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032c4:	4b73      	ldr	r3, [pc, #460]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a72      	ldr	r2, [pc, #456]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 80032ca:	f043 0308 	orr.w	r3, r3, #8
 80032ce:	6013      	str	r3, [r2, #0]
 80032d0:	4b70      	ldr	r3, [pc, #448]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a1b      	ldr	r3, [r3, #32]
 80032dc:	496d      	ldr	r1, [pc, #436]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032e2:	4b6c      	ldr	r3, [pc, #432]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	021b      	lsls	r3, r3, #8
 80032f0:	4968      	ldr	r1, [pc, #416]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	604b      	str	r3, [r1, #4]
 80032f6:	e025      	b.n	8003344 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032f8:	4b66      	ldr	r3, [pc, #408]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a65      	ldr	r2, [pc, #404]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 80032fe:	f043 0308 	orr.w	r3, r3, #8
 8003302:	6013      	str	r3, [r2, #0]
 8003304:	4b63      	ldr	r3, [pc, #396]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	4960      	ldr	r1, [pc, #384]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 8003312:	4313      	orrs	r3, r2
 8003314:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003316:	4b5f      	ldr	r3, [pc, #380]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	021b      	lsls	r3, r3, #8
 8003324:	495b      	ldr	r1, [pc, #364]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 8003326:	4313      	orrs	r3, r2
 8003328:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d109      	bne.n	8003344 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	4618      	mov	r0, r3
 8003336:	f000 fd15 	bl	8003d64 <RCC_SetFlashLatencyFromMSIRange>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e343      	b.n	80039cc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003344:	f000 fc4a 	bl	8003bdc <HAL_RCC_GetSysClockFreq>
 8003348:	4602      	mov	r2, r0
 800334a:	4b52      	ldr	r3, [pc, #328]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	091b      	lsrs	r3, r3, #4
 8003350:	f003 030f 	and.w	r3, r3, #15
 8003354:	4950      	ldr	r1, [pc, #320]	; (8003498 <HAL_RCC_OscConfig+0x274>)
 8003356:	5ccb      	ldrb	r3, [r1, r3]
 8003358:	f003 031f 	and.w	r3, r3, #31
 800335c:	fa22 f303 	lsr.w	r3, r2, r3
 8003360:	4a4e      	ldr	r2, [pc, #312]	; (800349c <HAL_RCC_OscConfig+0x278>)
 8003362:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003364:	4b4e      	ldr	r3, [pc, #312]	; (80034a0 <HAL_RCC_OscConfig+0x27c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff f92d 	bl	80025c8 <HAL_InitTick>
 800336e:	4603      	mov	r3, r0
 8003370:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003372:	7bfb      	ldrb	r3, [r7, #15]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d052      	beq.n	800341e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003378:	7bfb      	ldrb	r3, [r7, #15]
 800337a:	e327      	b.n	80039cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d032      	beq.n	80033ea <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003384:	4b43      	ldr	r3, [pc, #268]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a42      	ldr	r2, [pc, #264]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 800338a:	f043 0301 	orr.w	r3, r3, #1
 800338e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003390:	f7ff f96a 	bl	8002668 <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003398:	f7ff f966 	bl	8002668 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e310      	b.n	80039cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033aa:	4b3a      	ldr	r3, [pc, #232]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d0f0      	beq.n	8003398 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033b6:	4b37      	ldr	r3, [pc, #220]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a36      	ldr	r2, [pc, #216]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 80033bc:	f043 0308 	orr.w	r3, r3, #8
 80033c0:	6013      	str	r3, [r2, #0]
 80033c2:	4b34      	ldr	r3, [pc, #208]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	4931      	ldr	r1, [pc, #196]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033d4:	4b2f      	ldr	r3, [pc, #188]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	69db      	ldr	r3, [r3, #28]
 80033e0:	021b      	lsls	r3, r3, #8
 80033e2:	492c      	ldr	r1, [pc, #176]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	604b      	str	r3, [r1, #4]
 80033e8:	e01a      	b.n	8003420 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80033ea:	4b2a      	ldr	r3, [pc, #168]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a29      	ldr	r2, [pc, #164]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 80033f0:	f023 0301 	bic.w	r3, r3, #1
 80033f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033f6:	f7ff f937 	bl	8002668 <HAL_GetTick>
 80033fa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80033fc:	e008      	b.n	8003410 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033fe:	f7ff f933 	bl	8002668 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d901      	bls.n	8003410 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e2dd      	b.n	80039cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003410:	4b20      	ldr	r3, [pc, #128]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1f0      	bne.n	80033fe <HAL_RCC_OscConfig+0x1da>
 800341c:	e000      	b.n	8003420 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800341e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	2b00      	cmp	r3, #0
 800342a:	d074      	beq.n	8003516 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	2b08      	cmp	r3, #8
 8003430:	d005      	beq.n	800343e <HAL_RCC_OscConfig+0x21a>
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	2b0c      	cmp	r3, #12
 8003436:	d10e      	bne.n	8003456 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	2b03      	cmp	r3, #3
 800343c:	d10b      	bne.n	8003456 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800343e:	4b15      	ldr	r3, [pc, #84]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d064      	beq.n	8003514 <HAL_RCC_OscConfig+0x2f0>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d160      	bne.n	8003514 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e2ba      	b.n	80039cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800345e:	d106      	bne.n	800346e <HAL_RCC_OscConfig+0x24a>
 8003460:	4b0c      	ldr	r3, [pc, #48]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a0b      	ldr	r2, [pc, #44]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 8003466:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800346a:	6013      	str	r3, [r2, #0]
 800346c:	e026      	b.n	80034bc <HAL_RCC_OscConfig+0x298>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003476:	d115      	bne.n	80034a4 <HAL_RCC_OscConfig+0x280>
 8003478:	4b06      	ldr	r3, [pc, #24]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a05      	ldr	r2, [pc, #20]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 800347e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003482:	6013      	str	r3, [r2, #0]
 8003484:	4b03      	ldr	r3, [pc, #12]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a02      	ldr	r2, [pc, #8]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 800348a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800348e:	6013      	str	r3, [r2, #0]
 8003490:	e014      	b.n	80034bc <HAL_RCC_OscConfig+0x298>
 8003492:	bf00      	nop
 8003494:	40021000 	.word	0x40021000
 8003498:	080070cc 	.word	0x080070cc
 800349c:	20000000 	.word	0x20000000
 80034a0:	20000004 	.word	0x20000004
 80034a4:	4ba0      	ldr	r3, [pc, #640]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a9f      	ldr	r2, [pc, #636]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 80034aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ae:	6013      	str	r3, [r2, #0]
 80034b0:	4b9d      	ldr	r3, [pc, #628]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a9c      	ldr	r2, [pc, #624]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 80034b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d013      	beq.n	80034ec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c4:	f7ff f8d0 	bl	8002668 <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034cc:	f7ff f8cc 	bl	8002668 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b64      	cmp	r3, #100	; 0x64
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e276      	b.n	80039cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034de:	4b92      	ldr	r3, [pc, #584]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d0f0      	beq.n	80034cc <HAL_RCC_OscConfig+0x2a8>
 80034ea:	e014      	b.n	8003516 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ec:	f7ff f8bc 	bl	8002668 <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034f4:	f7ff f8b8 	bl	8002668 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b64      	cmp	r3, #100	; 0x64
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e262      	b.n	80039cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003506:	4b88      	ldr	r3, [pc, #544]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1f0      	bne.n	80034f4 <HAL_RCC_OscConfig+0x2d0>
 8003512:	e000      	b.n	8003516 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003514:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d060      	beq.n	80035e4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	2b04      	cmp	r3, #4
 8003526:	d005      	beq.n	8003534 <HAL_RCC_OscConfig+0x310>
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	2b0c      	cmp	r3, #12
 800352c:	d119      	bne.n	8003562 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	2b02      	cmp	r3, #2
 8003532:	d116      	bne.n	8003562 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003534:	4b7c      	ldr	r3, [pc, #496]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800353c:	2b00      	cmp	r3, #0
 800353e:	d005      	beq.n	800354c <HAL_RCC_OscConfig+0x328>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e23f      	b.n	80039cc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800354c:	4b76      	ldr	r3, [pc, #472]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	061b      	lsls	r3, r3, #24
 800355a:	4973      	ldr	r1, [pc, #460]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 800355c:	4313      	orrs	r3, r2
 800355e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003560:	e040      	b.n	80035e4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d023      	beq.n	80035b2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800356a:	4b6f      	ldr	r3, [pc, #444]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a6e      	ldr	r2, [pc, #440]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 8003570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003574:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003576:	f7ff f877 	bl	8002668 <HAL_GetTick>
 800357a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800357c:	e008      	b.n	8003590 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800357e:	f7ff f873 	bl	8002668 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b02      	cmp	r3, #2
 800358a:	d901      	bls.n	8003590 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e21d      	b.n	80039cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003590:	4b65      	ldr	r3, [pc, #404]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003598:	2b00      	cmp	r3, #0
 800359a:	d0f0      	beq.n	800357e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800359c:	4b62      	ldr	r3, [pc, #392]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	061b      	lsls	r3, r3, #24
 80035aa:	495f      	ldr	r1, [pc, #380]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	604b      	str	r3, [r1, #4]
 80035b0:	e018      	b.n	80035e4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035b2:	4b5d      	ldr	r3, [pc, #372]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a5c      	ldr	r2, [pc, #368]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 80035b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035be:	f7ff f853 	bl	8002668 <HAL_GetTick>
 80035c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035c4:	e008      	b.n	80035d8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035c6:	f7ff f84f 	bl	8002668 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d901      	bls.n	80035d8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e1f9      	b.n	80039cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035d8:	4b53      	ldr	r3, [pc, #332]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1f0      	bne.n	80035c6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0308 	and.w	r3, r3, #8
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d03c      	beq.n	800366a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d01c      	beq.n	8003632 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035f8:	4b4b      	ldr	r3, [pc, #300]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 80035fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035fe:	4a4a      	ldr	r2, [pc, #296]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 8003600:	f043 0301 	orr.w	r3, r3, #1
 8003604:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003608:	f7ff f82e 	bl	8002668 <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003610:	f7ff f82a 	bl	8002668 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e1d4      	b.n	80039cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003622:	4b41      	ldr	r3, [pc, #260]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 8003624:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d0ef      	beq.n	8003610 <HAL_RCC_OscConfig+0x3ec>
 8003630:	e01b      	b.n	800366a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003632:	4b3d      	ldr	r3, [pc, #244]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 8003634:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003638:	4a3b      	ldr	r2, [pc, #236]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 800363a:	f023 0301 	bic.w	r3, r3, #1
 800363e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003642:	f7ff f811 	bl	8002668 <HAL_GetTick>
 8003646:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003648:	e008      	b.n	800365c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800364a:	f7ff f80d 	bl	8002668 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d901      	bls.n	800365c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e1b7      	b.n	80039cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800365c:	4b32      	ldr	r3, [pc, #200]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 800365e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1ef      	bne.n	800364a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0304 	and.w	r3, r3, #4
 8003672:	2b00      	cmp	r3, #0
 8003674:	f000 80a6 	beq.w	80037c4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003678:	2300      	movs	r3, #0
 800367a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800367c:	4b2a      	ldr	r3, [pc, #168]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 800367e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d10d      	bne.n	80036a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003688:	4b27      	ldr	r3, [pc, #156]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 800368a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800368c:	4a26      	ldr	r2, [pc, #152]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 800368e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003692:	6593      	str	r3, [r2, #88]	; 0x58
 8003694:	4b24      	ldr	r3, [pc, #144]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 8003696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800369c:	60bb      	str	r3, [r7, #8]
 800369e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036a0:	2301      	movs	r3, #1
 80036a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036a4:	4b21      	ldr	r3, [pc, #132]	; (800372c <HAL_RCC_OscConfig+0x508>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d118      	bne.n	80036e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036b0:	4b1e      	ldr	r3, [pc, #120]	; (800372c <HAL_RCC_OscConfig+0x508>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a1d      	ldr	r2, [pc, #116]	; (800372c <HAL_RCC_OscConfig+0x508>)
 80036b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036bc:	f7fe ffd4 	bl	8002668 <HAL_GetTick>
 80036c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036c4:	f7fe ffd0 	bl	8002668 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e17a      	b.n	80039cc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036d6:	4b15      	ldr	r3, [pc, #84]	; (800372c <HAL_RCC_OscConfig+0x508>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d0f0      	beq.n	80036c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d108      	bne.n	80036fc <HAL_RCC_OscConfig+0x4d8>
 80036ea:	4b0f      	ldr	r3, [pc, #60]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 80036ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f0:	4a0d      	ldr	r2, [pc, #52]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 80036f2:	f043 0301 	orr.w	r3, r3, #1
 80036f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036fa:	e029      	b.n	8003750 <HAL_RCC_OscConfig+0x52c>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	2b05      	cmp	r3, #5
 8003702:	d115      	bne.n	8003730 <HAL_RCC_OscConfig+0x50c>
 8003704:	4b08      	ldr	r3, [pc, #32]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 8003706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800370a:	4a07      	ldr	r2, [pc, #28]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 800370c:	f043 0304 	orr.w	r3, r3, #4
 8003710:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003714:	4b04      	ldr	r3, [pc, #16]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 8003716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800371a:	4a03      	ldr	r2, [pc, #12]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 800371c:	f043 0301 	orr.w	r3, r3, #1
 8003720:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003724:	e014      	b.n	8003750 <HAL_RCC_OscConfig+0x52c>
 8003726:	bf00      	nop
 8003728:	40021000 	.word	0x40021000
 800372c:	40007000 	.word	0x40007000
 8003730:	4b9c      	ldr	r3, [pc, #624]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 8003732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003736:	4a9b      	ldr	r2, [pc, #620]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 8003738:	f023 0301 	bic.w	r3, r3, #1
 800373c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003740:	4b98      	ldr	r3, [pc, #608]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 8003742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003746:	4a97      	ldr	r2, [pc, #604]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 8003748:	f023 0304 	bic.w	r3, r3, #4
 800374c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d016      	beq.n	8003786 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003758:	f7fe ff86 	bl	8002668 <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800375e:	e00a      	b.n	8003776 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003760:	f7fe ff82 	bl	8002668 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	f241 3288 	movw	r2, #5000	; 0x1388
 800376e:	4293      	cmp	r3, r2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e12a      	b.n	80039cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003776:	4b8b      	ldr	r3, [pc, #556]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 8003778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0ed      	beq.n	8003760 <HAL_RCC_OscConfig+0x53c>
 8003784:	e015      	b.n	80037b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003786:	f7fe ff6f 	bl	8002668 <HAL_GetTick>
 800378a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800378c:	e00a      	b.n	80037a4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800378e:	f7fe ff6b 	bl	8002668 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	f241 3288 	movw	r2, #5000	; 0x1388
 800379c:	4293      	cmp	r3, r2
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e113      	b.n	80039cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037a4:	4b7f      	ldr	r3, [pc, #508]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 80037a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1ed      	bne.n	800378e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037b2:	7ffb      	ldrb	r3, [r7, #31]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d105      	bne.n	80037c4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037b8:	4b7a      	ldr	r3, [pc, #488]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 80037ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037bc:	4a79      	ldr	r2, [pc, #484]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 80037be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037c2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f000 80fe 	beq.w	80039ca <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	f040 80d0 	bne.w	8003978 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80037d8:	4b72      	ldr	r3, [pc, #456]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	f003 0203 	and.w	r2, r3, #3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d130      	bne.n	800384e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	3b01      	subs	r3, #1
 80037f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d127      	bne.n	800384e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003808:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800380a:	429a      	cmp	r2, r3
 800380c:	d11f      	bne.n	800384e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003818:	2a07      	cmp	r2, #7
 800381a:	bf14      	ite	ne
 800381c:	2201      	movne	r2, #1
 800381e:	2200      	moveq	r2, #0
 8003820:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003822:	4293      	cmp	r3, r2
 8003824:	d113      	bne.n	800384e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003830:	085b      	lsrs	r3, r3, #1
 8003832:	3b01      	subs	r3, #1
 8003834:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003836:	429a      	cmp	r2, r3
 8003838:	d109      	bne.n	800384e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003844:	085b      	lsrs	r3, r3, #1
 8003846:	3b01      	subs	r3, #1
 8003848:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800384a:	429a      	cmp	r2, r3
 800384c:	d06e      	beq.n	800392c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	2b0c      	cmp	r3, #12
 8003852:	d069      	beq.n	8003928 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003854:	4b53      	ldr	r3, [pc, #332]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d105      	bne.n	800386c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003860:	4b50      	ldr	r3, [pc, #320]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e0ad      	b.n	80039cc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003870:	4b4c      	ldr	r3, [pc, #304]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a4b      	ldr	r2, [pc, #300]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 8003876:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800387a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800387c:	f7fe fef4 	bl	8002668 <HAL_GetTick>
 8003880:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003882:	e008      	b.n	8003896 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003884:	f7fe fef0 	bl	8002668 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b02      	cmp	r3, #2
 8003890:	d901      	bls.n	8003896 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e09a      	b.n	80039cc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003896:	4b43      	ldr	r3, [pc, #268]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1f0      	bne.n	8003884 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038a2:	4b40      	ldr	r3, [pc, #256]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 80038a4:	68da      	ldr	r2, [r3, #12]
 80038a6:	4b40      	ldr	r3, [pc, #256]	; (80039a8 <HAL_RCC_OscConfig+0x784>)
 80038a8:	4013      	ands	r3, r2
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80038b2:	3a01      	subs	r2, #1
 80038b4:	0112      	lsls	r2, r2, #4
 80038b6:	4311      	orrs	r1, r2
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80038bc:	0212      	lsls	r2, r2, #8
 80038be:	4311      	orrs	r1, r2
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80038c4:	0852      	lsrs	r2, r2, #1
 80038c6:	3a01      	subs	r2, #1
 80038c8:	0552      	lsls	r2, r2, #21
 80038ca:	4311      	orrs	r1, r2
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80038d0:	0852      	lsrs	r2, r2, #1
 80038d2:	3a01      	subs	r2, #1
 80038d4:	0652      	lsls	r2, r2, #25
 80038d6:	4311      	orrs	r1, r2
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038dc:	0912      	lsrs	r2, r2, #4
 80038de:	0452      	lsls	r2, r2, #17
 80038e0:	430a      	orrs	r2, r1
 80038e2:	4930      	ldr	r1, [pc, #192]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80038e8:	4b2e      	ldr	r3, [pc, #184]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a2d      	ldr	r2, [pc, #180]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 80038ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038f4:	4b2b      	ldr	r3, [pc, #172]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	4a2a      	ldr	r2, [pc, #168]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 80038fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003900:	f7fe feb2 	bl	8002668 <HAL_GetTick>
 8003904:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003906:	e008      	b.n	800391a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003908:	f7fe feae 	bl	8002668 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e058      	b.n	80039cc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800391a:	4b22      	ldr	r3, [pc, #136]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d0f0      	beq.n	8003908 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003926:	e050      	b.n	80039ca <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e04f      	b.n	80039cc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800392c:	4b1d      	ldr	r3, [pc, #116]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d148      	bne.n	80039ca <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003938:	4b1a      	ldr	r3, [pc, #104]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a19      	ldr	r2, [pc, #100]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 800393e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003942:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003944:	4b17      	ldr	r3, [pc, #92]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	4a16      	ldr	r2, [pc, #88]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 800394a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800394e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003950:	f7fe fe8a 	bl	8002668 <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003956:	e008      	b.n	800396a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003958:	f7fe fe86 	bl	8002668 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e030      	b.n	80039cc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800396a:	4b0e      	ldr	r3, [pc, #56]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d0f0      	beq.n	8003958 <HAL_RCC_OscConfig+0x734>
 8003976:	e028      	b.n	80039ca <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	2b0c      	cmp	r3, #12
 800397c:	d023      	beq.n	80039c6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800397e:	4b09      	ldr	r3, [pc, #36]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a08      	ldr	r2, [pc, #32]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 8003984:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003988:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800398a:	f7fe fe6d 	bl	8002668 <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003990:	e00c      	b.n	80039ac <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003992:	f7fe fe69 	bl	8002668 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d905      	bls.n	80039ac <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e013      	b.n	80039cc <HAL_RCC_OscConfig+0x7a8>
 80039a4:	40021000 	.word	0x40021000
 80039a8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039ac:	4b09      	ldr	r3, [pc, #36]	; (80039d4 <HAL_RCC_OscConfig+0x7b0>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1ec      	bne.n	8003992 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80039b8:	4b06      	ldr	r3, [pc, #24]	; (80039d4 <HAL_RCC_OscConfig+0x7b0>)
 80039ba:	68da      	ldr	r2, [r3, #12]
 80039bc:	4905      	ldr	r1, [pc, #20]	; (80039d4 <HAL_RCC_OscConfig+0x7b0>)
 80039be:	4b06      	ldr	r3, [pc, #24]	; (80039d8 <HAL_RCC_OscConfig+0x7b4>)
 80039c0:	4013      	ands	r3, r2
 80039c2:	60cb      	str	r3, [r1, #12]
 80039c4:	e001      	b.n	80039ca <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e000      	b.n	80039cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3720      	adds	r7, #32
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	40021000 	.word	0x40021000
 80039d8:	feeefffc 	.word	0xfeeefffc

080039dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d101      	bne.n	80039f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e0e7      	b.n	8003bc0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039f0:	4b75      	ldr	r3, [pc, #468]	; (8003bc8 <HAL_RCC_ClockConfig+0x1ec>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0307 	and.w	r3, r3, #7
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d910      	bls.n	8003a20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039fe:	4b72      	ldr	r3, [pc, #456]	; (8003bc8 <HAL_RCC_ClockConfig+0x1ec>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f023 0207 	bic.w	r2, r3, #7
 8003a06:	4970      	ldr	r1, [pc, #448]	; (8003bc8 <HAL_RCC_ClockConfig+0x1ec>)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a0e:	4b6e      	ldr	r3, [pc, #440]	; (8003bc8 <HAL_RCC_ClockConfig+0x1ec>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0307 	and.w	r3, r3, #7
 8003a16:	683a      	ldr	r2, [r7, #0]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d001      	beq.n	8003a20 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e0cf      	b.n	8003bc0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d010      	beq.n	8003a4e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689a      	ldr	r2, [r3, #8]
 8003a30:	4b66      	ldr	r3, [pc, #408]	; (8003bcc <HAL_RCC_ClockConfig+0x1f0>)
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d908      	bls.n	8003a4e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a3c:	4b63      	ldr	r3, [pc, #396]	; (8003bcc <HAL_RCC_ClockConfig+0x1f0>)
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	4960      	ldr	r1, [pc, #384]	; (8003bcc <HAL_RCC_ClockConfig+0x1f0>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d04c      	beq.n	8003af4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	2b03      	cmp	r3, #3
 8003a60:	d107      	bne.n	8003a72 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a62:	4b5a      	ldr	r3, [pc, #360]	; (8003bcc <HAL_RCC_ClockConfig+0x1f0>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d121      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e0a6      	b.n	8003bc0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d107      	bne.n	8003a8a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a7a:	4b54      	ldr	r3, [pc, #336]	; (8003bcc <HAL_RCC_ClockConfig+0x1f0>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d115      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e09a      	b.n	8003bc0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d107      	bne.n	8003aa2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a92:	4b4e      	ldr	r3, [pc, #312]	; (8003bcc <HAL_RCC_ClockConfig+0x1f0>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d109      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e08e      	b.n	8003bc0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003aa2:	4b4a      	ldr	r3, [pc, #296]	; (8003bcc <HAL_RCC_ClockConfig+0x1f0>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e086      	b.n	8003bc0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ab2:	4b46      	ldr	r3, [pc, #280]	; (8003bcc <HAL_RCC_ClockConfig+0x1f0>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f023 0203 	bic.w	r2, r3, #3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	4943      	ldr	r1, [pc, #268]	; (8003bcc <HAL_RCC_ClockConfig+0x1f0>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ac4:	f7fe fdd0 	bl	8002668 <HAL_GetTick>
 8003ac8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aca:	e00a      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003acc:	f7fe fdcc 	bl	8002668 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e06e      	b.n	8003bc0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ae2:	4b3a      	ldr	r3, [pc, #232]	; (8003bcc <HAL_RCC_ClockConfig+0x1f0>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f003 020c 	and.w	r2, r3, #12
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d1eb      	bne.n	8003acc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d010      	beq.n	8003b22 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	4b31      	ldr	r3, [pc, #196]	; (8003bcc <HAL_RCC_ClockConfig+0x1f0>)
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d208      	bcs.n	8003b22 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b10:	4b2e      	ldr	r3, [pc, #184]	; (8003bcc <HAL_RCC_ClockConfig+0x1f0>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	492b      	ldr	r1, [pc, #172]	; (8003bcc <HAL_RCC_ClockConfig+0x1f0>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b22:	4b29      	ldr	r3, [pc, #164]	; (8003bc8 <HAL_RCC_ClockConfig+0x1ec>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0307 	and.w	r3, r3, #7
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d210      	bcs.n	8003b52 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b30:	4b25      	ldr	r3, [pc, #148]	; (8003bc8 <HAL_RCC_ClockConfig+0x1ec>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f023 0207 	bic.w	r2, r3, #7
 8003b38:	4923      	ldr	r1, [pc, #140]	; (8003bc8 <HAL_RCC_ClockConfig+0x1ec>)
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b40:	4b21      	ldr	r3, [pc, #132]	; (8003bc8 <HAL_RCC_ClockConfig+0x1ec>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0307 	and.w	r3, r3, #7
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d001      	beq.n	8003b52 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e036      	b.n	8003bc0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0304 	and.w	r3, r3, #4
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d008      	beq.n	8003b70 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b5e:	4b1b      	ldr	r3, [pc, #108]	; (8003bcc <HAL_RCC_ClockConfig+0x1f0>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	4918      	ldr	r1, [pc, #96]	; (8003bcc <HAL_RCC_ClockConfig+0x1f0>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0308 	and.w	r3, r3, #8
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d009      	beq.n	8003b90 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b7c:	4b13      	ldr	r3, [pc, #76]	; (8003bcc <HAL_RCC_ClockConfig+0x1f0>)
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	00db      	lsls	r3, r3, #3
 8003b8a:	4910      	ldr	r1, [pc, #64]	; (8003bcc <HAL_RCC_ClockConfig+0x1f0>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b90:	f000 f824 	bl	8003bdc <HAL_RCC_GetSysClockFreq>
 8003b94:	4602      	mov	r2, r0
 8003b96:	4b0d      	ldr	r3, [pc, #52]	; (8003bcc <HAL_RCC_ClockConfig+0x1f0>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	091b      	lsrs	r3, r3, #4
 8003b9c:	f003 030f 	and.w	r3, r3, #15
 8003ba0:	490b      	ldr	r1, [pc, #44]	; (8003bd0 <HAL_RCC_ClockConfig+0x1f4>)
 8003ba2:	5ccb      	ldrb	r3, [r1, r3]
 8003ba4:	f003 031f 	and.w	r3, r3, #31
 8003ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8003bac:	4a09      	ldr	r2, [pc, #36]	; (8003bd4 <HAL_RCC_ClockConfig+0x1f8>)
 8003bae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003bb0:	4b09      	ldr	r3, [pc, #36]	; (8003bd8 <HAL_RCC_ClockConfig+0x1fc>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7fe fd07 	bl	80025c8 <HAL_InitTick>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	72fb      	strb	r3, [r7, #11]

  return status;
 8003bbe:	7afb      	ldrb	r3, [r7, #11]
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3710      	adds	r7, #16
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	40022000 	.word	0x40022000
 8003bcc:	40021000 	.word	0x40021000
 8003bd0:	080070cc 	.word	0x080070cc
 8003bd4:	20000000 	.word	0x20000000
 8003bd8:	20000004 	.word	0x20000004

08003bdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b089      	sub	sp, #36	; 0x24
 8003be0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003be2:	2300      	movs	r3, #0
 8003be4:	61fb      	str	r3, [r7, #28]
 8003be6:	2300      	movs	r3, #0
 8003be8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bea:	4b3e      	ldr	r3, [pc, #248]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f003 030c 	and.w	r3, r3, #12
 8003bf2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bf4:	4b3b      	ldr	r3, [pc, #236]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	f003 0303 	and.w	r3, r3, #3
 8003bfc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d005      	beq.n	8003c10 <HAL_RCC_GetSysClockFreq+0x34>
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	2b0c      	cmp	r3, #12
 8003c08:	d121      	bne.n	8003c4e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d11e      	bne.n	8003c4e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c10:	4b34      	ldr	r3, [pc, #208]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0308 	and.w	r3, r3, #8
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d107      	bne.n	8003c2c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c1c:	4b31      	ldr	r3, [pc, #196]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c22:	0a1b      	lsrs	r3, r3, #8
 8003c24:	f003 030f 	and.w	r3, r3, #15
 8003c28:	61fb      	str	r3, [r7, #28]
 8003c2a:	e005      	b.n	8003c38 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c2c:	4b2d      	ldr	r3, [pc, #180]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	091b      	lsrs	r3, r3, #4
 8003c32:	f003 030f 	and.w	r3, r3, #15
 8003c36:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003c38:	4a2b      	ldr	r2, [pc, #172]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c40:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10d      	bne.n	8003c64 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c4c:	e00a      	b.n	8003c64 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	2b04      	cmp	r3, #4
 8003c52:	d102      	bne.n	8003c5a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c54:	4b25      	ldr	r3, [pc, #148]	; (8003cec <HAL_RCC_GetSysClockFreq+0x110>)
 8003c56:	61bb      	str	r3, [r7, #24]
 8003c58:	e004      	b.n	8003c64 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	d101      	bne.n	8003c64 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c60:	4b23      	ldr	r3, [pc, #140]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c62:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	2b0c      	cmp	r3, #12
 8003c68:	d134      	bne.n	8003cd4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c6a:	4b1e      	ldr	r3, [pc, #120]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	f003 0303 	and.w	r3, r3, #3
 8003c72:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d003      	beq.n	8003c82 <HAL_RCC_GetSysClockFreq+0xa6>
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	2b03      	cmp	r3, #3
 8003c7e:	d003      	beq.n	8003c88 <HAL_RCC_GetSysClockFreq+0xac>
 8003c80:	e005      	b.n	8003c8e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003c82:	4b1a      	ldr	r3, [pc, #104]	; (8003cec <HAL_RCC_GetSysClockFreq+0x110>)
 8003c84:	617b      	str	r3, [r7, #20]
      break;
 8003c86:	e005      	b.n	8003c94 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003c88:	4b19      	ldr	r3, [pc, #100]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c8a:	617b      	str	r3, [r7, #20]
      break;
 8003c8c:	e002      	b.n	8003c94 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	617b      	str	r3, [r7, #20]
      break;
 8003c92:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c94:	4b13      	ldr	r3, [pc, #76]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	091b      	lsrs	r3, r3, #4
 8003c9a:	f003 0307 	and.w	r3, r3, #7
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003ca2:	4b10      	ldr	r3, [pc, #64]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	0a1b      	lsrs	r3, r3, #8
 8003ca8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	fb03 f202 	mul.w	r2, r3, r2
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cba:	4b0a      	ldr	r3, [pc, #40]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	0e5b      	lsrs	r3, r3, #25
 8003cc0:	f003 0303 	and.w	r3, r3, #3
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	005b      	lsls	r3, r3, #1
 8003cc8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003cd4:	69bb      	ldr	r3, [r7, #24]
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3724      	adds	r7, #36	; 0x24
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	080070e4 	.word	0x080070e4
 8003cec:	00f42400 	.word	0x00f42400
 8003cf0:	007a1200 	.word	0x007a1200

08003cf4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cf8:	4b03      	ldr	r3, [pc, #12]	; (8003d08 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	20000000 	.word	0x20000000

08003d0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003d10:	f7ff fff0 	bl	8003cf4 <HAL_RCC_GetHCLKFreq>
 8003d14:	4602      	mov	r2, r0
 8003d16:	4b06      	ldr	r3, [pc, #24]	; (8003d30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	0a1b      	lsrs	r3, r3, #8
 8003d1c:	f003 0307 	and.w	r3, r3, #7
 8003d20:	4904      	ldr	r1, [pc, #16]	; (8003d34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d22:	5ccb      	ldrb	r3, [r1, r3]
 8003d24:	f003 031f 	and.w	r3, r3, #31
 8003d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	40021000 	.word	0x40021000
 8003d34:	080070dc 	.word	0x080070dc

08003d38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003d3c:	f7ff ffda 	bl	8003cf4 <HAL_RCC_GetHCLKFreq>
 8003d40:	4602      	mov	r2, r0
 8003d42:	4b06      	ldr	r3, [pc, #24]	; (8003d5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	0adb      	lsrs	r3, r3, #11
 8003d48:	f003 0307 	and.w	r3, r3, #7
 8003d4c:	4904      	ldr	r1, [pc, #16]	; (8003d60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d4e:	5ccb      	ldrb	r3, [r1, r3]
 8003d50:	f003 031f 	and.w	r3, r3, #31
 8003d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	40021000 	.word	0x40021000
 8003d60:	080070dc 	.word	0x080070dc

08003d64 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003d70:	4b2a      	ldr	r3, [pc, #168]	; (8003e1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d003      	beq.n	8003d84 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003d7c:	f7ff f9ee 	bl	800315c <HAL_PWREx_GetVoltageRange>
 8003d80:	6178      	str	r0, [r7, #20]
 8003d82:	e014      	b.n	8003dae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d84:	4b25      	ldr	r3, [pc, #148]	; (8003e1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d88:	4a24      	ldr	r2, [pc, #144]	; (8003e1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d8e:	6593      	str	r3, [r2, #88]	; 0x58
 8003d90:	4b22      	ldr	r3, [pc, #136]	; (8003e1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d98:	60fb      	str	r3, [r7, #12]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003d9c:	f7ff f9de 	bl	800315c <HAL_PWREx_GetVoltageRange>
 8003da0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003da2:	4b1e      	ldr	r3, [pc, #120]	; (8003e1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da6:	4a1d      	ldr	r2, [pc, #116]	; (8003e1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003da8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003db4:	d10b      	bne.n	8003dce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2b80      	cmp	r3, #128	; 0x80
 8003dba:	d919      	bls.n	8003df0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2ba0      	cmp	r3, #160	; 0xa0
 8003dc0:	d902      	bls.n	8003dc8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	613b      	str	r3, [r7, #16]
 8003dc6:	e013      	b.n	8003df0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003dc8:	2301      	movs	r3, #1
 8003dca:	613b      	str	r3, [r7, #16]
 8003dcc:	e010      	b.n	8003df0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2b80      	cmp	r3, #128	; 0x80
 8003dd2:	d902      	bls.n	8003dda <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	613b      	str	r3, [r7, #16]
 8003dd8:	e00a      	b.n	8003df0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2b80      	cmp	r3, #128	; 0x80
 8003dde:	d102      	bne.n	8003de6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003de0:	2302      	movs	r3, #2
 8003de2:	613b      	str	r3, [r7, #16]
 8003de4:	e004      	b.n	8003df0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2b70      	cmp	r3, #112	; 0x70
 8003dea:	d101      	bne.n	8003df0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003dec:	2301      	movs	r3, #1
 8003dee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003df0:	4b0b      	ldr	r3, [pc, #44]	; (8003e20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f023 0207 	bic.w	r2, r3, #7
 8003df8:	4909      	ldr	r1, [pc, #36]	; (8003e20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003e00:	4b07      	ldr	r3, [pc, #28]	; (8003e20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0307 	and.w	r3, r3, #7
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d001      	beq.n	8003e12 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e000      	b.n	8003e14 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3718      	adds	r7, #24
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	40022000 	.word	0x40022000

08003e24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b086      	sub	sp, #24
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e30:	2300      	movs	r3, #0
 8003e32:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d041      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e44:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e48:	d02a      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003e4a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e4e:	d824      	bhi.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e50:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e54:	d008      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003e56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e5a:	d81e      	bhi.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00a      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003e60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e64:	d010      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003e66:	e018      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e68:	4b86      	ldr	r3, [pc, #536]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	4a85      	ldr	r2, [pc, #532]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e72:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e74:	e015      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	3304      	adds	r3, #4
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f000 fabb 	bl	80043f8 <RCCEx_PLLSAI1_Config>
 8003e82:	4603      	mov	r3, r0
 8003e84:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e86:	e00c      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	3320      	adds	r3, #32
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 fba6 	bl	80045e0 <RCCEx_PLLSAI2_Config>
 8003e94:	4603      	mov	r3, r0
 8003e96:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e98:	e003      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	74fb      	strb	r3, [r7, #19]
      break;
 8003e9e:	e000      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003ea0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ea2:	7cfb      	ldrb	r3, [r7, #19]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d10b      	bne.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ea8:	4b76      	ldr	r3, [pc, #472]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003eb6:	4973      	ldr	r1, [pc, #460]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003ebe:	e001      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec0:	7cfb      	ldrb	r3, [r7, #19]
 8003ec2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d041      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ed4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ed8:	d02a      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003eda:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ede:	d824      	bhi.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ee0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ee4:	d008      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003ee6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003eea:	d81e      	bhi.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d00a      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003ef0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ef4:	d010      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003ef6:	e018      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ef8:	4b62      	ldr	r3, [pc, #392]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	4a61      	ldr	r2, [pc, #388]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003efe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f02:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f04:	e015      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	3304      	adds	r3, #4
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f000 fa73 	bl	80043f8 <RCCEx_PLLSAI1_Config>
 8003f12:	4603      	mov	r3, r0
 8003f14:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f16:	e00c      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	3320      	adds	r3, #32
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 fb5e 	bl	80045e0 <RCCEx_PLLSAI2_Config>
 8003f24:	4603      	mov	r3, r0
 8003f26:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f28:	e003      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	74fb      	strb	r3, [r7, #19]
      break;
 8003f2e:	e000      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003f30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f32:	7cfb      	ldrb	r3, [r7, #19]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10b      	bne.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f38:	4b52      	ldr	r3, [pc, #328]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f3e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f46:	494f      	ldr	r1, [pc, #316]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003f4e:	e001      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f50:	7cfb      	ldrb	r3, [r7, #19]
 8003f52:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 80a0 	beq.w	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f62:	2300      	movs	r3, #0
 8003f64:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f66:	4b47      	ldr	r3, [pc, #284]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003f72:	2301      	movs	r3, #1
 8003f74:	e000      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003f76:	2300      	movs	r3, #0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00d      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f7c:	4b41      	ldr	r3, [pc, #260]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f80:	4a40      	ldr	r2, [pc, #256]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f86:	6593      	str	r3, [r2, #88]	; 0x58
 8003f88:	4b3e      	ldr	r3, [pc, #248]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f90:	60bb      	str	r3, [r7, #8]
 8003f92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f94:	2301      	movs	r3, #1
 8003f96:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f98:	4b3b      	ldr	r3, [pc, #236]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a3a      	ldr	r2, [pc, #232]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fa2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fa4:	f7fe fb60 	bl	8002668 <HAL_GetTick>
 8003fa8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003faa:	e009      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fac:	f7fe fb5c 	bl	8002668 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d902      	bls.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	74fb      	strb	r3, [r7, #19]
        break;
 8003fbe:	e005      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003fc0:	4b31      	ldr	r3, [pc, #196]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d0ef      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003fcc:	7cfb      	ldrb	r3, [r7, #19]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d15c      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003fd2:	4b2c      	ldr	r3, [pc, #176]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fdc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d01f      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d019      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ff0:	4b24      	ldr	r3, [pc, #144]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ffa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ffc:	4b21      	ldr	r3, [pc, #132]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004002:	4a20      	ldr	r2, [pc, #128]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004008:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800400c:	4b1d      	ldr	r3, [pc, #116]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800400e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004012:	4a1c      	ldr	r2, [pc, #112]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004014:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004018:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800401c:	4a19      	ldr	r2, [pc, #100]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b00      	cmp	r3, #0
 800402c:	d016      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800402e:	f7fe fb1b 	bl	8002668 <HAL_GetTick>
 8004032:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004034:	e00b      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004036:	f7fe fb17 	bl	8002668 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	f241 3288 	movw	r2, #5000	; 0x1388
 8004044:	4293      	cmp	r3, r2
 8004046:	d902      	bls.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	74fb      	strb	r3, [r7, #19]
            break;
 800404c:	e006      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800404e:	4b0d      	ldr	r3, [pc, #52]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d0ec      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800405c:	7cfb      	ldrb	r3, [r7, #19]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10c      	bne.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004062:	4b08      	ldr	r3, [pc, #32]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004068:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004072:	4904      	ldr	r1, [pc, #16]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004074:	4313      	orrs	r3, r2
 8004076:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800407a:	e009      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800407c:	7cfb      	ldrb	r3, [r7, #19]
 800407e:	74bb      	strb	r3, [r7, #18]
 8004080:	e006      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004082:	bf00      	nop
 8004084:	40021000 	.word	0x40021000
 8004088:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800408c:	7cfb      	ldrb	r3, [r7, #19]
 800408e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004090:	7c7b      	ldrb	r3, [r7, #17]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d105      	bne.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004096:	4b9e      	ldr	r3, [pc, #632]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800409a:	4a9d      	ldr	r2, [pc, #628]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800409c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040a0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00a      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040ae:	4b98      	ldr	r3, [pc, #608]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b4:	f023 0203 	bic.w	r2, r3, #3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040bc:	4994      	ldr	r1, [pc, #592]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00a      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040d0:	4b8f      	ldr	r3, [pc, #572]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d6:	f023 020c 	bic.w	r2, r3, #12
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040de:	498c      	ldr	r1, [pc, #560]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0304 	and.w	r3, r3, #4
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00a      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040f2:	4b87      	ldr	r3, [pc, #540]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004100:	4983      	ldr	r1, [pc, #524]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004102:	4313      	orrs	r3, r2
 8004104:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0308 	and.w	r3, r3, #8
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00a      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004114:	4b7e      	ldr	r3, [pc, #504]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800411a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004122:	497b      	ldr	r1, [pc, #492]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004124:	4313      	orrs	r3, r2
 8004126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0310 	and.w	r3, r3, #16
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00a      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004136:	4b76      	ldr	r3, [pc, #472]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800413c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004144:	4972      	ldr	r1, [pc, #456]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004146:	4313      	orrs	r3, r2
 8004148:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0320 	and.w	r3, r3, #32
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00a      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004158:	4b6d      	ldr	r3, [pc, #436]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800415a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800415e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004166:	496a      	ldr	r1, [pc, #424]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004168:	4313      	orrs	r3, r2
 800416a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00a      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800417a:	4b65      	ldr	r3, [pc, #404]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800417c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004180:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004188:	4961      	ldr	r1, [pc, #388]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800418a:	4313      	orrs	r3, r2
 800418c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00a      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800419c:	4b5c      	ldr	r3, [pc, #368]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800419e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041aa:	4959      	ldr	r1, [pc, #356]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00a      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041be:	4b54      	ldr	r3, [pc, #336]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041cc:	4950      	ldr	r1, [pc, #320]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00a      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041e0:	4b4b      	ldr	r3, [pc, #300]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ee:	4948      	ldr	r1, [pc, #288]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00a      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004202:	4b43      	ldr	r3, [pc, #268]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004208:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004210:	493f      	ldr	r1, [pc, #252]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004212:	4313      	orrs	r3, r2
 8004214:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d028      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004224:	4b3a      	ldr	r3, [pc, #232]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800422a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004232:	4937      	ldr	r1, [pc, #220]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004234:	4313      	orrs	r3, r2
 8004236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800423e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004242:	d106      	bne.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004244:	4b32      	ldr	r3, [pc, #200]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	4a31      	ldr	r2, [pc, #196]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800424a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800424e:	60d3      	str	r3, [r2, #12]
 8004250:	e011      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004256:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800425a:	d10c      	bne.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	3304      	adds	r3, #4
 8004260:	2101      	movs	r1, #1
 8004262:	4618      	mov	r0, r3
 8004264:	f000 f8c8 	bl	80043f8 <RCCEx_PLLSAI1_Config>
 8004268:	4603      	mov	r3, r0
 800426a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800426c:	7cfb      	ldrb	r3, [r7, #19]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d001      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004272:	7cfb      	ldrb	r3, [r7, #19]
 8004274:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d028      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004282:	4b23      	ldr	r3, [pc, #140]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004288:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004290:	491f      	ldr	r1, [pc, #124]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004292:	4313      	orrs	r3, r2
 8004294:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042a0:	d106      	bne.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042a2:	4b1b      	ldr	r3, [pc, #108]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	4a1a      	ldr	r2, [pc, #104]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042ac:	60d3      	str	r3, [r2, #12]
 80042ae:	e011      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042b8:	d10c      	bne.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	3304      	adds	r3, #4
 80042be:	2101      	movs	r1, #1
 80042c0:	4618      	mov	r0, r3
 80042c2:	f000 f899 	bl	80043f8 <RCCEx_PLLSAI1_Config>
 80042c6:	4603      	mov	r3, r0
 80042c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042ca:	7cfb      	ldrb	r3, [r7, #19]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d001      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80042d0:	7cfb      	ldrb	r3, [r7, #19]
 80042d2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d02b      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042e0:	4b0b      	ldr	r3, [pc, #44]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042ee:	4908      	ldr	r1, [pc, #32]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042fe:	d109      	bne.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004300:	4b03      	ldr	r3, [pc, #12]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	4a02      	ldr	r2, [pc, #8]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004306:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800430a:	60d3      	str	r3, [r2, #12]
 800430c:	e014      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800430e:	bf00      	nop
 8004310:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004318:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800431c:	d10c      	bne.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	3304      	adds	r3, #4
 8004322:	2101      	movs	r1, #1
 8004324:	4618      	mov	r0, r3
 8004326:	f000 f867 	bl	80043f8 <RCCEx_PLLSAI1_Config>
 800432a:	4603      	mov	r3, r0
 800432c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800432e:	7cfb      	ldrb	r3, [r7, #19]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004334:	7cfb      	ldrb	r3, [r7, #19]
 8004336:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d02f      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004344:	4b2b      	ldr	r3, [pc, #172]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004352:	4928      	ldr	r1, [pc, #160]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004354:	4313      	orrs	r3, r2
 8004356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800435e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004362:	d10d      	bne.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	3304      	adds	r3, #4
 8004368:	2102      	movs	r1, #2
 800436a:	4618      	mov	r0, r3
 800436c:	f000 f844 	bl	80043f8 <RCCEx_PLLSAI1_Config>
 8004370:	4603      	mov	r3, r0
 8004372:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004374:	7cfb      	ldrb	r3, [r7, #19]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d014      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800437a:	7cfb      	ldrb	r3, [r7, #19]
 800437c:	74bb      	strb	r3, [r7, #18]
 800437e:	e011      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004384:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004388:	d10c      	bne.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	3320      	adds	r3, #32
 800438e:	2102      	movs	r1, #2
 8004390:	4618      	mov	r0, r3
 8004392:	f000 f925 	bl	80045e0 <RCCEx_PLLSAI2_Config>
 8004396:	4603      	mov	r3, r0
 8004398:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800439a:	7cfb      	ldrb	r3, [r7, #19]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d001      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80043a0:	7cfb      	ldrb	r3, [r7, #19]
 80043a2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00a      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80043b0:	4b10      	ldr	r3, [pc, #64]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043be:	490d      	ldr	r1, [pc, #52]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00b      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043d2:	4b08      	ldr	r3, [pc, #32]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043e2:	4904      	ldr	r1, [pc, #16]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80043ea:	7cbb      	ldrb	r3, [r7, #18]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3718      	adds	r7, #24
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	40021000 	.word	0x40021000

080043f8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004402:	2300      	movs	r3, #0
 8004404:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004406:	4b75      	ldr	r3, [pc, #468]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	f003 0303 	and.w	r3, r3, #3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d018      	beq.n	8004444 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004412:	4b72      	ldr	r3, [pc, #456]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	f003 0203 	and.w	r2, r3, #3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	429a      	cmp	r2, r3
 8004420:	d10d      	bne.n	800443e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
       ||
 8004426:	2b00      	cmp	r3, #0
 8004428:	d009      	beq.n	800443e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800442a:	4b6c      	ldr	r3, [pc, #432]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	091b      	lsrs	r3, r3, #4
 8004430:	f003 0307 	and.w	r3, r3, #7
 8004434:	1c5a      	adds	r2, r3, #1
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
       ||
 800443a:	429a      	cmp	r2, r3
 800443c:	d047      	beq.n	80044ce <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	73fb      	strb	r3, [r7, #15]
 8004442:	e044      	b.n	80044ce <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2b03      	cmp	r3, #3
 800444a:	d018      	beq.n	800447e <RCCEx_PLLSAI1_Config+0x86>
 800444c:	2b03      	cmp	r3, #3
 800444e:	d825      	bhi.n	800449c <RCCEx_PLLSAI1_Config+0xa4>
 8004450:	2b01      	cmp	r3, #1
 8004452:	d002      	beq.n	800445a <RCCEx_PLLSAI1_Config+0x62>
 8004454:	2b02      	cmp	r3, #2
 8004456:	d009      	beq.n	800446c <RCCEx_PLLSAI1_Config+0x74>
 8004458:	e020      	b.n	800449c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800445a:	4b60      	ldr	r3, [pc, #384]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d11d      	bne.n	80044a2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800446a:	e01a      	b.n	80044a2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800446c:	4b5b      	ldr	r3, [pc, #364]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004474:	2b00      	cmp	r3, #0
 8004476:	d116      	bne.n	80044a6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800447c:	e013      	b.n	80044a6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800447e:	4b57      	ldr	r3, [pc, #348]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d10f      	bne.n	80044aa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800448a:	4b54      	ldr	r3, [pc, #336]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d109      	bne.n	80044aa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800449a:	e006      	b.n	80044aa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	73fb      	strb	r3, [r7, #15]
      break;
 80044a0:	e004      	b.n	80044ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044a2:	bf00      	nop
 80044a4:	e002      	b.n	80044ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044a6:	bf00      	nop
 80044a8:	e000      	b.n	80044ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80044ac:	7bfb      	ldrb	r3, [r7, #15]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10d      	bne.n	80044ce <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80044b2:	4b4a      	ldr	r3, [pc, #296]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6819      	ldr	r1, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	3b01      	subs	r3, #1
 80044c4:	011b      	lsls	r3, r3, #4
 80044c6:	430b      	orrs	r3, r1
 80044c8:	4944      	ldr	r1, [pc, #272]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80044ce:	7bfb      	ldrb	r3, [r7, #15]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d17d      	bne.n	80045d0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80044d4:	4b41      	ldr	r3, [pc, #260]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a40      	ldr	r2, [pc, #256]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80044da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044e0:	f7fe f8c2 	bl	8002668 <HAL_GetTick>
 80044e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044e6:	e009      	b.n	80044fc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044e8:	f7fe f8be 	bl	8002668 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d902      	bls.n	80044fc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	73fb      	strb	r3, [r7, #15]
        break;
 80044fa:	e005      	b.n	8004508 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044fc:	4b37      	ldr	r3, [pc, #220]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1ef      	bne.n	80044e8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004508:	7bfb      	ldrb	r3, [r7, #15]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d160      	bne.n	80045d0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d111      	bne.n	8004538 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004514:	4b31      	ldr	r3, [pc, #196]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800451c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	6892      	ldr	r2, [r2, #8]
 8004524:	0211      	lsls	r1, r2, #8
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	68d2      	ldr	r2, [r2, #12]
 800452a:	0912      	lsrs	r2, r2, #4
 800452c:	0452      	lsls	r2, r2, #17
 800452e:	430a      	orrs	r2, r1
 8004530:	492a      	ldr	r1, [pc, #168]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004532:	4313      	orrs	r3, r2
 8004534:	610b      	str	r3, [r1, #16]
 8004536:	e027      	b.n	8004588 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	2b01      	cmp	r3, #1
 800453c:	d112      	bne.n	8004564 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800453e:	4b27      	ldr	r3, [pc, #156]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004546:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	6892      	ldr	r2, [r2, #8]
 800454e:	0211      	lsls	r1, r2, #8
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	6912      	ldr	r2, [r2, #16]
 8004554:	0852      	lsrs	r2, r2, #1
 8004556:	3a01      	subs	r2, #1
 8004558:	0552      	lsls	r2, r2, #21
 800455a:	430a      	orrs	r2, r1
 800455c:	491f      	ldr	r1, [pc, #124]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800455e:	4313      	orrs	r3, r2
 8004560:	610b      	str	r3, [r1, #16]
 8004562:	e011      	b.n	8004588 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004564:	4b1d      	ldr	r3, [pc, #116]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800456c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	6892      	ldr	r2, [r2, #8]
 8004574:	0211      	lsls	r1, r2, #8
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	6952      	ldr	r2, [r2, #20]
 800457a:	0852      	lsrs	r2, r2, #1
 800457c:	3a01      	subs	r2, #1
 800457e:	0652      	lsls	r2, r2, #25
 8004580:	430a      	orrs	r2, r1
 8004582:	4916      	ldr	r1, [pc, #88]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004584:	4313      	orrs	r3, r2
 8004586:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004588:	4b14      	ldr	r3, [pc, #80]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a13      	ldr	r2, [pc, #76]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800458e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004592:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004594:	f7fe f868 	bl	8002668 <HAL_GetTick>
 8004598:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800459a:	e009      	b.n	80045b0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800459c:	f7fe f864 	bl	8002668 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d902      	bls.n	80045b0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	73fb      	strb	r3, [r7, #15]
          break;
 80045ae:	e005      	b.n	80045bc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045b0:	4b0a      	ldr	r3, [pc, #40]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d0ef      	beq.n	800459c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80045bc:	7bfb      	ldrb	r3, [r7, #15]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d106      	bne.n	80045d0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80045c2:	4b06      	ldr	r3, [pc, #24]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80045c4:	691a      	ldr	r2, [r3, #16]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	4904      	ldr	r1, [pc, #16]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80045d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	40021000 	.word	0x40021000

080045e0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045ea:	2300      	movs	r3, #0
 80045ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80045ee:	4b6a      	ldr	r3, [pc, #424]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f003 0303 	and.w	r3, r3, #3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d018      	beq.n	800462c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80045fa:	4b67      	ldr	r3, [pc, #412]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	f003 0203 	and.w	r2, r3, #3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	429a      	cmp	r2, r3
 8004608:	d10d      	bne.n	8004626 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
       ||
 800460e:	2b00      	cmp	r3, #0
 8004610:	d009      	beq.n	8004626 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004612:	4b61      	ldr	r3, [pc, #388]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	091b      	lsrs	r3, r3, #4
 8004618:	f003 0307 	and.w	r3, r3, #7
 800461c:	1c5a      	adds	r2, r3, #1
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
       ||
 8004622:	429a      	cmp	r2, r3
 8004624:	d047      	beq.n	80046b6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	73fb      	strb	r3, [r7, #15]
 800462a:	e044      	b.n	80046b6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2b03      	cmp	r3, #3
 8004632:	d018      	beq.n	8004666 <RCCEx_PLLSAI2_Config+0x86>
 8004634:	2b03      	cmp	r3, #3
 8004636:	d825      	bhi.n	8004684 <RCCEx_PLLSAI2_Config+0xa4>
 8004638:	2b01      	cmp	r3, #1
 800463a:	d002      	beq.n	8004642 <RCCEx_PLLSAI2_Config+0x62>
 800463c:	2b02      	cmp	r3, #2
 800463e:	d009      	beq.n	8004654 <RCCEx_PLLSAI2_Config+0x74>
 8004640:	e020      	b.n	8004684 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004642:	4b55      	ldr	r3, [pc, #340]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	2b00      	cmp	r3, #0
 800464c:	d11d      	bne.n	800468a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004652:	e01a      	b.n	800468a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004654:	4b50      	ldr	r3, [pc, #320]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800465c:	2b00      	cmp	r3, #0
 800465e:	d116      	bne.n	800468e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004664:	e013      	b.n	800468e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004666:	4b4c      	ldr	r3, [pc, #304]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d10f      	bne.n	8004692 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004672:	4b49      	ldr	r3, [pc, #292]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d109      	bne.n	8004692 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004682:	e006      	b.n	8004692 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	73fb      	strb	r3, [r7, #15]
      break;
 8004688:	e004      	b.n	8004694 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800468a:	bf00      	nop
 800468c:	e002      	b.n	8004694 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800468e:	bf00      	nop
 8004690:	e000      	b.n	8004694 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004692:	bf00      	nop
    }

    if(status == HAL_OK)
 8004694:	7bfb      	ldrb	r3, [r7, #15]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d10d      	bne.n	80046b6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800469a:	4b3f      	ldr	r3, [pc, #252]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6819      	ldr	r1, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	3b01      	subs	r3, #1
 80046ac:	011b      	lsls	r3, r3, #4
 80046ae:	430b      	orrs	r3, r1
 80046b0:	4939      	ldr	r1, [pc, #228]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80046b6:	7bfb      	ldrb	r3, [r7, #15]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d167      	bne.n	800478c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80046bc:	4b36      	ldr	r3, [pc, #216]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a35      	ldr	r2, [pc, #212]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046c8:	f7fd ffce 	bl	8002668 <HAL_GetTick>
 80046cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80046ce:	e009      	b.n	80046e4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80046d0:	f7fd ffca 	bl	8002668 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d902      	bls.n	80046e4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	73fb      	strb	r3, [r7, #15]
        break;
 80046e2:	e005      	b.n	80046f0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80046e4:	4b2c      	ldr	r3, [pc, #176]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1ef      	bne.n	80046d0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80046f0:	7bfb      	ldrb	r3, [r7, #15]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d14a      	bne.n	800478c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d111      	bne.n	8004720 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80046fc:	4b26      	ldr	r3, [pc, #152]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004704:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	6892      	ldr	r2, [r2, #8]
 800470c:	0211      	lsls	r1, r2, #8
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	68d2      	ldr	r2, [r2, #12]
 8004712:	0912      	lsrs	r2, r2, #4
 8004714:	0452      	lsls	r2, r2, #17
 8004716:	430a      	orrs	r2, r1
 8004718:	491f      	ldr	r1, [pc, #124]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 800471a:	4313      	orrs	r3, r2
 800471c:	614b      	str	r3, [r1, #20]
 800471e:	e011      	b.n	8004744 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004720:	4b1d      	ldr	r3, [pc, #116]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004722:	695b      	ldr	r3, [r3, #20]
 8004724:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004728:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	6892      	ldr	r2, [r2, #8]
 8004730:	0211      	lsls	r1, r2, #8
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	6912      	ldr	r2, [r2, #16]
 8004736:	0852      	lsrs	r2, r2, #1
 8004738:	3a01      	subs	r2, #1
 800473a:	0652      	lsls	r2, r2, #25
 800473c:	430a      	orrs	r2, r1
 800473e:	4916      	ldr	r1, [pc, #88]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004740:	4313      	orrs	r3, r2
 8004742:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004744:	4b14      	ldr	r3, [pc, #80]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a13      	ldr	r2, [pc, #76]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 800474a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800474e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004750:	f7fd ff8a 	bl	8002668 <HAL_GetTick>
 8004754:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004756:	e009      	b.n	800476c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004758:	f7fd ff86 	bl	8002668 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d902      	bls.n	800476c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	73fb      	strb	r3, [r7, #15]
          break;
 800476a:	e005      	b.n	8004778 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800476c:	4b0a      	ldr	r3, [pc, #40]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d0ef      	beq.n	8004758 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004778:	7bfb      	ldrb	r3, [r7, #15]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d106      	bne.n	800478c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800477e:	4b06      	ldr	r3, [pc, #24]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004780:	695a      	ldr	r2, [r3, #20]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	4904      	ldr	r1, [pc, #16]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004788:	4313      	orrs	r3, r2
 800478a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800478c:	7bfb      	ldrb	r3, [r7, #15]
}
 800478e:	4618      	mov	r0, r3
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	40021000 	.word	0x40021000

0800479c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e049      	b.n	8004842 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d106      	bne.n	80047c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f7fc fdd8 	bl	8001378 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2202      	movs	r2, #2
 80047cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	3304      	adds	r3, #4
 80047d8:	4619      	mov	r1, r3
 80047da:	4610      	mov	r0, r2
 80047dc:	f000 fce6 	bl	80051ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3708      	adds	r7, #8
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
	...

0800484c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2200      	movs	r2, #0
 800485c:	6839      	ldr	r1, [r7, #0]
 800485e:	4618      	mov	r0, r3
 8004860:	f001 f814 	bl	800588c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a3e      	ldr	r2, [pc, #248]	; (8004964 <HAL_TIM_PWM_Stop+0x118>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d013      	beq.n	8004896 <HAL_TIM_PWM_Stop+0x4a>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a3d      	ldr	r2, [pc, #244]	; (8004968 <HAL_TIM_PWM_Stop+0x11c>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d00e      	beq.n	8004896 <HAL_TIM_PWM_Stop+0x4a>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a3b      	ldr	r2, [pc, #236]	; (800496c <HAL_TIM_PWM_Stop+0x120>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d009      	beq.n	8004896 <HAL_TIM_PWM_Stop+0x4a>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a3a      	ldr	r2, [pc, #232]	; (8004970 <HAL_TIM_PWM_Stop+0x124>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d004      	beq.n	8004896 <HAL_TIM_PWM_Stop+0x4a>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a38      	ldr	r2, [pc, #224]	; (8004974 <HAL_TIM_PWM_Stop+0x128>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d101      	bne.n	800489a <HAL_TIM_PWM_Stop+0x4e>
 8004896:	2301      	movs	r3, #1
 8004898:	e000      	b.n	800489c <HAL_TIM_PWM_Stop+0x50>
 800489a:	2300      	movs	r3, #0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d017      	beq.n	80048d0 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6a1a      	ldr	r2, [r3, #32]
 80048a6:	f241 1311 	movw	r3, #4369	; 0x1111
 80048aa:	4013      	ands	r3, r2
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d10f      	bne.n	80048d0 <HAL_TIM_PWM_Stop+0x84>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6a1a      	ldr	r2, [r3, #32]
 80048b6:	f240 4344 	movw	r3, #1092	; 0x444
 80048ba:	4013      	ands	r3, r2
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d107      	bne.n	80048d0 <HAL_TIM_PWM_Stop+0x84>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048ce:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6a1a      	ldr	r2, [r3, #32]
 80048d6:	f241 1311 	movw	r3, #4369	; 0x1111
 80048da:	4013      	ands	r3, r2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10f      	bne.n	8004900 <HAL_TIM_PWM_Stop+0xb4>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6a1a      	ldr	r2, [r3, #32]
 80048e6:	f240 4344 	movw	r3, #1092	; 0x444
 80048ea:	4013      	ands	r3, r2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d107      	bne.n	8004900 <HAL_TIM_PWM_Stop+0xb4>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f022 0201 	bic.w	r2, r2, #1
 80048fe:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d104      	bne.n	8004910 <HAL_TIM_PWM_Stop+0xc4>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800490e:	e023      	b.n	8004958 <HAL_TIM_PWM_Stop+0x10c>
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	2b04      	cmp	r3, #4
 8004914:	d104      	bne.n	8004920 <HAL_TIM_PWM_Stop+0xd4>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800491e:	e01b      	b.n	8004958 <HAL_TIM_PWM_Stop+0x10c>
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	2b08      	cmp	r3, #8
 8004924:	d104      	bne.n	8004930 <HAL_TIM_PWM_Stop+0xe4>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800492e:	e013      	b.n	8004958 <HAL_TIM_PWM_Stop+0x10c>
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	2b0c      	cmp	r3, #12
 8004934:	d104      	bne.n	8004940 <HAL_TIM_PWM_Stop+0xf4>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800493e:	e00b      	b.n	8004958 <HAL_TIM_PWM_Stop+0x10c>
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	2b10      	cmp	r3, #16
 8004944:	d104      	bne.n	8004950 <HAL_TIM_PWM_Stop+0x104>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800494e:	e003      	b.n	8004958 <HAL_TIM_PWM_Stop+0x10c>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3708      	adds	r7, #8
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	40012c00 	.word	0x40012c00
 8004968:	40013400 	.word	0x40013400
 800496c:	40014000 	.word	0x40014000
 8004970:	40014400 	.word	0x40014400
 8004974:	40014800 	.word	0x40014800

08004978 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
 8004984:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004986:	2300      	movs	r3, #0
 8004988:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d109      	bne.n	80049a4 <HAL_TIM_PWM_Start_DMA+0x2c>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004996:	b2db      	uxtb	r3, r3
 8004998:	2b02      	cmp	r3, #2
 800499a:	bf0c      	ite	eq
 800499c:	2301      	moveq	r3, #1
 800499e:	2300      	movne	r3, #0
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	e03c      	b.n	8004a1e <HAL_TIM_PWM_Start_DMA+0xa6>
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	d109      	bne.n	80049be <HAL_TIM_PWM_Start_DMA+0x46>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	bf0c      	ite	eq
 80049b6:	2301      	moveq	r3, #1
 80049b8:	2300      	movne	r3, #0
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	e02f      	b.n	8004a1e <HAL_TIM_PWM_Start_DMA+0xa6>
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	2b08      	cmp	r3, #8
 80049c2:	d109      	bne.n	80049d8 <HAL_TIM_PWM_Start_DMA+0x60>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	bf0c      	ite	eq
 80049d0:	2301      	moveq	r3, #1
 80049d2:	2300      	movne	r3, #0
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	e022      	b.n	8004a1e <HAL_TIM_PWM_Start_DMA+0xa6>
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	2b0c      	cmp	r3, #12
 80049dc:	d109      	bne.n	80049f2 <HAL_TIM_PWM_Start_DMA+0x7a>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	bf0c      	ite	eq
 80049ea:	2301      	moveq	r3, #1
 80049ec:	2300      	movne	r3, #0
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	e015      	b.n	8004a1e <HAL_TIM_PWM_Start_DMA+0xa6>
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	2b10      	cmp	r3, #16
 80049f6:	d109      	bne.n	8004a0c <HAL_TIM_PWM_Start_DMA+0x94>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	bf0c      	ite	eq
 8004a04:	2301      	moveq	r3, #1
 8004a06:	2300      	movne	r3, #0
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	e008      	b.n	8004a1e <HAL_TIM_PWM_Start_DMA+0xa6>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	bf0c      	ite	eq
 8004a18:	2301      	moveq	r3, #1
 8004a1a:	2300      	movne	r3, #0
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d001      	beq.n	8004a26 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8004a22:	2302      	movs	r3, #2
 8004a24:	e1ab      	b.n	8004d7e <HAL_TIM_PWM_Start_DMA+0x406>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d109      	bne.n	8004a40 <HAL_TIM_PWM_Start_DMA+0xc8>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	bf0c      	ite	eq
 8004a38:	2301      	moveq	r3, #1
 8004a3a:	2300      	movne	r3, #0
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	e03c      	b.n	8004aba <HAL_TIM_PWM_Start_DMA+0x142>
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	2b04      	cmp	r3, #4
 8004a44:	d109      	bne.n	8004a5a <HAL_TIM_PWM_Start_DMA+0xe2>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	bf0c      	ite	eq
 8004a52:	2301      	moveq	r3, #1
 8004a54:	2300      	movne	r3, #0
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	e02f      	b.n	8004aba <HAL_TIM_PWM_Start_DMA+0x142>
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	2b08      	cmp	r3, #8
 8004a5e:	d109      	bne.n	8004a74 <HAL_TIM_PWM_Start_DMA+0xfc>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	bf0c      	ite	eq
 8004a6c:	2301      	moveq	r3, #1
 8004a6e:	2300      	movne	r3, #0
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	e022      	b.n	8004aba <HAL_TIM_PWM_Start_DMA+0x142>
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	2b0c      	cmp	r3, #12
 8004a78:	d109      	bne.n	8004a8e <HAL_TIM_PWM_Start_DMA+0x116>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	bf0c      	ite	eq
 8004a86:	2301      	moveq	r3, #1
 8004a88:	2300      	movne	r3, #0
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	e015      	b.n	8004aba <HAL_TIM_PWM_Start_DMA+0x142>
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	2b10      	cmp	r3, #16
 8004a92:	d109      	bne.n	8004aa8 <HAL_TIM_PWM_Start_DMA+0x130>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	bf0c      	ite	eq
 8004aa0:	2301      	moveq	r3, #1
 8004aa2:	2300      	movne	r3, #0
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	e008      	b.n	8004aba <HAL_TIM_PWM_Start_DMA+0x142>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	bf0c      	ite	eq
 8004ab4:	2301      	moveq	r3, #1
 8004ab6:	2300      	movne	r3, #0
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d034      	beq.n	8004b28 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d002      	beq.n	8004aca <HAL_TIM_PWM_Start_DMA+0x152>
 8004ac4:	887b      	ldrh	r3, [r7, #2]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e157      	b.n	8004d7e <HAL_TIM_PWM_Start_DMA+0x406>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d104      	bne.n	8004ade <HAL_TIM_PWM_Start_DMA+0x166>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2202      	movs	r2, #2
 8004ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004adc:	e026      	b.n	8004b2c <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	2b04      	cmp	r3, #4
 8004ae2:	d104      	bne.n	8004aee <HAL_TIM_PWM_Start_DMA+0x176>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004aec:	e01e      	b.n	8004b2c <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	2b08      	cmp	r3, #8
 8004af2:	d104      	bne.n	8004afe <HAL_TIM_PWM_Start_DMA+0x186>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2202      	movs	r2, #2
 8004af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004afc:	e016      	b.n	8004b2c <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	2b0c      	cmp	r3, #12
 8004b02:	d104      	bne.n	8004b0e <HAL_TIM_PWM_Start_DMA+0x196>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2202      	movs	r2, #2
 8004b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b0c:	e00e      	b.n	8004b2c <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	2b10      	cmp	r3, #16
 8004b12:	d104      	bne.n	8004b1e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2202      	movs	r2, #2
 8004b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b1c:	e006      	b.n	8004b2c <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2202      	movs	r2, #2
 8004b22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b26:	e001      	b.n	8004b2c <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e128      	b.n	8004d7e <HAL_TIM_PWM_Start_DMA+0x406>
  }

  switch (Channel)
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	2b0c      	cmp	r3, #12
 8004b30:	f200 80ae 	bhi.w	8004c90 <HAL_TIM_PWM_Start_DMA+0x318>
 8004b34:	a201      	add	r2, pc, #4	; (adr r2, 8004b3c <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8004b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b3a:	bf00      	nop
 8004b3c:	08004b71 	.word	0x08004b71
 8004b40:	08004c91 	.word	0x08004c91
 8004b44:	08004c91 	.word	0x08004c91
 8004b48:	08004c91 	.word	0x08004c91
 8004b4c:	08004bb9 	.word	0x08004bb9
 8004b50:	08004c91 	.word	0x08004c91
 8004b54:	08004c91 	.word	0x08004c91
 8004b58:	08004c91 	.word	0x08004c91
 8004b5c:	08004c01 	.word	0x08004c01
 8004b60:	08004c91 	.word	0x08004c91
 8004b64:	08004c91 	.word	0x08004c91
 8004b68:	08004c91 	.word	0x08004c91
 8004b6c:	08004c49 	.word	0x08004c49
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b74:	4a84      	ldr	r2, [pc, #528]	; (8004d88 <HAL_TIM_PWM_Start_DMA+0x410>)
 8004b76:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7c:	4a83      	ldr	r2, [pc, #524]	; (8004d8c <HAL_TIM_PWM_Start_DMA+0x414>)
 8004b7e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b84:	4a82      	ldr	r2, [pc, #520]	; (8004d90 <HAL_TIM_PWM_Start_DMA+0x418>)
 8004b86:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004b8c:	6879      	ldr	r1, [r7, #4]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	3334      	adds	r3, #52	; 0x34
 8004b94:	461a      	mov	r2, r3
 8004b96:	887b      	ldrh	r3, [r7, #2]
 8004b98:	f7fd ff3c 	bl	8002a14 <HAL_DMA_Start_IT>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d001      	beq.n	8004ba6 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e0eb      	b.n	8004d7e <HAL_TIM_PWM_Start_DMA+0x406>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68da      	ldr	r2, [r3, #12]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bb4:	60da      	str	r2, [r3, #12]
      break;
 8004bb6:	e06e      	b.n	8004c96 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bbc:	4a72      	ldr	r2, [pc, #456]	; (8004d88 <HAL_TIM_PWM_Start_DMA+0x410>)
 8004bbe:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc4:	4a71      	ldr	r2, [pc, #452]	; (8004d8c <HAL_TIM_PWM_Start_DMA+0x414>)
 8004bc6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bcc:	4a70      	ldr	r2, [pc, #448]	; (8004d90 <HAL_TIM_PWM_Start_DMA+0x418>)
 8004bce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004bd4:	6879      	ldr	r1, [r7, #4]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	3338      	adds	r3, #56	; 0x38
 8004bdc:	461a      	mov	r2, r3
 8004bde:	887b      	ldrh	r3, [r7, #2]
 8004be0:	f7fd ff18 	bl	8002a14 <HAL_DMA_Start_IT>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d001      	beq.n	8004bee <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e0c7      	b.n	8004d7e <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68da      	ldr	r2, [r3, #12]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004bfc:	60da      	str	r2, [r3, #12]
      break;
 8004bfe:	e04a      	b.n	8004c96 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c04:	4a60      	ldr	r2, [pc, #384]	; (8004d88 <HAL_TIM_PWM_Start_DMA+0x410>)
 8004c06:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0c:	4a5f      	ldr	r2, [pc, #380]	; (8004d8c <HAL_TIM_PWM_Start_DMA+0x414>)
 8004c0e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c14:	4a5e      	ldr	r2, [pc, #376]	; (8004d90 <HAL_TIM_PWM_Start_DMA+0x418>)
 8004c16:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004c1c:	6879      	ldr	r1, [r7, #4]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	333c      	adds	r3, #60	; 0x3c
 8004c24:	461a      	mov	r2, r3
 8004c26:	887b      	ldrh	r3, [r7, #2]
 8004c28:	f7fd fef4 	bl	8002a14 <HAL_DMA_Start_IT>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d001      	beq.n	8004c36 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e0a3      	b.n	8004d7e <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68da      	ldr	r2, [r3, #12]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c44:	60da      	str	r2, [r3, #12]
      break;
 8004c46:	e026      	b.n	8004c96 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4c:	4a4e      	ldr	r2, [pc, #312]	; (8004d88 <HAL_TIM_PWM_Start_DMA+0x410>)
 8004c4e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c54:	4a4d      	ldr	r2, [pc, #308]	; (8004d8c <HAL_TIM_PWM_Start_DMA+0x414>)
 8004c56:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5c:	4a4c      	ldr	r2, [pc, #304]	; (8004d90 <HAL_TIM_PWM_Start_DMA+0x418>)
 8004c5e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004c64:	6879      	ldr	r1, [r7, #4]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	3340      	adds	r3, #64	; 0x40
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	887b      	ldrh	r3, [r7, #2]
 8004c70:	f7fd fed0 	bl	8002a14 <HAL_DMA_Start_IT>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d001      	beq.n	8004c7e <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e07f      	b.n	8004d7e <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68da      	ldr	r2, [r3, #12]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c8c:	60da      	str	r2, [r3, #12]
      break;
 8004c8e:	e002      	b.n	8004c96 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	75fb      	strb	r3, [r7, #23]
      break;
 8004c94:	bf00      	nop
  }

  if (status == HAL_OK)
 8004c96:	7dfb      	ldrb	r3, [r7, #23]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d16f      	bne.n	8004d7c <HAL_TIM_PWM_Start_DMA+0x404>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	68b9      	ldr	r1, [r7, #8]
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f000 fdf1 	bl	800588c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a39      	ldr	r2, [pc, #228]	; (8004d94 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d013      	beq.n	8004cdc <HAL_TIM_PWM_Start_DMA+0x364>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a37      	ldr	r2, [pc, #220]	; (8004d98 <HAL_TIM_PWM_Start_DMA+0x420>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d00e      	beq.n	8004cdc <HAL_TIM_PWM_Start_DMA+0x364>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a36      	ldr	r2, [pc, #216]	; (8004d9c <HAL_TIM_PWM_Start_DMA+0x424>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d009      	beq.n	8004cdc <HAL_TIM_PWM_Start_DMA+0x364>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a34      	ldr	r2, [pc, #208]	; (8004da0 <HAL_TIM_PWM_Start_DMA+0x428>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d004      	beq.n	8004cdc <HAL_TIM_PWM_Start_DMA+0x364>
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a33      	ldr	r2, [pc, #204]	; (8004da4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d101      	bne.n	8004ce0 <HAL_TIM_PWM_Start_DMA+0x368>
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e000      	b.n	8004ce2 <HAL_TIM_PWM_Start_DMA+0x36a>
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d007      	beq.n	8004cf6 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cf4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a26      	ldr	r2, [pc, #152]	; (8004d94 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d01d      	beq.n	8004d3c <HAL_TIM_PWM_Start_DMA+0x3c4>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d08:	d018      	beq.n	8004d3c <HAL_TIM_PWM_Start_DMA+0x3c4>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a26      	ldr	r2, [pc, #152]	; (8004da8 <HAL_TIM_PWM_Start_DMA+0x430>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d013      	beq.n	8004d3c <HAL_TIM_PWM_Start_DMA+0x3c4>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a24      	ldr	r2, [pc, #144]	; (8004dac <HAL_TIM_PWM_Start_DMA+0x434>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d00e      	beq.n	8004d3c <HAL_TIM_PWM_Start_DMA+0x3c4>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a23      	ldr	r2, [pc, #140]	; (8004db0 <HAL_TIM_PWM_Start_DMA+0x438>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d009      	beq.n	8004d3c <HAL_TIM_PWM_Start_DMA+0x3c4>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a1a      	ldr	r2, [pc, #104]	; (8004d98 <HAL_TIM_PWM_Start_DMA+0x420>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d004      	beq.n	8004d3c <HAL_TIM_PWM_Start_DMA+0x3c4>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a19      	ldr	r2, [pc, #100]	; (8004d9c <HAL_TIM_PWM_Start_DMA+0x424>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d115      	bne.n	8004d68 <HAL_TIM_PWM_Start_DMA+0x3f0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689a      	ldr	r2, [r3, #8]
 8004d42:	4b1c      	ldr	r3, [pc, #112]	; (8004db4 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8004d44:	4013      	ands	r3, r2
 8004d46:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	2b06      	cmp	r3, #6
 8004d4c:	d015      	beq.n	8004d7a <HAL_TIM_PWM_Start_DMA+0x402>
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d54:	d011      	beq.n	8004d7a <HAL_TIM_PWM_Start_DMA+0x402>
      {
        __HAL_TIM_ENABLE(htim);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f042 0201 	orr.w	r2, r2, #1
 8004d64:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d66:	e008      	b.n	8004d7a <HAL_TIM_PWM_Start_DMA+0x402>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f042 0201 	orr.w	r2, r2, #1
 8004d76:	601a      	str	r2, [r3, #0]
 8004d78:	e000      	b.n	8004d7c <HAL_TIM_PWM_Start_DMA+0x404>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d7a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004d7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3718      	adds	r7, #24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	0800509b 	.word	0x0800509b
 8004d8c:	08005143 	.word	0x08005143
 8004d90:	08005009 	.word	0x08005009
 8004d94:	40012c00 	.word	0x40012c00
 8004d98:	40013400 	.word	0x40013400
 8004d9c:	40014000 	.word	0x40014000
 8004da0:	40014400 	.word	0x40014400
 8004da4:	40014800 	.word	0x40014800
 8004da8:	40000400 	.word	0x40000400
 8004dac:	40000800 	.word	0x40000800
 8004db0:	40000c00 	.word	0x40000c00
 8004db4:	00010007 	.word	0x00010007

08004db8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b086      	sub	sp, #24
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d101      	bne.n	8004dd6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004dd2:	2302      	movs	r3, #2
 8004dd4:	e0ff      	b.n	8004fd6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2b14      	cmp	r3, #20
 8004de2:	f200 80f0 	bhi.w	8004fc6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004de6:	a201      	add	r2, pc, #4	; (adr r2, 8004dec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dec:	08004e41 	.word	0x08004e41
 8004df0:	08004fc7 	.word	0x08004fc7
 8004df4:	08004fc7 	.word	0x08004fc7
 8004df8:	08004fc7 	.word	0x08004fc7
 8004dfc:	08004e81 	.word	0x08004e81
 8004e00:	08004fc7 	.word	0x08004fc7
 8004e04:	08004fc7 	.word	0x08004fc7
 8004e08:	08004fc7 	.word	0x08004fc7
 8004e0c:	08004ec3 	.word	0x08004ec3
 8004e10:	08004fc7 	.word	0x08004fc7
 8004e14:	08004fc7 	.word	0x08004fc7
 8004e18:	08004fc7 	.word	0x08004fc7
 8004e1c:	08004f03 	.word	0x08004f03
 8004e20:	08004fc7 	.word	0x08004fc7
 8004e24:	08004fc7 	.word	0x08004fc7
 8004e28:	08004fc7 	.word	0x08004fc7
 8004e2c:	08004f45 	.word	0x08004f45
 8004e30:	08004fc7 	.word	0x08004fc7
 8004e34:	08004fc7 	.word	0x08004fc7
 8004e38:	08004fc7 	.word	0x08004fc7
 8004e3c:	08004f85 	.word	0x08004f85
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68b9      	ldr	r1, [r7, #8]
 8004e46:	4618      	mov	r0, r3
 8004e48:	f000 fa4a 	bl	80052e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	699a      	ldr	r2, [r3, #24]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f042 0208 	orr.w	r2, r2, #8
 8004e5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	699a      	ldr	r2, [r3, #24]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f022 0204 	bic.w	r2, r2, #4
 8004e6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	6999      	ldr	r1, [r3, #24]
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	691a      	ldr	r2, [r3, #16]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	619a      	str	r2, [r3, #24]
      break;
 8004e7e:	e0a5      	b.n	8004fcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68b9      	ldr	r1, [r7, #8]
 8004e86:	4618      	mov	r0, r3
 8004e88:	f000 faba 	bl	8005400 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	699a      	ldr	r2, [r3, #24]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	699a      	ldr	r2, [r3, #24]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6999      	ldr	r1, [r3, #24]
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	021a      	lsls	r2, r3, #8
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	619a      	str	r2, [r3, #24]
      break;
 8004ec0:	e084      	b.n	8004fcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68b9      	ldr	r1, [r7, #8]
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f000 fb23 	bl	8005514 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	69da      	ldr	r2, [r3, #28]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f042 0208 	orr.w	r2, r2, #8
 8004edc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	69da      	ldr	r2, [r3, #28]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f022 0204 	bic.w	r2, r2, #4
 8004eec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	69d9      	ldr	r1, [r3, #28]
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	691a      	ldr	r2, [r3, #16]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	430a      	orrs	r2, r1
 8004efe:	61da      	str	r2, [r3, #28]
      break;
 8004f00:	e064      	b.n	8004fcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68b9      	ldr	r1, [r7, #8]
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f000 fb8b 	bl	8005624 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	69da      	ldr	r2, [r3, #28]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	69da      	ldr	r2, [r3, #28]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	69d9      	ldr	r1, [r3, #28]
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	021a      	lsls	r2, r3, #8
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	61da      	str	r2, [r3, #28]
      break;
 8004f42:	e043      	b.n	8004fcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68b9      	ldr	r1, [r7, #8]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f000 fbd4 	bl	80056f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f042 0208 	orr.w	r2, r2, #8
 8004f5e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f022 0204 	bic.w	r2, r2, #4
 8004f6e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	691a      	ldr	r2, [r3, #16]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004f82:	e023      	b.n	8004fcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68b9      	ldr	r1, [r7, #8]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 fc18 	bl	80057c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f9e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	021a      	lsls	r2, r3, #8
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004fc4:	e002      	b.n	8004fcc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	75fb      	strb	r3, [r7, #23]
      break;
 8004fca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3718      	adds	r7, #24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop

08004fe0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005014:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	429a      	cmp	r2, r3
 800501e:	d107      	bne.n	8005030 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2201      	movs	r2, #1
 8005024:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800502e:	e02a      	b.n	8005086 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	429a      	cmp	r2, r3
 8005038:	d107      	bne.n	800504a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2202      	movs	r2, #2
 800503e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005048:	e01d      	b.n	8005086 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	429a      	cmp	r2, r3
 8005052:	d107      	bne.n	8005064 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2204      	movs	r2, #4
 8005058:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005062:	e010      	b.n	8005086 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	429a      	cmp	r2, r3
 800506c:	d107      	bne.n	800507e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2208      	movs	r2, #8
 8005072:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800507c:	e003      	b.n	8005086 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2201      	movs	r2, #1
 8005082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f7ff ffb4 	bl	8004ff4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	771a      	strb	r2, [r3, #28]
}
 8005092:	bf00      	nop
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b084      	sub	sp, #16
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d10b      	bne.n	80050ca <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2201      	movs	r2, #1
 80050b6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	69db      	ldr	r3, [r3, #28]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d136      	bne.n	800512e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050c8:	e031      	b.n	800512e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d10b      	bne.n	80050ec <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2202      	movs	r2, #2
 80050d8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	69db      	ldr	r3, [r3, #28]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d125      	bne.n	800512e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2201      	movs	r2, #1
 80050e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050ea:	e020      	b.n	800512e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d10b      	bne.n	800510e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2204      	movs	r2, #4
 80050fa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	69db      	ldr	r3, [r3, #28]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d114      	bne.n	800512e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800510c:	e00f      	b.n	800512e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	429a      	cmp	r2, r3
 8005116:	d10a      	bne.n	800512e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2208      	movs	r2, #8
 800511c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d103      	bne.n	800512e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2201      	movs	r2, #1
 800512a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f7fc f82a 	bl	8001188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	771a      	strb	r2, [r3, #28]
}
 800513a:	bf00      	nop
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b084      	sub	sp, #16
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	429a      	cmp	r2, r3
 8005158:	d103      	bne.n	8005162 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2201      	movs	r2, #1
 800515e:	771a      	strb	r2, [r3, #28]
 8005160:	e019      	b.n	8005196 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	429a      	cmp	r2, r3
 800516a:	d103      	bne.n	8005174 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2202      	movs	r2, #2
 8005170:	771a      	strb	r2, [r3, #28]
 8005172:	e010      	b.n	8005196 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	429a      	cmp	r2, r3
 800517c:	d103      	bne.n	8005186 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2204      	movs	r2, #4
 8005182:	771a      	strb	r2, [r3, #28]
 8005184:	e007      	b.n	8005196 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	429a      	cmp	r2, r3
 800518e:	d102      	bne.n	8005196 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2208      	movs	r2, #8
 8005194:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	f7ff ff22 	bl	8004fe0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	771a      	strb	r2, [r3, #28]
}
 80051a2:	bf00      	nop
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
	...

080051ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a40      	ldr	r2, [pc, #256]	; (80052c0 <TIM_Base_SetConfig+0x114>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d013      	beq.n	80051ec <TIM_Base_SetConfig+0x40>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ca:	d00f      	beq.n	80051ec <TIM_Base_SetConfig+0x40>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a3d      	ldr	r2, [pc, #244]	; (80052c4 <TIM_Base_SetConfig+0x118>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d00b      	beq.n	80051ec <TIM_Base_SetConfig+0x40>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a3c      	ldr	r2, [pc, #240]	; (80052c8 <TIM_Base_SetConfig+0x11c>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d007      	beq.n	80051ec <TIM_Base_SetConfig+0x40>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a3b      	ldr	r2, [pc, #236]	; (80052cc <TIM_Base_SetConfig+0x120>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d003      	beq.n	80051ec <TIM_Base_SetConfig+0x40>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a3a      	ldr	r2, [pc, #232]	; (80052d0 <TIM_Base_SetConfig+0x124>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d108      	bne.n	80051fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a2f      	ldr	r2, [pc, #188]	; (80052c0 <TIM_Base_SetConfig+0x114>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d01f      	beq.n	8005246 <TIM_Base_SetConfig+0x9a>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800520c:	d01b      	beq.n	8005246 <TIM_Base_SetConfig+0x9a>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a2c      	ldr	r2, [pc, #176]	; (80052c4 <TIM_Base_SetConfig+0x118>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d017      	beq.n	8005246 <TIM_Base_SetConfig+0x9a>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a2b      	ldr	r2, [pc, #172]	; (80052c8 <TIM_Base_SetConfig+0x11c>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d013      	beq.n	8005246 <TIM_Base_SetConfig+0x9a>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a2a      	ldr	r2, [pc, #168]	; (80052cc <TIM_Base_SetConfig+0x120>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d00f      	beq.n	8005246 <TIM_Base_SetConfig+0x9a>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a29      	ldr	r2, [pc, #164]	; (80052d0 <TIM_Base_SetConfig+0x124>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d00b      	beq.n	8005246 <TIM_Base_SetConfig+0x9a>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a28      	ldr	r2, [pc, #160]	; (80052d4 <TIM_Base_SetConfig+0x128>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d007      	beq.n	8005246 <TIM_Base_SetConfig+0x9a>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a27      	ldr	r2, [pc, #156]	; (80052d8 <TIM_Base_SetConfig+0x12c>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d003      	beq.n	8005246 <TIM_Base_SetConfig+0x9a>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a26      	ldr	r2, [pc, #152]	; (80052dc <TIM_Base_SetConfig+0x130>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d108      	bne.n	8005258 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800524c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	4313      	orrs	r3, r2
 8005256:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	4313      	orrs	r3, r2
 8005264:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	689a      	ldr	r2, [r3, #8]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a10      	ldr	r2, [pc, #64]	; (80052c0 <TIM_Base_SetConfig+0x114>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d00f      	beq.n	80052a4 <TIM_Base_SetConfig+0xf8>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a12      	ldr	r2, [pc, #72]	; (80052d0 <TIM_Base_SetConfig+0x124>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d00b      	beq.n	80052a4 <TIM_Base_SetConfig+0xf8>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a11      	ldr	r2, [pc, #68]	; (80052d4 <TIM_Base_SetConfig+0x128>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d007      	beq.n	80052a4 <TIM_Base_SetConfig+0xf8>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a10      	ldr	r2, [pc, #64]	; (80052d8 <TIM_Base_SetConfig+0x12c>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d003      	beq.n	80052a4 <TIM_Base_SetConfig+0xf8>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a0f      	ldr	r2, [pc, #60]	; (80052dc <TIM_Base_SetConfig+0x130>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d103      	bne.n	80052ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	691a      	ldr	r2, [r3, #16]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	615a      	str	r2, [r3, #20]
}
 80052b2:	bf00      	nop
 80052b4:	3714      	adds	r7, #20
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	40012c00 	.word	0x40012c00
 80052c4:	40000400 	.word	0x40000400
 80052c8:	40000800 	.word	0x40000800
 80052cc:	40000c00 	.word	0x40000c00
 80052d0:	40013400 	.word	0x40013400
 80052d4:	40014000 	.word	0x40014000
 80052d8:	40014400 	.word	0x40014400
 80052dc:	40014800 	.word	0x40014800

080052e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b087      	sub	sp, #28
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	f023 0201 	bic.w	r2, r3, #1
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800530e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f023 0303 	bic.w	r3, r3, #3
 800531a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	4313      	orrs	r3, r2
 8005324:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	f023 0302 	bic.w	r3, r3, #2
 800532c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	697a      	ldr	r2, [r7, #20]
 8005334:	4313      	orrs	r3, r2
 8005336:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a2c      	ldr	r2, [pc, #176]	; (80053ec <TIM_OC1_SetConfig+0x10c>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d00f      	beq.n	8005360 <TIM_OC1_SetConfig+0x80>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a2b      	ldr	r2, [pc, #172]	; (80053f0 <TIM_OC1_SetConfig+0x110>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d00b      	beq.n	8005360 <TIM_OC1_SetConfig+0x80>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a2a      	ldr	r2, [pc, #168]	; (80053f4 <TIM_OC1_SetConfig+0x114>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d007      	beq.n	8005360 <TIM_OC1_SetConfig+0x80>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a29      	ldr	r2, [pc, #164]	; (80053f8 <TIM_OC1_SetConfig+0x118>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d003      	beq.n	8005360 <TIM_OC1_SetConfig+0x80>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a28      	ldr	r2, [pc, #160]	; (80053fc <TIM_OC1_SetConfig+0x11c>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d10c      	bne.n	800537a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	f023 0308 	bic.w	r3, r3, #8
 8005366:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	697a      	ldr	r2, [r7, #20]
 800536e:	4313      	orrs	r3, r2
 8005370:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	f023 0304 	bic.w	r3, r3, #4
 8005378:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a1b      	ldr	r2, [pc, #108]	; (80053ec <TIM_OC1_SetConfig+0x10c>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d00f      	beq.n	80053a2 <TIM_OC1_SetConfig+0xc2>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a1a      	ldr	r2, [pc, #104]	; (80053f0 <TIM_OC1_SetConfig+0x110>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d00b      	beq.n	80053a2 <TIM_OC1_SetConfig+0xc2>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a19      	ldr	r2, [pc, #100]	; (80053f4 <TIM_OC1_SetConfig+0x114>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d007      	beq.n	80053a2 <TIM_OC1_SetConfig+0xc2>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a18      	ldr	r2, [pc, #96]	; (80053f8 <TIM_OC1_SetConfig+0x118>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d003      	beq.n	80053a2 <TIM_OC1_SetConfig+0xc2>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a17      	ldr	r2, [pc, #92]	; (80053fc <TIM_OC1_SetConfig+0x11c>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d111      	bne.n	80053c6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	693a      	ldr	r2, [r7, #16]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	693a      	ldr	r2, [r7, #16]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	685a      	ldr	r2, [r3, #4]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	697a      	ldr	r2, [r7, #20]
 80053de:	621a      	str	r2, [r3, #32]
}
 80053e0:	bf00      	nop
 80053e2:	371c      	adds	r7, #28
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr
 80053ec:	40012c00 	.word	0x40012c00
 80053f0:	40013400 	.word	0x40013400
 80053f4:	40014000 	.word	0x40014000
 80053f8:	40014400 	.word	0x40014400
 80053fc:	40014800 	.word	0x40014800

08005400 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005400:	b480      	push	{r7}
 8005402:	b087      	sub	sp, #28
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	f023 0210 	bic.w	r2, r3, #16
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800542e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800543a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	021b      	lsls	r3, r3, #8
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	4313      	orrs	r3, r2
 8005446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	f023 0320 	bic.w	r3, r3, #32
 800544e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	011b      	lsls	r3, r3, #4
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	4313      	orrs	r3, r2
 800545a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a28      	ldr	r2, [pc, #160]	; (8005500 <TIM_OC2_SetConfig+0x100>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d003      	beq.n	800546c <TIM_OC2_SetConfig+0x6c>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a27      	ldr	r2, [pc, #156]	; (8005504 <TIM_OC2_SetConfig+0x104>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d10d      	bne.n	8005488 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005472:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	011b      	lsls	r3, r3, #4
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	4313      	orrs	r3, r2
 800547e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005486:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a1d      	ldr	r2, [pc, #116]	; (8005500 <TIM_OC2_SetConfig+0x100>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d00f      	beq.n	80054b0 <TIM_OC2_SetConfig+0xb0>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a1c      	ldr	r2, [pc, #112]	; (8005504 <TIM_OC2_SetConfig+0x104>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d00b      	beq.n	80054b0 <TIM_OC2_SetConfig+0xb0>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a1b      	ldr	r2, [pc, #108]	; (8005508 <TIM_OC2_SetConfig+0x108>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d007      	beq.n	80054b0 <TIM_OC2_SetConfig+0xb0>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a1a      	ldr	r2, [pc, #104]	; (800550c <TIM_OC2_SetConfig+0x10c>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d003      	beq.n	80054b0 <TIM_OC2_SetConfig+0xb0>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a19      	ldr	r2, [pc, #100]	; (8005510 <TIM_OC2_SetConfig+0x110>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d113      	bne.n	80054d8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	695b      	ldr	r3, [r3, #20]
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	699b      	ldr	r3, [r3, #24]
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	693a      	ldr	r2, [r7, #16]
 80054dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	68fa      	ldr	r2, [r7, #12]
 80054e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	685a      	ldr	r2, [r3, #4]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	621a      	str	r2, [r3, #32]
}
 80054f2:	bf00      	nop
 80054f4:	371c      	adds	r7, #28
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	40012c00 	.word	0x40012c00
 8005504:	40013400 	.word	0x40013400
 8005508:	40014000 	.word	0x40014000
 800550c:	40014400 	.word	0x40014400
 8005510:	40014800 	.word	0x40014800

08005514 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005514:	b480      	push	{r7}
 8005516:	b087      	sub	sp, #28
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	69db      	ldr	r3, [r3, #28]
 800553a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f023 0303 	bic.w	r3, r3, #3
 800554e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	4313      	orrs	r3, r2
 8005558:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005560:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	021b      	lsls	r3, r3, #8
 8005568:	697a      	ldr	r2, [r7, #20]
 800556a:	4313      	orrs	r3, r2
 800556c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a27      	ldr	r2, [pc, #156]	; (8005610 <TIM_OC3_SetConfig+0xfc>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d003      	beq.n	800557e <TIM_OC3_SetConfig+0x6a>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a26      	ldr	r2, [pc, #152]	; (8005614 <TIM_OC3_SetConfig+0x100>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d10d      	bne.n	800559a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005584:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	021b      	lsls	r3, r3, #8
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	4313      	orrs	r3, r2
 8005590:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005598:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a1c      	ldr	r2, [pc, #112]	; (8005610 <TIM_OC3_SetConfig+0xfc>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d00f      	beq.n	80055c2 <TIM_OC3_SetConfig+0xae>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a1b      	ldr	r2, [pc, #108]	; (8005614 <TIM_OC3_SetConfig+0x100>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d00b      	beq.n	80055c2 <TIM_OC3_SetConfig+0xae>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a1a      	ldr	r2, [pc, #104]	; (8005618 <TIM_OC3_SetConfig+0x104>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d007      	beq.n	80055c2 <TIM_OC3_SetConfig+0xae>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a19      	ldr	r2, [pc, #100]	; (800561c <TIM_OC3_SetConfig+0x108>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d003      	beq.n	80055c2 <TIM_OC3_SetConfig+0xae>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a18      	ldr	r2, [pc, #96]	; (8005620 <TIM_OC3_SetConfig+0x10c>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d113      	bne.n	80055ea <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	695b      	ldr	r3, [r3, #20]
 80055d6:	011b      	lsls	r3, r3, #4
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	4313      	orrs	r3, r2
 80055dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	011b      	lsls	r3, r3, #4
 80055e4:	693a      	ldr	r2, [r7, #16]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	685a      	ldr	r2, [r3, #4]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	621a      	str	r2, [r3, #32]
}
 8005604:	bf00      	nop
 8005606:	371c      	adds	r7, #28
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr
 8005610:	40012c00 	.word	0x40012c00
 8005614:	40013400 	.word	0x40013400
 8005618:	40014000 	.word	0x40014000
 800561c:	40014400 	.word	0x40014400
 8005620:	40014800 	.word	0x40014800

08005624 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005624:	b480      	push	{r7}
 8005626:	b087      	sub	sp, #28
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a1b      	ldr	r3, [r3, #32]
 8005632:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a1b      	ldr	r3, [r3, #32]
 800563e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	69db      	ldr	r3, [r3, #28]
 800564a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005652:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800565e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	021b      	lsls	r3, r3, #8
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	4313      	orrs	r3, r2
 800566a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005672:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	031b      	lsls	r3, r3, #12
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	4313      	orrs	r3, r2
 800567e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a18      	ldr	r2, [pc, #96]	; (80056e4 <TIM_OC4_SetConfig+0xc0>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d00f      	beq.n	80056a8 <TIM_OC4_SetConfig+0x84>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a17      	ldr	r2, [pc, #92]	; (80056e8 <TIM_OC4_SetConfig+0xc4>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d00b      	beq.n	80056a8 <TIM_OC4_SetConfig+0x84>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a16      	ldr	r2, [pc, #88]	; (80056ec <TIM_OC4_SetConfig+0xc8>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d007      	beq.n	80056a8 <TIM_OC4_SetConfig+0x84>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a15      	ldr	r2, [pc, #84]	; (80056f0 <TIM_OC4_SetConfig+0xcc>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d003      	beq.n	80056a8 <TIM_OC4_SetConfig+0x84>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a14      	ldr	r2, [pc, #80]	; (80056f4 <TIM_OC4_SetConfig+0xd0>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d109      	bne.n	80056bc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	695b      	ldr	r3, [r3, #20]
 80056b4:	019b      	lsls	r3, r3, #6
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	685a      	ldr	r2, [r3, #4]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	693a      	ldr	r2, [r7, #16]
 80056d4:	621a      	str	r2, [r3, #32]
}
 80056d6:	bf00      	nop
 80056d8:	371c      	adds	r7, #28
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	40012c00 	.word	0x40012c00
 80056e8:	40013400 	.word	0x40013400
 80056ec:	40014000 	.word	0x40014000
 80056f0:	40014400 	.word	0x40014400
 80056f4:	40014800 	.word	0x40014800

080056f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b087      	sub	sp, #28
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a1b      	ldr	r3, [r3, #32]
 8005706:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800571e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800572a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	4313      	orrs	r3, r2
 8005734:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800573c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	041b      	lsls	r3, r3, #16
 8005744:	693a      	ldr	r2, [r7, #16]
 8005746:	4313      	orrs	r3, r2
 8005748:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a17      	ldr	r2, [pc, #92]	; (80057ac <TIM_OC5_SetConfig+0xb4>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d00f      	beq.n	8005772 <TIM_OC5_SetConfig+0x7a>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a16      	ldr	r2, [pc, #88]	; (80057b0 <TIM_OC5_SetConfig+0xb8>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d00b      	beq.n	8005772 <TIM_OC5_SetConfig+0x7a>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a15      	ldr	r2, [pc, #84]	; (80057b4 <TIM_OC5_SetConfig+0xbc>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d007      	beq.n	8005772 <TIM_OC5_SetConfig+0x7a>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a14      	ldr	r2, [pc, #80]	; (80057b8 <TIM_OC5_SetConfig+0xc0>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d003      	beq.n	8005772 <TIM_OC5_SetConfig+0x7a>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a13      	ldr	r2, [pc, #76]	; (80057bc <TIM_OC5_SetConfig+0xc4>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d109      	bne.n	8005786 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005778:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	021b      	lsls	r3, r3, #8
 8005780:	697a      	ldr	r2, [r7, #20]
 8005782:	4313      	orrs	r3, r2
 8005784:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	685a      	ldr	r2, [r3, #4]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	621a      	str	r2, [r3, #32]
}
 80057a0:	bf00      	nop
 80057a2:	371c      	adds	r7, #28
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr
 80057ac:	40012c00 	.word	0x40012c00
 80057b0:	40013400 	.word	0x40013400
 80057b4:	40014000 	.word	0x40014000
 80057b8:	40014400 	.word	0x40014400
 80057bc:	40014800 	.word	0x40014800

080057c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b087      	sub	sp, #28
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	021b      	lsls	r3, r3, #8
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005806:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	051b      	lsls	r3, r3, #20
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	4313      	orrs	r3, r2
 8005812:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a18      	ldr	r2, [pc, #96]	; (8005878 <TIM_OC6_SetConfig+0xb8>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d00f      	beq.n	800583c <TIM_OC6_SetConfig+0x7c>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a17      	ldr	r2, [pc, #92]	; (800587c <TIM_OC6_SetConfig+0xbc>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d00b      	beq.n	800583c <TIM_OC6_SetConfig+0x7c>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a16      	ldr	r2, [pc, #88]	; (8005880 <TIM_OC6_SetConfig+0xc0>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d007      	beq.n	800583c <TIM_OC6_SetConfig+0x7c>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a15      	ldr	r2, [pc, #84]	; (8005884 <TIM_OC6_SetConfig+0xc4>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d003      	beq.n	800583c <TIM_OC6_SetConfig+0x7c>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a14      	ldr	r2, [pc, #80]	; (8005888 <TIM_OC6_SetConfig+0xc8>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d109      	bne.n	8005850 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005842:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	695b      	ldr	r3, [r3, #20]
 8005848:	029b      	lsls	r3, r3, #10
 800584a:	697a      	ldr	r2, [r7, #20]
 800584c:	4313      	orrs	r3, r2
 800584e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	685a      	ldr	r2, [r3, #4]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	621a      	str	r2, [r3, #32]
}
 800586a:	bf00      	nop
 800586c:	371c      	adds	r7, #28
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	40012c00 	.word	0x40012c00
 800587c:	40013400 	.word	0x40013400
 8005880:	40014000 	.word	0x40014000
 8005884:	40014400 	.word	0x40014400
 8005888:	40014800 	.word	0x40014800

0800588c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800588c:	b480      	push	{r7}
 800588e:	b087      	sub	sp, #28
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	f003 031f 	and.w	r3, r3, #31
 800589e:	2201      	movs	r2, #1
 80058a0:	fa02 f303 	lsl.w	r3, r2, r3
 80058a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6a1a      	ldr	r2, [r3, #32]
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	43db      	mvns	r3, r3
 80058ae:	401a      	ands	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6a1a      	ldr	r2, [r3, #32]
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	f003 031f 	and.w	r3, r3, #31
 80058be:	6879      	ldr	r1, [r7, #4]
 80058c0:	fa01 f303 	lsl.w	r3, r1, r3
 80058c4:	431a      	orrs	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	621a      	str	r2, [r3, #32]
}
 80058ca:	bf00      	nop
 80058cc:	371c      	adds	r7, #28
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
	...

080058d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058d8:	b480      	push	{r7}
 80058da:	b085      	sub	sp, #20
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d101      	bne.n	80058f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058ec:	2302      	movs	r3, #2
 80058ee:	e068      	b.n	80059c2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2202      	movs	r2, #2
 80058fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a2e      	ldr	r2, [pc, #184]	; (80059d0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d004      	beq.n	8005924 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a2d      	ldr	r2, [pc, #180]	; (80059d4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d108      	bne.n	8005936 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800592a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	4313      	orrs	r3, r2
 8005934:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800593c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	4313      	orrs	r3, r2
 8005946:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a1e      	ldr	r2, [pc, #120]	; (80059d0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d01d      	beq.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005962:	d018      	beq.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a1b      	ldr	r2, [pc, #108]	; (80059d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d013      	beq.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a1a      	ldr	r2, [pc, #104]	; (80059dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d00e      	beq.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a18      	ldr	r2, [pc, #96]	; (80059e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d009      	beq.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a13      	ldr	r2, [pc, #76]	; (80059d4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d004      	beq.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a14      	ldr	r2, [pc, #80]	; (80059e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d10c      	bne.n	80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800599c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	68ba      	ldr	r2, [r7, #8]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68ba      	ldr	r2, [r7, #8]
 80059ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3714      	adds	r7, #20
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	40012c00 	.word	0x40012c00
 80059d4:	40013400 	.word	0x40013400
 80059d8:	40000400 	.word	0x40000400
 80059dc:	40000800 	.word	0x40000800
 80059e0:	40000c00 	.word	0x40000c00
 80059e4:	40014000 	.word	0x40014000

080059e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d101      	bne.n	80059fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e040      	b.n	8005a7c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d106      	bne.n	8005a10 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f7fb fd62 	bl	80014d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2224      	movs	r2, #36	; 0x24
 8005a14:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f022 0201 	bic.w	r2, r2, #1
 8005a24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 fb36 	bl	8006098 <UART_SetConfig>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d101      	bne.n	8005a36 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e022      	b.n	8005a7c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d002      	beq.n	8005a44 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 fde2 	bl	8006608 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	685a      	ldr	r2, [r3, #4]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	689a      	ldr	r2, [r3, #8]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f042 0201 	orr.w	r2, r2, #1
 8005a72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 fe69 	bl	800674c <UART_CheckIdleState>
 8005a7a:	4603      	mov	r3, r0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3708      	adds	r7, #8
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b0ba      	sub	sp, #232	; 0xe8
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	69db      	ldr	r3, [r3, #28]
 8005a92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005aaa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005aae:	f640 030f 	movw	r3, #2063	; 0x80f
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005ab8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d115      	bne.n	8005aec <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ac4:	f003 0320 	and.w	r3, r3, #32
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00f      	beq.n	8005aec <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005acc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ad0:	f003 0320 	and.w	r3, r3, #32
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d009      	beq.n	8005aec <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f000 82a6 	beq.w	800602e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	4798      	blx	r3
      }
      return;
 8005aea:	e2a0      	b.n	800602e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005aec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f000 8117 	beq.w	8005d24 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005af6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d106      	bne.n	8005b10 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005b02:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005b06:	4b85      	ldr	r3, [pc, #532]	; (8005d1c <HAL_UART_IRQHandler+0x298>)
 8005b08:	4013      	ands	r3, r2
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	f000 810a 	beq.w	8005d24 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005b10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b14:	f003 0301 	and.w	r3, r3, #1
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d011      	beq.n	8005b40 <HAL_UART_IRQHandler+0xbc>
 8005b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00b      	beq.n	8005b40 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b36:	f043 0201 	orr.w	r2, r3, #1
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b44:	f003 0302 	and.w	r3, r3, #2
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d011      	beq.n	8005b70 <HAL_UART_IRQHandler+0xec>
 8005b4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b50:	f003 0301 	and.w	r3, r3, #1
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d00b      	beq.n	8005b70 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2202      	movs	r2, #2
 8005b5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b66:	f043 0204 	orr.w	r2, r3, #4
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b74:	f003 0304 	and.w	r3, r3, #4
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d011      	beq.n	8005ba0 <HAL_UART_IRQHandler+0x11c>
 8005b7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b80:	f003 0301 	and.w	r3, r3, #1
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d00b      	beq.n	8005ba0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2204      	movs	r2, #4
 8005b8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b96:	f043 0202 	orr.w	r2, r3, #2
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005ba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ba4:	f003 0308 	and.w	r3, r3, #8
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d017      	beq.n	8005bdc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bb0:	f003 0320 	and.w	r3, r3, #32
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d105      	bne.n	8005bc4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005bb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bbc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d00b      	beq.n	8005bdc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2208      	movs	r2, #8
 8005bca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bd2:	f043 0208 	orr.w	r2, r3, #8
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005be0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d012      	beq.n	8005c0e <HAL_UART_IRQHandler+0x18a>
 8005be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00c      	beq.n	8005c0e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005bfc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c04:	f043 0220 	orr.w	r2, r3, #32
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f000 820c 	beq.w	8006032 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c1e:	f003 0320 	and.w	r3, r3, #32
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00d      	beq.n	8005c42 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005c26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c2a:	f003 0320 	and.w	r3, r3, #32
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d007      	beq.n	8005c42 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d003      	beq.n	8005c42 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c56:	2b40      	cmp	r3, #64	; 0x40
 8005c58:	d005      	beq.n	8005c66 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005c5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d04f      	beq.n	8005d06 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 ff4a 	bl	8006b00 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c76:	2b40      	cmp	r3, #64	; 0x40
 8005c78:	d141      	bne.n	8005cfe <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	3308      	adds	r3, #8
 8005c80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c88:	e853 3f00 	ldrex	r3, [r3]
 8005c8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005c90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	3308      	adds	r3, #8
 8005ca2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005ca6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005caa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005cb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005cb6:	e841 2300 	strex	r3, r2, [r1]
 8005cba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005cbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1d9      	bne.n	8005c7a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d013      	beq.n	8005cf6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cd2:	4a13      	ldr	r2, [pc, #76]	; (8005d20 <HAL_UART_IRQHandler+0x29c>)
 8005cd4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7fc ff38 	bl	8002b50 <HAL_DMA_Abort_IT>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d017      	beq.n	8005d16 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005cf0:	4610      	mov	r0, r2
 8005cf2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cf4:	e00f      	b.n	8005d16 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 f9c4 	bl	8006084 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cfc:	e00b      	b.n	8005d16 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 f9c0 	bl	8006084 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d04:	e007      	b.n	8005d16 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f9bc 	bl	8006084 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005d14:	e18d      	b.n	8006032 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d16:	bf00      	nop
    return;
 8005d18:	e18b      	b.n	8006032 <HAL_UART_IRQHandler+0x5ae>
 8005d1a:	bf00      	nop
 8005d1c:	04000120 	.word	0x04000120
 8005d20:	08006d9f 	.word	0x08006d9f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	f040 8146 	bne.w	8005fba <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d32:	f003 0310 	and.w	r3, r3, #16
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	f000 813f 	beq.w	8005fba <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005d3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d40:	f003 0310 	and.w	r3, r3, #16
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	f000 8138 	beq.w	8005fba <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2210      	movs	r2, #16
 8005d50:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d5c:	2b40      	cmp	r3, #64	; 0x40
 8005d5e:	f040 80b4 	bne.w	8005eca <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d6e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	f000 815f 	beq.w	8006036 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005d7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d82:	429a      	cmp	r2, r3
 8005d84:	f080 8157 	bcs.w	8006036 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d8e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 0320 	and.w	r3, r3, #32
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	f040 8085 	bne.w	8005eae <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005db0:	e853 3f00 	ldrex	r3, [r3]
 8005db4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005db8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005dbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005dc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	461a      	mov	r2, r3
 8005dca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005dce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005dd2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005dda:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005dde:	e841 2300 	strex	r3, r2, [r1]
 8005de2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005de6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1da      	bne.n	8005da4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	3308      	adds	r3, #8
 8005df4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005df8:	e853 3f00 	ldrex	r3, [r3]
 8005dfc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005dfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e00:	f023 0301 	bic.w	r3, r3, #1
 8005e04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	3308      	adds	r3, #8
 8005e0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005e12:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005e16:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e18:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005e1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005e1e:	e841 2300 	strex	r3, r2, [r1]
 8005e22:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005e24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1e1      	bne.n	8005dee <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	3308      	adds	r3, #8
 8005e30:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e34:	e853 3f00 	ldrex	r3, [r3]
 8005e38:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005e3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	3308      	adds	r3, #8
 8005e4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005e4e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005e50:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e52:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005e54:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005e56:	e841 2300 	strex	r3, r2, [r1]
 8005e5a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005e5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1e3      	bne.n	8005e2a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2220      	movs	r2, #32
 8005e66:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e76:	e853 3f00 	ldrex	r3, [r3]
 8005e7a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005e7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e7e:	f023 0310 	bic.w	r3, r3, #16
 8005e82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e90:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e92:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005e96:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e98:	e841 2300 	strex	r3, r2, [r1]
 8005e9c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005e9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d1e4      	bne.n	8005e6e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f7fc fe13 	bl	8002ad4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f7fb f93c 	bl	8001140 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ec8:	e0b5      	b.n	8006036 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	f000 80a7 	beq.w	800603a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8005eec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	f000 80a2 	beq.w	800603a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efe:	e853 3f00 	ldrex	r3, [r3]
 8005f02:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	461a      	mov	r2, r3
 8005f14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f18:	647b      	str	r3, [r7, #68]	; 0x44
 8005f1a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f20:	e841 2300 	strex	r3, r2, [r1]
 8005f24:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d1e4      	bne.n	8005ef6 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	3308      	adds	r3, #8
 8005f32:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f36:	e853 3f00 	ldrex	r3, [r3]
 8005f3a:	623b      	str	r3, [r7, #32]
   return(result);
 8005f3c:	6a3b      	ldr	r3, [r7, #32]
 8005f3e:	f023 0301 	bic.w	r3, r3, #1
 8005f42:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	3308      	adds	r3, #8
 8005f4c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005f50:	633a      	str	r2, [r7, #48]	; 0x30
 8005f52:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f58:	e841 2300 	strex	r3, r2, [r1]
 8005f5c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1e3      	bne.n	8005f2c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2220      	movs	r2, #32
 8005f68:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	e853 3f00 	ldrex	r3, [r3]
 8005f82:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f023 0310 	bic.w	r3, r3, #16
 8005f8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	461a      	mov	r2, r3
 8005f94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005f98:	61fb      	str	r3, [r7, #28]
 8005f9a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9c:	69b9      	ldr	r1, [r7, #24]
 8005f9e:	69fa      	ldr	r2, [r7, #28]
 8005fa0:	e841 2300 	strex	r3, r2, [r1]
 8005fa4:	617b      	str	r3, [r7, #20]
   return(result);
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d1e4      	bne.n	8005f76 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005fac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f7fb f8c4 	bl	8001140 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005fb8:	e03f      	b.n	800603a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00e      	beq.n	8005fe4 <HAL_UART_IRQHandler+0x560>
 8005fc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d008      	beq.n	8005fe4 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005fda:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 ff1e 	bl	8006e1e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005fe2:	e02d      	b.n	8006040 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00e      	beq.n	800600e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d008      	beq.n	800600e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006000:	2b00      	cmp	r3, #0
 8006002:	d01c      	beq.n	800603e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	4798      	blx	r3
    }
    return;
 800600c:	e017      	b.n	800603e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800600e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006016:	2b00      	cmp	r3, #0
 8006018:	d012      	beq.n	8006040 <HAL_UART_IRQHandler+0x5bc>
 800601a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800601e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00c      	beq.n	8006040 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 fecf 	bl	8006dca <UART_EndTransmit_IT>
    return;
 800602c:	e008      	b.n	8006040 <HAL_UART_IRQHandler+0x5bc>
      return;
 800602e:	bf00      	nop
 8006030:	e006      	b.n	8006040 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006032:	bf00      	nop
 8006034:	e004      	b.n	8006040 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006036:	bf00      	nop
 8006038:	e002      	b.n	8006040 <HAL_UART_IRQHandler+0x5bc>
      return;
 800603a:	bf00      	nop
 800603c:	e000      	b.n	8006040 <HAL_UART_IRQHandler+0x5bc>
    return;
 800603e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006040:	37e8      	adds	r7, #232	; 0xe8
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop

08006048 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006050:	bf00      	nop
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006064:	bf00      	nop
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006078:	bf00      	nop
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800608c:	bf00      	nop
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006098:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800609c:	b08a      	sub	sp, #40	; 0x28
 800609e:	af00      	add	r7, sp, #0
 80060a0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80060a2:	2300      	movs	r3, #0
 80060a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	689a      	ldr	r2, [r3, #8]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	431a      	orrs	r2, r3
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	695b      	ldr	r3, [r3, #20]
 80060b6:	431a      	orrs	r2, r3
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	69db      	ldr	r3, [r3, #28]
 80060bc:	4313      	orrs	r3, r2
 80060be:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	4ba4      	ldr	r3, [pc, #656]	; (8006358 <UART_SetConfig+0x2c0>)
 80060c8:	4013      	ands	r3, r2
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	6812      	ldr	r2, [r2, #0]
 80060ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80060d0:	430b      	orrs	r3, r1
 80060d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	68da      	ldr	r2, [r3, #12]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	430a      	orrs	r2, r1
 80060e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a99      	ldr	r2, [pc, #612]	; (800635c <UART_SetConfig+0x2c4>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d004      	beq.n	8006104 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006100:	4313      	orrs	r3, r2
 8006102:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006114:	430a      	orrs	r2, r1
 8006116:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a90      	ldr	r2, [pc, #576]	; (8006360 <UART_SetConfig+0x2c8>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d126      	bne.n	8006170 <UART_SetConfig+0xd8>
 8006122:	4b90      	ldr	r3, [pc, #576]	; (8006364 <UART_SetConfig+0x2cc>)
 8006124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006128:	f003 0303 	and.w	r3, r3, #3
 800612c:	2b03      	cmp	r3, #3
 800612e:	d81b      	bhi.n	8006168 <UART_SetConfig+0xd0>
 8006130:	a201      	add	r2, pc, #4	; (adr r2, 8006138 <UART_SetConfig+0xa0>)
 8006132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006136:	bf00      	nop
 8006138:	08006149 	.word	0x08006149
 800613c:	08006159 	.word	0x08006159
 8006140:	08006151 	.word	0x08006151
 8006144:	08006161 	.word	0x08006161
 8006148:	2301      	movs	r3, #1
 800614a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800614e:	e116      	b.n	800637e <UART_SetConfig+0x2e6>
 8006150:	2302      	movs	r3, #2
 8006152:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006156:	e112      	b.n	800637e <UART_SetConfig+0x2e6>
 8006158:	2304      	movs	r3, #4
 800615a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800615e:	e10e      	b.n	800637e <UART_SetConfig+0x2e6>
 8006160:	2308      	movs	r3, #8
 8006162:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006166:	e10a      	b.n	800637e <UART_SetConfig+0x2e6>
 8006168:	2310      	movs	r3, #16
 800616a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800616e:	e106      	b.n	800637e <UART_SetConfig+0x2e6>
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a7c      	ldr	r2, [pc, #496]	; (8006368 <UART_SetConfig+0x2d0>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d138      	bne.n	80061ec <UART_SetConfig+0x154>
 800617a:	4b7a      	ldr	r3, [pc, #488]	; (8006364 <UART_SetConfig+0x2cc>)
 800617c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006180:	f003 030c 	and.w	r3, r3, #12
 8006184:	2b0c      	cmp	r3, #12
 8006186:	d82d      	bhi.n	80061e4 <UART_SetConfig+0x14c>
 8006188:	a201      	add	r2, pc, #4	; (adr r2, 8006190 <UART_SetConfig+0xf8>)
 800618a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800618e:	bf00      	nop
 8006190:	080061c5 	.word	0x080061c5
 8006194:	080061e5 	.word	0x080061e5
 8006198:	080061e5 	.word	0x080061e5
 800619c:	080061e5 	.word	0x080061e5
 80061a0:	080061d5 	.word	0x080061d5
 80061a4:	080061e5 	.word	0x080061e5
 80061a8:	080061e5 	.word	0x080061e5
 80061ac:	080061e5 	.word	0x080061e5
 80061b0:	080061cd 	.word	0x080061cd
 80061b4:	080061e5 	.word	0x080061e5
 80061b8:	080061e5 	.word	0x080061e5
 80061bc:	080061e5 	.word	0x080061e5
 80061c0:	080061dd 	.word	0x080061dd
 80061c4:	2300      	movs	r3, #0
 80061c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061ca:	e0d8      	b.n	800637e <UART_SetConfig+0x2e6>
 80061cc:	2302      	movs	r3, #2
 80061ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061d2:	e0d4      	b.n	800637e <UART_SetConfig+0x2e6>
 80061d4:	2304      	movs	r3, #4
 80061d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061da:	e0d0      	b.n	800637e <UART_SetConfig+0x2e6>
 80061dc:	2308      	movs	r3, #8
 80061de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061e2:	e0cc      	b.n	800637e <UART_SetConfig+0x2e6>
 80061e4:	2310      	movs	r3, #16
 80061e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061ea:	e0c8      	b.n	800637e <UART_SetConfig+0x2e6>
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a5e      	ldr	r2, [pc, #376]	; (800636c <UART_SetConfig+0x2d4>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d125      	bne.n	8006242 <UART_SetConfig+0x1aa>
 80061f6:	4b5b      	ldr	r3, [pc, #364]	; (8006364 <UART_SetConfig+0x2cc>)
 80061f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061fc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006200:	2b30      	cmp	r3, #48	; 0x30
 8006202:	d016      	beq.n	8006232 <UART_SetConfig+0x19a>
 8006204:	2b30      	cmp	r3, #48	; 0x30
 8006206:	d818      	bhi.n	800623a <UART_SetConfig+0x1a2>
 8006208:	2b20      	cmp	r3, #32
 800620a:	d00a      	beq.n	8006222 <UART_SetConfig+0x18a>
 800620c:	2b20      	cmp	r3, #32
 800620e:	d814      	bhi.n	800623a <UART_SetConfig+0x1a2>
 8006210:	2b00      	cmp	r3, #0
 8006212:	d002      	beq.n	800621a <UART_SetConfig+0x182>
 8006214:	2b10      	cmp	r3, #16
 8006216:	d008      	beq.n	800622a <UART_SetConfig+0x192>
 8006218:	e00f      	b.n	800623a <UART_SetConfig+0x1a2>
 800621a:	2300      	movs	r3, #0
 800621c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006220:	e0ad      	b.n	800637e <UART_SetConfig+0x2e6>
 8006222:	2302      	movs	r3, #2
 8006224:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006228:	e0a9      	b.n	800637e <UART_SetConfig+0x2e6>
 800622a:	2304      	movs	r3, #4
 800622c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006230:	e0a5      	b.n	800637e <UART_SetConfig+0x2e6>
 8006232:	2308      	movs	r3, #8
 8006234:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006238:	e0a1      	b.n	800637e <UART_SetConfig+0x2e6>
 800623a:	2310      	movs	r3, #16
 800623c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006240:	e09d      	b.n	800637e <UART_SetConfig+0x2e6>
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a4a      	ldr	r2, [pc, #296]	; (8006370 <UART_SetConfig+0x2d8>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d125      	bne.n	8006298 <UART_SetConfig+0x200>
 800624c:	4b45      	ldr	r3, [pc, #276]	; (8006364 <UART_SetConfig+0x2cc>)
 800624e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006252:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006256:	2bc0      	cmp	r3, #192	; 0xc0
 8006258:	d016      	beq.n	8006288 <UART_SetConfig+0x1f0>
 800625a:	2bc0      	cmp	r3, #192	; 0xc0
 800625c:	d818      	bhi.n	8006290 <UART_SetConfig+0x1f8>
 800625e:	2b80      	cmp	r3, #128	; 0x80
 8006260:	d00a      	beq.n	8006278 <UART_SetConfig+0x1e0>
 8006262:	2b80      	cmp	r3, #128	; 0x80
 8006264:	d814      	bhi.n	8006290 <UART_SetConfig+0x1f8>
 8006266:	2b00      	cmp	r3, #0
 8006268:	d002      	beq.n	8006270 <UART_SetConfig+0x1d8>
 800626a:	2b40      	cmp	r3, #64	; 0x40
 800626c:	d008      	beq.n	8006280 <UART_SetConfig+0x1e8>
 800626e:	e00f      	b.n	8006290 <UART_SetConfig+0x1f8>
 8006270:	2300      	movs	r3, #0
 8006272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006276:	e082      	b.n	800637e <UART_SetConfig+0x2e6>
 8006278:	2302      	movs	r3, #2
 800627a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800627e:	e07e      	b.n	800637e <UART_SetConfig+0x2e6>
 8006280:	2304      	movs	r3, #4
 8006282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006286:	e07a      	b.n	800637e <UART_SetConfig+0x2e6>
 8006288:	2308      	movs	r3, #8
 800628a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800628e:	e076      	b.n	800637e <UART_SetConfig+0x2e6>
 8006290:	2310      	movs	r3, #16
 8006292:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006296:	e072      	b.n	800637e <UART_SetConfig+0x2e6>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a35      	ldr	r2, [pc, #212]	; (8006374 <UART_SetConfig+0x2dc>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d12a      	bne.n	80062f8 <UART_SetConfig+0x260>
 80062a2:	4b30      	ldr	r3, [pc, #192]	; (8006364 <UART_SetConfig+0x2cc>)
 80062a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062b0:	d01a      	beq.n	80062e8 <UART_SetConfig+0x250>
 80062b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062b6:	d81b      	bhi.n	80062f0 <UART_SetConfig+0x258>
 80062b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062bc:	d00c      	beq.n	80062d8 <UART_SetConfig+0x240>
 80062be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062c2:	d815      	bhi.n	80062f0 <UART_SetConfig+0x258>
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d003      	beq.n	80062d0 <UART_SetConfig+0x238>
 80062c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062cc:	d008      	beq.n	80062e0 <UART_SetConfig+0x248>
 80062ce:	e00f      	b.n	80062f0 <UART_SetConfig+0x258>
 80062d0:	2300      	movs	r3, #0
 80062d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062d6:	e052      	b.n	800637e <UART_SetConfig+0x2e6>
 80062d8:	2302      	movs	r3, #2
 80062da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062de:	e04e      	b.n	800637e <UART_SetConfig+0x2e6>
 80062e0:	2304      	movs	r3, #4
 80062e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062e6:	e04a      	b.n	800637e <UART_SetConfig+0x2e6>
 80062e8:	2308      	movs	r3, #8
 80062ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062ee:	e046      	b.n	800637e <UART_SetConfig+0x2e6>
 80062f0:	2310      	movs	r3, #16
 80062f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062f6:	e042      	b.n	800637e <UART_SetConfig+0x2e6>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a17      	ldr	r2, [pc, #92]	; (800635c <UART_SetConfig+0x2c4>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d13a      	bne.n	8006378 <UART_SetConfig+0x2e0>
 8006302:	4b18      	ldr	r3, [pc, #96]	; (8006364 <UART_SetConfig+0x2cc>)
 8006304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006308:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800630c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006310:	d01a      	beq.n	8006348 <UART_SetConfig+0x2b0>
 8006312:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006316:	d81b      	bhi.n	8006350 <UART_SetConfig+0x2b8>
 8006318:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800631c:	d00c      	beq.n	8006338 <UART_SetConfig+0x2a0>
 800631e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006322:	d815      	bhi.n	8006350 <UART_SetConfig+0x2b8>
 8006324:	2b00      	cmp	r3, #0
 8006326:	d003      	beq.n	8006330 <UART_SetConfig+0x298>
 8006328:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800632c:	d008      	beq.n	8006340 <UART_SetConfig+0x2a8>
 800632e:	e00f      	b.n	8006350 <UART_SetConfig+0x2b8>
 8006330:	2300      	movs	r3, #0
 8006332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006336:	e022      	b.n	800637e <UART_SetConfig+0x2e6>
 8006338:	2302      	movs	r3, #2
 800633a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800633e:	e01e      	b.n	800637e <UART_SetConfig+0x2e6>
 8006340:	2304      	movs	r3, #4
 8006342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006346:	e01a      	b.n	800637e <UART_SetConfig+0x2e6>
 8006348:	2308      	movs	r3, #8
 800634a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800634e:	e016      	b.n	800637e <UART_SetConfig+0x2e6>
 8006350:	2310      	movs	r3, #16
 8006352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006356:	e012      	b.n	800637e <UART_SetConfig+0x2e6>
 8006358:	efff69f3 	.word	0xefff69f3
 800635c:	40008000 	.word	0x40008000
 8006360:	40013800 	.word	0x40013800
 8006364:	40021000 	.word	0x40021000
 8006368:	40004400 	.word	0x40004400
 800636c:	40004800 	.word	0x40004800
 8006370:	40004c00 	.word	0x40004c00
 8006374:	40005000 	.word	0x40005000
 8006378:	2310      	movs	r3, #16
 800637a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a9f      	ldr	r2, [pc, #636]	; (8006600 <UART_SetConfig+0x568>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d17a      	bne.n	800647e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006388:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800638c:	2b08      	cmp	r3, #8
 800638e:	d824      	bhi.n	80063da <UART_SetConfig+0x342>
 8006390:	a201      	add	r2, pc, #4	; (adr r2, 8006398 <UART_SetConfig+0x300>)
 8006392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006396:	bf00      	nop
 8006398:	080063bd 	.word	0x080063bd
 800639c:	080063db 	.word	0x080063db
 80063a0:	080063c5 	.word	0x080063c5
 80063a4:	080063db 	.word	0x080063db
 80063a8:	080063cb 	.word	0x080063cb
 80063ac:	080063db 	.word	0x080063db
 80063b0:	080063db 	.word	0x080063db
 80063b4:	080063db 	.word	0x080063db
 80063b8:	080063d3 	.word	0x080063d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063bc:	f7fd fca6 	bl	8003d0c <HAL_RCC_GetPCLK1Freq>
 80063c0:	61f8      	str	r0, [r7, #28]
        break;
 80063c2:	e010      	b.n	80063e6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063c4:	4b8f      	ldr	r3, [pc, #572]	; (8006604 <UART_SetConfig+0x56c>)
 80063c6:	61fb      	str	r3, [r7, #28]
        break;
 80063c8:	e00d      	b.n	80063e6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063ca:	f7fd fc07 	bl	8003bdc <HAL_RCC_GetSysClockFreq>
 80063ce:	61f8      	str	r0, [r7, #28]
        break;
 80063d0:	e009      	b.n	80063e6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063d6:	61fb      	str	r3, [r7, #28]
        break;
 80063d8:	e005      	b.n	80063e6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80063da:	2300      	movs	r3, #0
 80063dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80063e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f000 80fb 	beq.w	80065e4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	685a      	ldr	r2, [r3, #4]
 80063f2:	4613      	mov	r3, r2
 80063f4:	005b      	lsls	r3, r3, #1
 80063f6:	4413      	add	r3, r2
 80063f8:	69fa      	ldr	r2, [r7, #28]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d305      	bcc.n	800640a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006404:	69fa      	ldr	r2, [r7, #28]
 8006406:	429a      	cmp	r2, r3
 8006408:	d903      	bls.n	8006412 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006410:	e0e8      	b.n	80065e4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	2200      	movs	r2, #0
 8006416:	461c      	mov	r4, r3
 8006418:	4615      	mov	r5, r2
 800641a:	f04f 0200 	mov.w	r2, #0
 800641e:	f04f 0300 	mov.w	r3, #0
 8006422:	022b      	lsls	r3, r5, #8
 8006424:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006428:	0222      	lsls	r2, r4, #8
 800642a:	68f9      	ldr	r1, [r7, #12]
 800642c:	6849      	ldr	r1, [r1, #4]
 800642e:	0849      	lsrs	r1, r1, #1
 8006430:	2000      	movs	r0, #0
 8006432:	4688      	mov	r8, r1
 8006434:	4681      	mov	r9, r0
 8006436:	eb12 0a08 	adds.w	sl, r2, r8
 800643a:	eb43 0b09 	adc.w	fp, r3, r9
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	603b      	str	r3, [r7, #0]
 8006446:	607a      	str	r2, [r7, #4]
 8006448:	e9d7 2300 	ldrd	r2, r3, [r7]
 800644c:	4650      	mov	r0, sl
 800644e:	4659      	mov	r1, fp
 8006450:	f7fa f87e 	bl	8000550 <__aeabi_uldivmod>
 8006454:	4602      	mov	r2, r0
 8006456:	460b      	mov	r3, r1
 8006458:	4613      	mov	r3, r2
 800645a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800645c:	69bb      	ldr	r3, [r7, #24]
 800645e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006462:	d308      	bcc.n	8006476 <UART_SetConfig+0x3de>
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800646a:	d204      	bcs.n	8006476 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	69ba      	ldr	r2, [r7, #24]
 8006472:	60da      	str	r2, [r3, #12]
 8006474:	e0b6      	b.n	80065e4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800647c:	e0b2      	b.n	80065e4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	69db      	ldr	r3, [r3, #28]
 8006482:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006486:	d15e      	bne.n	8006546 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006488:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800648c:	2b08      	cmp	r3, #8
 800648e:	d828      	bhi.n	80064e2 <UART_SetConfig+0x44a>
 8006490:	a201      	add	r2, pc, #4	; (adr r2, 8006498 <UART_SetConfig+0x400>)
 8006492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006496:	bf00      	nop
 8006498:	080064bd 	.word	0x080064bd
 800649c:	080064c5 	.word	0x080064c5
 80064a0:	080064cd 	.word	0x080064cd
 80064a4:	080064e3 	.word	0x080064e3
 80064a8:	080064d3 	.word	0x080064d3
 80064ac:	080064e3 	.word	0x080064e3
 80064b0:	080064e3 	.word	0x080064e3
 80064b4:	080064e3 	.word	0x080064e3
 80064b8:	080064db 	.word	0x080064db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064bc:	f7fd fc26 	bl	8003d0c <HAL_RCC_GetPCLK1Freq>
 80064c0:	61f8      	str	r0, [r7, #28]
        break;
 80064c2:	e014      	b.n	80064ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064c4:	f7fd fc38 	bl	8003d38 <HAL_RCC_GetPCLK2Freq>
 80064c8:	61f8      	str	r0, [r7, #28]
        break;
 80064ca:	e010      	b.n	80064ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064cc:	4b4d      	ldr	r3, [pc, #308]	; (8006604 <UART_SetConfig+0x56c>)
 80064ce:	61fb      	str	r3, [r7, #28]
        break;
 80064d0:	e00d      	b.n	80064ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064d2:	f7fd fb83 	bl	8003bdc <HAL_RCC_GetSysClockFreq>
 80064d6:	61f8      	str	r0, [r7, #28]
        break;
 80064d8:	e009      	b.n	80064ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064de:	61fb      	str	r3, [r7, #28]
        break;
 80064e0:	e005      	b.n	80064ee <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80064e2:	2300      	movs	r3, #0
 80064e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80064ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d077      	beq.n	80065e4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	005a      	lsls	r2, r3, #1
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	085b      	lsrs	r3, r3, #1
 80064fe:	441a      	add	r2, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	fbb2 f3f3 	udiv	r3, r2, r3
 8006508:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	2b0f      	cmp	r3, #15
 800650e:	d916      	bls.n	800653e <UART_SetConfig+0x4a6>
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006516:	d212      	bcs.n	800653e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	b29b      	uxth	r3, r3
 800651c:	f023 030f 	bic.w	r3, r3, #15
 8006520:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	085b      	lsrs	r3, r3, #1
 8006526:	b29b      	uxth	r3, r3
 8006528:	f003 0307 	and.w	r3, r3, #7
 800652c:	b29a      	uxth	r2, r3
 800652e:	8afb      	ldrh	r3, [r7, #22]
 8006530:	4313      	orrs	r3, r2
 8006532:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	8afa      	ldrh	r2, [r7, #22]
 800653a:	60da      	str	r2, [r3, #12]
 800653c:	e052      	b.n	80065e4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006544:	e04e      	b.n	80065e4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006546:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800654a:	2b08      	cmp	r3, #8
 800654c:	d827      	bhi.n	800659e <UART_SetConfig+0x506>
 800654e:	a201      	add	r2, pc, #4	; (adr r2, 8006554 <UART_SetConfig+0x4bc>)
 8006550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006554:	08006579 	.word	0x08006579
 8006558:	08006581 	.word	0x08006581
 800655c:	08006589 	.word	0x08006589
 8006560:	0800659f 	.word	0x0800659f
 8006564:	0800658f 	.word	0x0800658f
 8006568:	0800659f 	.word	0x0800659f
 800656c:	0800659f 	.word	0x0800659f
 8006570:	0800659f 	.word	0x0800659f
 8006574:	08006597 	.word	0x08006597
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006578:	f7fd fbc8 	bl	8003d0c <HAL_RCC_GetPCLK1Freq>
 800657c:	61f8      	str	r0, [r7, #28]
        break;
 800657e:	e014      	b.n	80065aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006580:	f7fd fbda 	bl	8003d38 <HAL_RCC_GetPCLK2Freq>
 8006584:	61f8      	str	r0, [r7, #28]
        break;
 8006586:	e010      	b.n	80065aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006588:	4b1e      	ldr	r3, [pc, #120]	; (8006604 <UART_SetConfig+0x56c>)
 800658a:	61fb      	str	r3, [r7, #28]
        break;
 800658c:	e00d      	b.n	80065aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800658e:	f7fd fb25 	bl	8003bdc <HAL_RCC_GetSysClockFreq>
 8006592:	61f8      	str	r0, [r7, #28]
        break;
 8006594:	e009      	b.n	80065aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006596:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800659a:	61fb      	str	r3, [r7, #28]
        break;
 800659c:	e005      	b.n	80065aa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800659e:	2300      	movs	r3, #0
 80065a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80065a8:	bf00      	nop
    }

    if (pclk != 0U)
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d019      	beq.n	80065e4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	085a      	lsrs	r2, r3, #1
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	441a      	add	r2, r3
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	fbb2 f3f3 	udiv	r3, r2, r3
 80065c2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	2b0f      	cmp	r3, #15
 80065c8:	d909      	bls.n	80065de <UART_SetConfig+0x546>
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065d0:	d205      	bcs.n	80065de <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	b29a      	uxth	r2, r3
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	60da      	str	r2, [r3, #12]
 80065dc:	e002      	b.n	80065e4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2200      	movs	r2, #0
 80065e8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2200      	movs	r2, #0
 80065ee:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80065f0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3728      	adds	r7, #40	; 0x28
 80065f8:	46bd      	mov	sp, r7
 80065fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065fe:	bf00      	nop
 8006600:	40008000 	.word	0x40008000
 8006604:	00f42400 	.word	0x00f42400

08006608 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006614:	f003 0301 	and.w	r3, r3, #1
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00a      	beq.n	8006632 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	430a      	orrs	r2, r1
 8006630:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006636:	f003 0302 	and.w	r3, r3, #2
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00a      	beq.n	8006654 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	430a      	orrs	r2, r1
 8006652:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006658:	f003 0304 	and.w	r3, r3, #4
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00a      	beq.n	8006676 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	430a      	orrs	r2, r1
 8006674:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667a:	f003 0308 	and.w	r3, r3, #8
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00a      	beq.n	8006698 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	430a      	orrs	r2, r1
 8006696:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669c:	f003 0310 	and.w	r3, r3, #16
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00a      	beq.n	80066ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	430a      	orrs	r2, r1
 80066b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066be:	f003 0320 	and.w	r3, r3, #32
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d00a      	beq.n	80066dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	430a      	orrs	r2, r1
 80066da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d01a      	beq.n	800671e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	430a      	orrs	r2, r1
 80066fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006702:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006706:	d10a      	bne.n	800671e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	430a      	orrs	r2, r1
 800671c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00a      	beq.n	8006740 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	430a      	orrs	r2, r1
 800673e:	605a      	str	r2, [r3, #4]
  }
}
 8006740:	bf00      	nop
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b086      	sub	sp, #24
 8006750:	af02      	add	r7, sp, #8
 8006752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800675c:	f7fb ff84 	bl	8002668 <HAL_GetTick>
 8006760:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 0308 	and.w	r3, r3, #8
 800676c:	2b08      	cmp	r3, #8
 800676e:	d10e      	bne.n	800678e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006770:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006774:	9300      	str	r3, [sp, #0]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2200      	movs	r2, #0
 800677a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 f82d 	bl	80067de <UART_WaitOnFlagUntilTimeout>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d001      	beq.n	800678e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	e023      	b.n	80067d6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 0304 	and.w	r3, r3, #4
 8006798:	2b04      	cmp	r3, #4
 800679a:	d10e      	bne.n	80067ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800679c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80067a0:	9300      	str	r3, [sp, #0]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f817 	bl	80067de <UART_WaitOnFlagUntilTimeout>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d001      	beq.n	80067ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067b6:	2303      	movs	r3, #3
 80067b8:	e00d      	b.n	80067d6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2220      	movs	r2, #32
 80067be:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2220      	movs	r2, #32
 80067c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3710      	adds	r7, #16
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}

080067de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80067de:	b580      	push	{r7, lr}
 80067e0:	b09c      	sub	sp, #112	; 0x70
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	60f8      	str	r0, [r7, #12]
 80067e6:	60b9      	str	r1, [r7, #8]
 80067e8:	603b      	str	r3, [r7, #0]
 80067ea:	4613      	mov	r3, r2
 80067ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067ee:	e0a5      	b.n	800693c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f6:	f000 80a1 	beq.w	800693c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067fa:	f7fb ff35 	bl	8002668 <HAL_GetTick>
 80067fe:	4602      	mov	r2, r0
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006806:	429a      	cmp	r2, r3
 8006808:	d302      	bcc.n	8006810 <UART_WaitOnFlagUntilTimeout+0x32>
 800680a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800680c:	2b00      	cmp	r3, #0
 800680e:	d13e      	bne.n	800688e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006818:	e853 3f00 	ldrex	r3, [r3]
 800681c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800681e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006820:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006824:	667b      	str	r3, [r7, #100]	; 0x64
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	461a      	mov	r2, r3
 800682c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800682e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006830:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006832:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006834:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006836:	e841 2300 	strex	r3, r2, [r1]
 800683a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800683c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800683e:	2b00      	cmp	r3, #0
 8006840:	d1e6      	bne.n	8006810 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	3308      	adds	r3, #8
 8006848:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800684c:	e853 3f00 	ldrex	r3, [r3]
 8006850:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006854:	f023 0301 	bic.w	r3, r3, #1
 8006858:	663b      	str	r3, [r7, #96]	; 0x60
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	3308      	adds	r3, #8
 8006860:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006862:	64ba      	str	r2, [r7, #72]	; 0x48
 8006864:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006866:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006868:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800686a:	e841 2300 	strex	r3, r2, [r1]
 800686e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006870:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1e5      	bne.n	8006842 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2220      	movs	r2, #32
 800687a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2220      	movs	r2, #32
 8006880:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2200      	movs	r2, #0
 8006886:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800688a:	2303      	movs	r3, #3
 800688c:	e067      	b.n	800695e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0304 	and.w	r3, r3, #4
 8006898:	2b00      	cmp	r3, #0
 800689a:	d04f      	beq.n	800693c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	69db      	ldr	r3, [r3, #28]
 80068a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068aa:	d147      	bne.n	800693c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068b4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068be:	e853 3f00 	ldrex	r3, [r3]
 80068c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80068ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	461a      	mov	r2, r3
 80068d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068d4:	637b      	str	r3, [r7, #52]	; 0x34
 80068d6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80068da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068dc:	e841 2300 	strex	r3, r2, [r1]
 80068e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80068e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d1e6      	bne.n	80068b6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	3308      	adds	r3, #8
 80068ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	e853 3f00 	ldrex	r3, [r3]
 80068f6:	613b      	str	r3, [r7, #16]
   return(result);
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	f023 0301 	bic.w	r3, r3, #1
 80068fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	3308      	adds	r3, #8
 8006906:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006908:	623a      	str	r2, [r7, #32]
 800690a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690c:	69f9      	ldr	r1, [r7, #28]
 800690e:	6a3a      	ldr	r2, [r7, #32]
 8006910:	e841 2300 	strex	r3, r2, [r1]
 8006914:	61bb      	str	r3, [r7, #24]
   return(result);
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d1e5      	bne.n	80068e8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2220      	movs	r2, #32
 8006920:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2220      	movs	r2, #32
 8006926:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2220      	movs	r2, #32
 800692c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2200      	movs	r2, #0
 8006934:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006938:	2303      	movs	r3, #3
 800693a:	e010      	b.n	800695e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	69da      	ldr	r2, [r3, #28]
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	4013      	ands	r3, r2
 8006946:	68ba      	ldr	r2, [r7, #8]
 8006948:	429a      	cmp	r2, r3
 800694a:	bf0c      	ite	eq
 800694c:	2301      	moveq	r3, #1
 800694e:	2300      	movne	r3, #0
 8006950:	b2db      	uxtb	r3, r3
 8006952:	461a      	mov	r2, r3
 8006954:	79fb      	ldrb	r3, [r7, #7]
 8006956:	429a      	cmp	r2, r3
 8006958:	f43f af4a 	beq.w	80067f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3770      	adds	r7, #112	; 0x70
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
	...

08006968 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b096      	sub	sp, #88	; 0x58
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	4613      	mov	r3, r2
 8006974:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	68ba      	ldr	r2, [r7, #8]
 800697a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	88fa      	ldrh	r2, [r7, #6]
 8006980:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2200      	movs	r2, #0
 8006988:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2222      	movs	r2, #34	; 0x22
 8006990:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006996:	2b00      	cmp	r3, #0
 8006998:	d02b      	beq.n	80069f2 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800699e:	4a42      	ldr	r2, [pc, #264]	; (8006aa8 <UART_Start_Receive_DMA+0x140>)
 80069a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069a6:	4a41      	ldr	r2, [pc, #260]	; (8006aac <UART_Start_Receive_DMA+0x144>)
 80069a8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ae:	4a40      	ldr	r2, [pc, #256]	; (8006ab0 <UART_Start_Receive_DMA+0x148>)
 80069b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069b6:	2200      	movs	r2, #0
 80069b8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	3324      	adds	r3, #36	; 0x24
 80069c4:	4619      	mov	r1, r3
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ca:	461a      	mov	r2, r3
 80069cc:	88fb      	ldrh	r3, [r7, #6]
 80069ce:	f7fc f821 	bl	8002a14 <HAL_DMA_Start_IT>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d00c      	beq.n	80069f2 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2210      	movs	r2, #16
 80069dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2220      	movs	r2, #32
 80069ec:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e055      	b.n	8006a9e <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d018      	beq.n	8006a34 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a0a:	e853 3f00 	ldrex	r3, [r3]
 8006a0e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a16:	657b      	str	r3, [r7, #84]	; 0x54
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a20:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a22:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a24:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006a26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a28:	e841 2300 	strex	r3, r2, [r1]
 8006a2c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006a2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d1e6      	bne.n	8006a02 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	3308      	adds	r3, #8
 8006a3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3e:	e853 3f00 	ldrex	r3, [r3]
 8006a42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a46:	f043 0301 	orr.w	r3, r3, #1
 8006a4a:	653b      	str	r3, [r7, #80]	; 0x50
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	3308      	adds	r3, #8
 8006a52:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006a54:	637a      	str	r2, [r7, #52]	; 0x34
 8006a56:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a5c:	e841 2300 	strex	r3, r2, [r1]
 8006a60:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d1e5      	bne.n	8006a34 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	3308      	adds	r3, #8
 8006a6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	e853 3f00 	ldrex	r3, [r3]
 8006a76:	613b      	str	r3, [r7, #16]
   return(result);
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	3308      	adds	r3, #8
 8006a86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a88:	623a      	str	r2, [r7, #32]
 8006a8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8c:	69f9      	ldr	r1, [r7, #28]
 8006a8e:	6a3a      	ldr	r2, [r7, #32]
 8006a90:	e841 2300 	strex	r3, r2, [r1]
 8006a94:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d1e5      	bne.n	8006a68 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3758      	adds	r7, #88	; 0x58
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	08006bc7 	.word	0x08006bc7
 8006aac:	08006ceb 	.word	0x08006ceb
 8006ab0:	08006d23 	.word	0x08006d23

08006ab4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b089      	sub	sp, #36	; 0x24
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	e853 3f00 	ldrex	r3, [r3]
 8006ac8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006ad0:	61fb      	str	r3, [r7, #28]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	61bb      	str	r3, [r7, #24]
 8006adc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ade:	6979      	ldr	r1, [r7, #20]
 8006ae0:	69ba      	ldr	r2, [r7, #24]
 8006ae2:	e841 2300 	strex	r3, r2, [r1]
 8006ae6:	613b      	str	r3, [r7, #16]
   return(result);
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1e6      	bne.n	8006abc <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2220      	movs	r2, #32
 8006af2:	679a      	str	r2, [r3, #120]	; 0x78
}
 8006af4:	bf00      	nop
 8006af6:	3724      	adds	r7, #36	; 0x24
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b095      	sub	sp, #84	; 0x54
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b10:	e853 3f00 	ldrex	r3, [r3]
 8006b14:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	461a      	mov	r2, r3
 8006b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b26:	643b      	str	r3, [r7, #64]	; 0x40
 8006b28:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b2e:	e841 2300 	strex	r3, r2, [r1]
 8006b32:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1e6      	bne.n	8006b08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	3308      	adds	r3, #8
 8006b40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b42:	6a3b      	ldr	r3, [r7, #32]
 8006b44:	e853 3f00 	ldrex	r3, [r3]
 8006b48:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	f023 0301 	bic.w	r3, r3, #1
 8006b50:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	3308      	adds	r3, #8
 8006b58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b62:	e841 2300 	strex	r3, r2, [r1]
 8006b66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1e5      	bne.n	8006b3a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d118      	bne.n	8006ba8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	e853 3f00 	ldrex	r3, [r3]
 8006b82:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	f023 0310 	bic.w	r3, r3, #16
 8006b8a:	647b      	str	r3, [r7, #68]	; 0x44
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	461a      	mov	r2, r3
 8006b92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b94:	61bb      	str	r3, [r7, #24]
 8006b96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b98:	6979      	ldr	r1, [r7, #20]
 8006b9a:	69ba      	ldr	r2, [r7, #24]
 8006b9c:	e841 2300 	strex	r3, r2, [r1]
 8006ba0:	613b      	str	r3, [r7, #16]
   return(result);
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d1e6      	bne.n	8006b76 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2220      	movs	r2, #32
 8006bac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006bba:	bf00      	nop
 8006bbc:	3754      	adds	r7, #84	; 0x54
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr

08006bc6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b09c      	sub	sp, #112	; 0x70
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 0320 	and.w	r3, r3, #32
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d170      	bne.n	8006cc4 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 8006be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006be4:	2200      	movs	r2, #0
 8006be6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bf2:	e853 3f00 	ldrex	r3, [r3]
 8006bf6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006bf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bfa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bfe:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	461a      	mov	r2, r3
 8006c06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c08:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c0a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c10:	e841 2300 	strex	r3, r2, [r1]
 8006c14:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006c16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d1e6      	bne.n	8006bea <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	3308      	adds	r3, #8
 8006c22:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c26:	e853 3f00 	ldrex	r3, [r3]
 8006c2a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c2e:	f023 0301 	bic.w	r3, r3, #1
 8006c32:	667b      	str	r3, [r7, #100]	; 0x64
 8006c34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	3308      	adds	r3, #8
 8006c3a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006c3c:	647a      	str	r2, [r7, #68]	; 0x44
 8006c3e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c40:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c44:	e841 2300 	strex	r3, r2, [r1]
 8006c48:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d1e5      	bne.n	8006c1c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	3308      	adds	r3, #8
 8006c56:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5a:	e853 3f00 	ldrex	r3, [r3]
 8006c5e:	623b      	str	r3, [r7, #32]
   return(result);
 8006c60:	6a3b      	ldr	r3, [r7, #32]
 8006c62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c66:	663b      	str	r3, [r7, #96]	; 0x60
 8006c68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	3308      	adds	r3, #8
 8006c6e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006c70:	633a      	str	r2, [r7, #48]	; 0x30
 8006c72:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c78:	e841 2300 	strex	r3, r2, [r1]
 8006c7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1e5      	bne.n	8006c50 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006c84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c86:	2220      	movs	r2, #32
 8006c88:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d118      	bne.n	8006cc4 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	e853 3f00 	ldrex	r3, [r3]
 8006c9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f023 0310 	bic.w	r3, r3, #16
 8006ca6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	461a      	mov	r2, r3
 8006cae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cb0:	61fb      	str	r3, [r7, #28]
 8006cb2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb4:	69b9      	ldr	r1, [r7, #24]
 8006cb6:	69fa      	ldr	r2, [r7, #28]
 8006cb8:	e841 2300 	strex	r3, r2, [r1]
 8006cbc:	617b      	str	r3, [r7, #20]
   return(result);
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d1e6      	bne.n	8006c92 <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d107      	bne.n	8006cdc <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006cd6:	f7fa fa33 	bl	8001140 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006cda:	e002      	b.n	8006ce2 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8006cdc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006cde:	f7ff f9bd 	bl	800605c <HAL_UART_RxCpltCallback>
}
 8006ce2:	bf00      	nop
 8006ce4:	3770      	adds	r7, #112	; 0x70
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b084      	sub	sp, #16
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d109      	bne.n	8006d14 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006d06:	085b      	lsrs	r3, r3, #1
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	68f8      	ldr	r0, [r7, #12]
 8006d0e:	f7fa fa17 	bl	8001140 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d12:	e002      	b.n	8006d1a <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f7ff f9ab 	bl	8006070 <HAL_UART_RxHalfCpltCallback>
}
 8006d1a:	bf00      	nop
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}

08006d22 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d22:	b580      	push	{r7, lr}
 8006d24:	b086      	sub	sp, #24
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d2e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d34:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d3a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d46:	2b80      	cmp	r3, #128	; 0x80
 8006d48:	d109      	bne.n	8006d5e <UART_DMAError+0x3c>
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	2b21      	cmp	r3, #33	; 0x21
 8006d4e:	d106      	bne.n	8006d5e <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8006d58:	6978      	ldr	r0, [r7, #20]
 8006d5a:	f7ff feab 	bl	8006ab4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d68:	2b40      	cmp	r3, #64	; 0x40
 8006d6a:	d109      	bne.n	8006d80 <UART_DMAError+0x5e>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2b22      	cmp	r3, #34	; 0x22
 8006d70:	d106      	bne.n	8006d80 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8006d7a:	6978      	ldr	r0, [r7, #20]
 8006d7c:	f7ff fec0 	bl	8006b00 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d86:	f043 0210 	orr.w	r2, r3, #16
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d90:	6978      	ldr	r0, [r7, #20]
 8006d92:	f7ff f977 	bl	8006084 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d96:	bf00      	nop
 8006d98:	3718      	adds	r7, #24
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b084      	sub	sp, #16
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006daa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2200      	movs	r2, #0
 8006db0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006dbc:	68f8      	ldr	r0, [r7, #12]
 8006dbe:	f7ff f961 	bl	8006084 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dc2:	bf00      	nop
 8006dc4:	3710      	adds	r7, #16
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b088      	sub	sp, #32
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	e853 3f00 	ldrex	r3, [r3]
 8006dde:	60bb      	str	r3, [r7, #8]
   return(result);
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006de6:	61fb      	str	r3, [r7, #28]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	461a      	mov	r2, r3
 8006dee:	69fb      	ldr	r3, [r7, #28]
 8006df0:	61bb      	str	r3, [r7, #24]
 8006df2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df4:	6979      	ldr	r1, [r7, #20]
 8006df6:	69ba      	ldr	r2, [r7, #24]
 8006df8:	e841 2300 	strex	r3, r2, [r1]
 8006dfc:	613b      	str	r3, [r7, #16]
   return(result);
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d1e6      	bne.n	8006dd2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2220      	movs	r2, #32
 8006e08:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f7ff f919 	bl	8006048 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e16:	bf00      	nop
 8006e18:	3720      	adds	r7, #32
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006e1e:	b480      	push	{r7}
 8006e20:	b083      	sub	sp, #12
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006e26:	bf00      	nop
 8006e28:	370c      	adds	r7, #12
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr

08006e32 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b08c      	sub	sp, #48	; 0x30
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	60f8      	str	r0, [r7, #12]
 8006e3a:	60b9      	str	r1, [r7, #8]
 8006e3c:	4613      	mov	r3, r2
 8006e3e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e44:	2b20      	cmp	r3, #32
 8006e46:	d14a      	bne.n	8006ede <HAL_UARTEx_ReceiveToIdle_DMA+0xac>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d002      	beq.n	8006e54 <HAL_UARTEx_ReceiveToIdle_DMA+0x22>
 8006e4e:	88fb      	ldrh	r3, [r7, #6]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d101      	bne.n	8006e58 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
    {
      return HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	e043      	b.n	8006ee0 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
    }

    __HAL_LOCK(huart);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d101      	bne.n	8006e66 <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
 8006e62:	2302      	movs	r3, #2
 8006e64:	e03c      	b.n	8006ee0 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2201      	movs	r2, #1
 8006e72:	661a      	str	r2, [r3, #96]	; 0x60

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006e74:	88fb      	ldrh	r3, [r7, #6]
 8006e76:	461a      	mov	r2, r3
 8006e78:	68b9      	ldr	r1, [r7, #8]
 8006e7a:	68f8      	ldr	r0, [r7, #12]
 8006e7c:	f7ff fd74 	bl	8006968 <UART_Start_Receive_DMA>
 8006e80:	4603      	mov	r3, r0
 8006e82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006e86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d124      	bne.n	8006ed8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d11d      	bne.n	8006ed2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	2210      	movs	r2, #16
 8006e9c:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	e853 3f00 	ldrex	r3, [r3]
 8006eaa:	617b      	str	r3, [r7, #20]
   return(result);
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	f043 0310 	orr.w	r3, r3, #16
 8006eb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	461a      	mov	r2, r3
 8006eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8006ebe:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec0:	6a39      	ldr	r1, [r7, #32]
 8006ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ec4:	e841 2300 	strex	r3, r2, [r1]
 8006ec8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006eca:	69fb      	ldr	r3, [r7, #28]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d1e6      	bne.n	8006e9e <HAL_UARTEx_ReceiveToIdle_DMA+0x6c>
 8006ed0:	e002      	b.n	8006ed8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8006ed8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006edc:	e000      	b.n	8006ee0 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  }
  else
  {
    return HAL_BUSY;
 8006ede:	2302      	movs	r3, #2
  }
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3730      	adds	r7, #48	; 0x30
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <__libc_init_array>:
 8006ee8:	b570      	push	{r4, r5, r6, lr}
 8006eea:	4d0d      	ldr	r5, [pc, #52]	; (8006f20 <__libc_init_array+0x38>)
 8006eec:	4c0d      	ldr	r4, [pc, #52]	; (8006f24 <__libc_init_array+0x3c>)
 8006eee:	1b64      	subs	r4, r4, r5
 8006ef0:	10a4      	asrs	r4, r4, #2
 8006ef2:	2600      	movs	r6, #0
 8006ef4:	42a6      	cmp	r6, r4
 8006ef6:	d109      	bne.n	8006f0c <__libc_init_array+0x24>
 8006ef8:	4d0b      	ldr	r5, [pc, #44]	; (8006f28 <__libc_init_array+0x40>)
 8006efa:	4c0c      	ldr	r4, [pc, #48]	; (8006f2c <__libc_init_array+0x44>)
 8006efc:	f000 f834 	bl	8006f68 <_init>
 8006f00:	1b64      	subs	r4, r4, r5
 8006f02:	10a4      	asrs	r4, r4, #2
 8006f04:	2600      	movs	r6, #0
 8006f06:	42a6      	cmp	r6, r4
 8006f08:	d105      	bne.n	8006f16 <__libc_init_array+0x2e>
 8006f0a:	bd70      	pop	{r4, r5, r6, pc}
 8006f0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f10:	4798      	blx	r3
 8006f12:	3601      	adds	r6, #1
 8006f14:	e7ee      	b.n	8006ef4 <__libc_init_array+0xc>
 8006f16:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f1a:	4798      	blx	r3
 8006f1c:	3601      	adds	r6, #1
 8006f1e:	e7f2      	b.n	8006f06 <__libc_init_array+0x1e>
 8006f20:	0800711c 	.word	0x0800711c
 8006f24:	0800711c 	.word	0x0800711c
 8006f28:	0800711c 	.word	0x0800711c
 8006f2c:	08007120 	.word	0x08007120

08006f30 <memset>:
 8006f30:	4402      	add	r2, r0
 8006f32:	4603      	mov	r3, r0
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d100      	bne.n	8006f3a <memset+0xa>
 8006f38:	4770      	bx	lr
 8006f3a:	f803 1b01 	strb.w	r1, [r3], #1
 8006f3e:	e7f9      	b.n	8006f34 <memset+0x4>

08006f40 <strncmp>:
 8006f40:	b510      	push	{r4, lr}
 8006f42:	b17a      	cbz	r2, 8006f64 <strncmp+0x24>
 8006f44:	4603      	mov	r3, r0
 8006f46:	3901      	subs	r1, #1
 8006f48:	1884      	adds	r4, r0, r2
 8006f4a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006f4e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006f52:	4290      	cmp	r0, r2
 8006f54:	d101      	bne.n	8006f5a <strncmp+0x1a>
 8006f56:	42a3      	cmp	r3, r4
 8006f58:	d101      	bne.n	8006f5e <strncmp+0x1e>
 8006f5a:	1a80      	subs	r0, r0, r2
 8006f5c:	bd10      	pop	{r4, pc}
 8006f5e:	2800      	cmp	r0, #0
 8006f60:	d1f3      	bne.n	8006f4a <strncmp+0xa>
 8006f62:	e7fa      	b.n	8006f5a <strncmp+0x1a>
 8006f64:	4610      	mov	r0, r2
 8006f66:	e7f9      	b.n	8006f5c <strncmp+0x1c>

08006f68 <_init>:
 8006f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f6a:	bf00      	nop
 8006f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f6e:	bc08      	pop	{r3}
 8006f70:	469e      	mov	lr, r3
 8006f72:	4770      	bx	lr

08006f74 <_fini>:
 8006f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f76:	bf00      	nop
 8006f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f7a:	bc08      	pop	{r3}
 8006f7c:	469e      	mov	lr, r3
 8006f7e:	4770      	bx	lr
